# Registro de Alterações (CHANGELOG)

Todas as alterações significativas neste projeto serão documentadas neste arquivo.

O formato é baseado em [Keep a Changelog](https://keepachangelog.com/pt-BR/1.0.0/),
e este projeto adere ao [Versionamento Semântico](https://semver.org/lang/pt-BR/).

## [Unreleased]
### Added
- Criação do documento `docs/fluxo_consulta_relacionamento.md` detalhando o fluxo completo de dados na consulta de relacionamentos, destacando a interação entre Neo4j e MariaDB
- Criação do documento `docs/fluxo_consulta_componente.md` detalhando o fluxo completo de dados na consulta de componentes, com foco no uso do MariaDB para dados principais
- Criação do documento `docs/fluxo_criacao_relacionamento.md` detalhando o fluxo completo de dados na criação de relacionamentos entre componentes, com ênfase na persistência exclusiva no Neo4j
- Criação do documento `docs/fluxo_criacao_componente.md` detalhando o fluxo completo de dados na criação de componentes, desde o frontend até a persistência dual em MariaDB e Neo4j
- Script `scripts/update-app.sh` para facilitar a atualização e reinicialização dos contêineres de frontend e backend
- Implementação completa da operação de exclusão de componentes (`deleteComponent`) com persistência síncrona nos bancos de dados MariaDB e Neo4j
- Método `deleteNode` adicionado à classe Neo4jClient para facilitar a exclusão de nós e suas relações no Neo4j
- Script `scripts/restart-app.sh` para facilitar a reinicialização da aplicação em caso de problemas
- Contador de caracteres no campo de descrição do formulário de componentes, com limite máximo de 256 caracteres para conformidade com o esquema do banco de dados
- Implementação de rolagem infinita na página de componentes, carregando inicialmente 12 componentes e adicionando mais 8 conforme o usuário rola para baixo, melhorando o desempenho e a experiência do usuário
- Adicionado diálogo de confirmação para todas as operações de exclusão, evitando exclusões acidentais e melhorando a experiência do usuário
- Implementado recurso de ordenação na lista de componentes, permitindo ordenar por nome, data de criação e status, com indicação visual da ordem atual
- Desenvolvida nova seção de Gerenciamento de Relacionamentos com funcionalidade CRUD completa para criação, leitura, atualização e exclusão de relações entre componentes na arquitetura, incluindo validação de formulários, filtros por tipo de relacionamento, ordenação personalizada e confirmação de exclusão
- Campo de busca por nome em componentes
- Truncamento de texto para descrições longas em cards de componentes
- Limitador de caracteres (256) para campo de descrição no formulário de componentes
- Altura fixa (180px) para cards de componentes para melhor consistência visual
- Exibição inteligente de tags com limite de 3 tags visíveis e contador
- Formato de data compacto em cards de componentes
- Cards de relacionamento com altura fixa (160px) para apresentação visual consistente
- Badges coloridos por tipo de relacionamento para identificação visual rápida
- Indicadores direcionais claros entre componentes de origem e destino
- Melhorias na interface de criação/edição de relacionamentos com validação aprimorada
- Layout responsivo com tamanho fixo para cards de relacionamentos (180px de altura)
- Truncamento inteligente de nomes e descrições nos cards de relacionamentos
- Formato de data compacto para exibição nos cards
- Indicadores de status coloridos para componentes de origem e destino
- Implementado limite de caracteres no campo de descrição de componentes (máximo 500 caracteres)
- Atualização automática da lista de componentes após criar, editar ou excluir
- Layout aprimorado para cards de componentes e relacionamentos com tamanho fixo (180px de altura)
- Truncamento inteligente para nomes longos e descrições em cards de componentes e relacionamentos
- Exibição compacta de data para cards de componentes e relacionamentos (formato dd/MM/yyyy)
- Limitação de tags exibidas em cards de componentes (máximo de 3 tags visíveis)
- Menu de navegação aprimorado: renomeado "Components" para "Components Management" com submenus para "Components" e "Relationship"
- Implementados resolvers GraphQL para consulta de relacionamentos (relations e relation)
- Implementado MockNeo4jClient para permitir desenvolvimento sem Neo4j disponível

### Changed
- Atualização das informações de versões e dependências nos documentos `dev_guide_en_us.md` e `Architecture_v1.2_en_us.md` para refletir as versões reais utilizadas no projeto
- Correção na configuração do Docker para o contêiner da API: adicionado suporte a OpenSSL para o Prisma Client
- Corrigida a definição de tipos no GraphQL (ComponentTag e ADRTag) que estavam causando erros de inicialização
- Melhoria na configuração de volumes do Docker para evitar problemas com os módulos do Node.js
- Revisão do padrão de layout na página de Componentes: removidos botões redundantes de Editar e Excluir da parte superior e botão de Fechar na parte inferior do modal de detalhes
- Melhorado o espaçamento entre botões de ação (gap-4) no modal de detalhes de componentes para melhor alinhamento com as diretrizes de UI/UX
- Aprimorada a experiência do usuário na página de Componentes com atualização automática da lista após operações CRUD: implementado hook useEffect para detectar fechamento do modal e callbacks específicos para garantir que a lista seja sempre atualizada após criação, edição ou exclusão
- Implementada validação e limite de 256 caracteres no campo de descrição dos componentes, com feedback visual para indicar ao usuário a quantidade de caracteres restantes
- Redesenhados os cards de componentes com altura fixa (180px) para apresentação visual simétrica e consistente, incluindo truncamento inteligente de texto, limitação de tags visíveis e formato de data compacto
- Corrigido o estilo dos dropdowns para garantir fundo sólido (não transparente) em todos os menus suspensos, melhorando a legibilidade e consistência visual em ambos os temas (claro e escuro)
- Alterada a cor dos botões de ação em destaque para utilizar a cor primária roxa (var(--primary)), garantindo consistência visual e aderência ao guia de estilo da aplicação
- Aprimorado o alinhamento do menu lateral para garantir consistência visual entre itens com e sem submenu, aplicando layout flexível e espaçamento uniforme
- Corrigido o alinhamento e a margem do texto nas opções do menu lateral, adicionando truncamento para textos longos e garantindo espaçamento consistente entre os elementos

### Fixed
- Corrigido o erro 400 na página de relacionamentos que impedia a exibição dos dados
- Implementada integração completa entre o Neo4j e o frontend para visualização de relacionamentos
- Corrigido erro de compilação do Pothos GraphQL que exigia a propriedade 'notStrict' no SchemaBuilder
- Corrigido erro de sintaxe no resolver 'relations' (substituindo t.list por t.field com array type)
- Resolvido conflito de porta na inicialização da API, garantindo que o servidor possa iniciar corretamente
- Implementado fallback para simular conexão Neo4j quando o banco de dados não está disponível

## [0.3.0] - 2023-11-18

### Adicionado
- Recriação completa do frontend baseado na nova interface
- Implementação do layout responsivo
- Navegação lateral com opções expansíveis
- Tema escuro/claro com suporte ao Next.js
- Componentes de interface seguindo o novo design
- Página inicial com estatísticas e recursos
- Visualização de arquitetura com diagrama interativo

## [0.2.0] - 2023-11-17

### Removido
- Estrutura completa do frontend removida, incluindo:
  - Todos os componentes React (layout, UI)
  - Arquivos de estilo e utilitários
  - Páginas e rotas Next.js
  - Configurações de tema
- Dependências do frontend removidas do package.json:
  - React, Next.js e suas dependências
  - Componentes Radix UI
  - TailwindCSS e utilitários
  - Bibliotecas de interface como Lucide, Headless UI, etc.
- Arquivos de configuração frontend removidos:
  - next.config.ts
  - eslint.config.mjs
  - .eslintrc.json
  - postcss.config.js
  - tailwind.config.js
- Diretórios removidos:
  - node_modules_frontend
  - .next
  - public

### Alterado
- Atualizado docker-compose.yml para remover o serviço de frontend
- Testado o funcionamento do backend em GraphQL:
  - Servidor Apollo funciona corretamente
  - API responde a consultas básicas
  - Verificado endpoints /graphql e /status

## [0.1.1] - 2023-11-15

### Adicionado
- Configuração completa do TailwindCSS
- Definição das cores personalizadas da marca no tema do Tailwind
- Configuração das fontes Inter e Roboto
- Atualização do layout para utilizar classes do Tailwind

## [0.1.0] - 2023-11-10

### Adicionado
- Inicialização do projeto Next.js
- Criação dos componentes de layout (Header, Sidebar, Footer)
- Implementação do layout padrão da aplicação
- Criação das páginas iniciais:
  - Home
  - Arch Overview (Visão geral da arquitetura)
  - ADR Management (Gerenciamento de ADRs)
  - Impact Workflow (Fluxo de impacto)
- Implementação de navegação entre páginas
- Estrutura básica do projeto seguindo as boas práticas do Next.js
- Documentação inicial no README.md 