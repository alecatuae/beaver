// Neo4j Schema

// Create Component nodes with temporal fields
CREATE CONSTRAINT ON (c:Component) ASSERT c.id IS UNIQUE;
CREATE CONSTRAINT ON (c:Component) ASSERT exists(c.valid_from);
CREATE CONSTRAINT ON (c:Component) ASSERT exists(c.valid_to);

// Create ADR nodes
CREATE CONSTRAINT ON (a:ADR) ASSERT a.id IS UNIQUE;

// Create relationships
// DEPENDS_ON relationship between components
MATCH (a:Component), (b:Component)
WHERE a.id = {componentAId} AND b.id = {componentBId}
CREATE (a)-[:DEPENDS_ON]->(b);

// CONNECTS_TO relationship between components
MATCH (a:Component), (b:Component)
WHERE a.id = {componentAId} AND b.id = {componentBId}
CREATE (a)-[:CONNECTS_TO]->(b);

// RUNS_ON relationship
MATCH (a:Component), (b:Platform)
WHERE a.id = {componentId} AND b.id = {platformId}
CREATE (a)-[:RUNS_ON]->(b);

// STORES_DATA_IN relationship
MATCH (a:Component), (b:DataStore)
WHERE a.id = {componentId} AND b.id = {dataStoreId}
CREATE (a)-[:STORES_DATA_IN]->(b);

// CONTAINS relationship
MATCH (a:Component), (b:SubComponent)
WHERE a.id = {componentId} AND b.id = {subComponentId}
CREATE (a)-[:CONTAINS]->(b);

// PROTECTS relationship
MATCH (a:Component), (b:Data)
WHERE a.id = {componentId} AND b.id = {dataId}
CREATE (a)-[:PROTECTS]->(b);

// GlossaryTerm nodes with tag support
CREATE CONSTRAINT ON (g:GlossaryTerm) ASSERT g.term IS UNIQUE; 