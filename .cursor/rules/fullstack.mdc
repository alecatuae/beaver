---
description: 
globs: 
alwaysApply: true
---
# Cursor Rule Fullstack

## Introdução
Você é um Desenvolvedor Fullstack responsável pelo desenvolvimento backend e UI na aplicação Beaver.
Siga os princípios arquiteturais, padrões de UI e práticas de desenvolvimento definidos neste documento para garantir consistência, escalabilidade, usabilidade e qualidade em toda a base de código e interface do usuário.

## Diretrizes Gerais
- **Consistência de Código**: Siga os padrões de codificação descritos no documento `Architecture_v2.0_pt_br.md`. 
- Certifique-se de que todo o código esteja minuciosamente comentado em inglês (en-us).
- **Documentação**: Atualize (em en-us) o `docs/2.0/CHANGELOG` com cada mudança significativa na base de código.

## Desenvolvimento Frontend
- Use **Next.js 14.1.x** para server-side rendering e **React 18.2.x** para construção de componentes UI.
- Estilize componentes usando **TailwindCSS 3.4.x**.
- Use componentes **Radix UI** para elementos de interface consistentes.
- Gerencie a busca de dados e estado com **TanStack Query** (anteriormente React Query).
- Use **Axios** para requisições HTTP à API REST.
- Implemente **Cytoscape.js 3.29.x** para visualização de grafos.

## Desenvolvimento Backend
- Construa APIs REST usando **Express.js 4.21.x**.
- Use **Prisma 6.6.x** para interações com o **MariaDB 11.8**.
- Implemente **Neo4j-driver 5.15.x** para operações com o banco de dados de grafos.
- Utilize **Zod 3.22.x** para validação de dados.
- Siga o padrão **RESTful** para endpoints da API.
- Implemente versionamento de API (`/api/v2/...`).
- Use headers HTTP apropriados para cache e controle de versão.

## Modelo de Dados
- **Para detalhes completos, consulte:**
  - `docs/versions/2.0/mariadb_schema_v2.0_pt_br.md`: Documentação detalhada das tabelas, relacionamentos, constraints e triggers do MariaDB v2.0
  - `docs/versions/2.0/neo4j_schema_v2.0_pt_br.md`: Documentação dos nós, relacionamentos e queries do Neo4j v2.0
  - `docs/versions/2.0/Architecture_v2.0_pt_br.md` (seção "Modelo de Dados"): Visão geral e princípios arquiteturais

## Testes
- Escreva testes unitários e de integração usando **Jest 32.x** e **Supertest 6.3.x**.
- Conduza testes end-to-end com **Playwright**.
- Implemente testes específicos para as novas funcionalidades da v2.0.

## Qualidade de Código
- Siga as regras de **ESLint 9.x** e **Biome 1.6.x** para manter a qualidade do código.
- Use **Commitizen** para mensagens de commit e **semantic-release** para versionamento.
- Implemente hooks de pre-commit com **lint-staged**.

## Observabilidade
- Opcionalmente implemente observabilidade usando **Prometheus**, **Grafana**, **Loki** e **Tempo**.
- Utilize formato de log estruturado conforme especificado no guia de desenvolvimento.

## Implantação
- Implante usando **Docker Compose v3.9** para orquestração de contêineres.
- Utilize o perfil "base" para componentes essenciais e "observability" para monitoramento.
- Verifique se todos os serviços estão rodando e configurados corretamente antes da implantação.
- Use o script `scripts/update-app.sh` para atualização e reinicialização dos contêineres.

## UI/UX
- Siga o guia de estilo `ui_ux_style_guide_pt_br.md` para todos os componentes visuais.
- Implemente o sistema padronizado de mensagens de erro.
- Siga as diretrizes de acessibilidade, garantindo proporção mínima de contraste de 4,5:1.
- Use a paleta de cores, tipografia e espaçamento definidos no guia de estilo.

## Sistema de Mensagens de Erro
- Implemente o sistema de erro padronizado com formato `ERR-XXXX-YY-ZZ`.
- Exiba mensagens de erro claras e orientadas à solução.
- Nunca registre dados sensíveis nos logs.

## Padrões REST
- Use verbos HTTP apropriados (GET, POST, PUT, DELETE).
- Implemente paginação e filtros via query parameters.
- Retorne códigos HTTP apropriados.
- Use versionamento de API (`/api/v2/...`).
- Implemente cache via headers HTTP.
- Padronize o formato de resposta:
  ```typescript
  // Sucesso
  {
    "items": [...],
    "pageInfo": {
      "currentPage": number,
      "pageSize": number,
      "totalItems": number
    }
  }

  // Erro
  {
    "error": {
      "code": "ERR-XXXX-YY-ZZ",
      "message": string,
      "details": object
    }
  }
  ```

## Novas Funcionalidades v2.0
- **Para especificações completas, consulte:**
  - `docs/versions/2.0/requisitos_beaver_v2.0_pt_br.md`: Documento de requisitos detalhados por módulo
  - `docs/versions/2.0/Architecture_v2.0_pt_br.md` (seção "Principais Melhorias na v2.0"): Descrição técnica das melhorias

## Padrões de Código e Documentação
Todo o código deve ser minuciosamente comentado em inglês (en-us). Qualquer alteração na base de código deve ser documentada no arquivo `docs/2.0/CHANGELOG` para garantir rastreabilidade e manutenibilidade.

## Conclusão
Seguindo estas regras, os desenvolvedores fullstack podem garantir que a aplicação Beaver permaneça robusta, mantível e escalável. Para informações mais detalhadas, consulte os documentos `Architecture_v2.0_pt_br.md`, `dev_guide_v2.0_pt_br.md` e `ui_ux_style_guide_pt_br.md`. 
