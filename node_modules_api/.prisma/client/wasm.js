
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  passwordHash: 'passwordHash',
  email: 'email',
  role: 'role',
  createdAt: 'createdAt'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.Team_MemberScalarFieldEnum = {
  teamId: 'teamId',
  userId: 'userId',
  joinedAt: 'joinedAt'
};

exports.Prisma.EnvironmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  createdAt: 'createdAt'
};

exports.Prisma.ComponentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  categoryId: 'categoryId',
  teamId: 'teamId',
  createdAt: 'createdAt'
};

exports.Prisma.ComponentInstanceScalarFieldEnum = {
  id: 'id',
  componentId: 'componentId',
  environmentId: 'environmentId',
  hostname: 'hostname',
  specs: 'specs',
  createdAt: 'createdAt'
};

exports.Prisma.ADRScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.ADR_ParticipantScalarFieldEnum = {
  id: 'id',
  adrId: 'adrId',
  userId: 'userId',
  role: 'role',
  createdAt: 'createdAt'
};

exports.Prisma.ADR_ComponentInstanceScalarFieldEnum = {
  adrId: 'adrId',
  instanceId: 'instanceId',
  impactLevel: 'impactLevel'
};

exports.Prisma.ADR_ComponentScalarFieldEnum = {
  adrId: 'adrId',
  componentId: 'componentId'
};

exports.Prisma.RoadmapItemScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  componentId: 'componentId',
  typeId: 'typeId',
  status: 'status',
  dueDate: 'dueDate',
  createdAt: 'createdAt'
};

exports.Prisma.RoadmapTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  colorHex: 'colorHex',
  createdAt: 'createdAt'
};

exports.Prisma.LogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  level: 'level',
  message: 'message',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.GlossaryTermScalarFieldEnum = {
  id: 'id',
  term: 'term',
  definition: 'definition',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.ComponentTagScalarFieldEnum = {
  id: 'id',
  componentId: 'componentId',
  tag: 'tag'
};

exports.Prisma.RelationshipTagScalarFieldEnum = {
  id: 'id',
  sourceId: 'sourceId',
  targetId: 'targetId',
  tag: 'tag'
};

exports.Prisma.ADRTagScalarFieldEnum = {
  id: 'id',
  adrId: 'adrId',
  tag: 'tag'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.User_role = exports.$Enums.User_role = {
  ADMIN: 'ADMIN',
  USER: 'USER',
  GUEST: 'GUEST'
};

exports.Component_status = exports.$Enums.Component_status = {
  PLANNED: 'PLANNED',
  ACTIVE: 'ACTIVE',
  DEPRECATED: 'DEPRECATED'
};

exports.ADR_status = exports.$Enums.ADR_status = {
  DRAFT: 'DRAFT',
  ACCEPTED: 'ACCEPTED',
  SUPERSEDED: 'SUPERSEDED',
  REJECTED: 'REJECTED'
};

exports.ParticipantRole = exports.$Enums.ParticipantRole = {
  OWNER: 'OWNER',
  REVIEWER: 'REVIEWER',
  CONSUMER: 'CONSUMER'
};

exports.ImpactLevel = exports.$Enums.ImpactLevel = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

exports.RoadmapItem_status = exports.$Enums.RoadmapItem_status = {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  DONE: 'DONE',
  BLOCKED: 'BLOCKED'
};

exports.LogLevel = exports.$Enums.LogLevel = {
  INFO: 'INFO',
  WARN: 'WARN',
  ERROR: 'ERROR'
};

exports.GlossaryStatus = exports.$Enums.GlossaryStatus = {
  DRAFT: 'DRAFT',
  APPROVED: 'APPROVED',
  DEPRECATED: 'DEPRECATED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Team: 'Team',
  Team_Member: 'Team_Member',
  Environment: 'Environment',
  Category: 'Category',
  Component: 'Component',
  ComponentInstance: 'ComponentInstance',
  ADR: 'ADR',
  ADR_Participant: 'ADR_Participant',
  ADR_ComponentInstance: 'ADR_ComponentInstance',
  ADR_Component: 'ADR_Component',
  RoadmapItem: 'RoadmapItem',
  RoadmapType: 'RoadmapType',
  Log: 'Log',
  GlossaryTerm: 'GlossaryTerm',
  ComponentTag: 'ComponentTag',
  RelationshipTag: 'RelationshipTag',
  ADRTag: 'ADRTag'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
