
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model Team_Member
 * 
 */
export type Team_Member = $Result.DefaultSelection<Prisma.$Team_MemberPayload>
/**
 * Model Environment
 * 
 */
export type Environment = $Result.DefaultSelection<Prisma.$EnvironmentPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Component
 * 
 */
export type Component = $Result.DefaultSelection<Prisma.$ComponentPayload>
/**
 * Model ComponentInstance
 * 
 */
export type ComponentInstance = $Result.DefaultSelection<Prisma.$ComponentInstancePayload>
/**
 * Model ADR
 * 
 */
export type ADR = $Result.DefaultSelection<Prisma.$ADRPayload>
/**
 * Model ADR_Participant
 * 
 */
export type ADR_Participant = $Result.DefaultSelection<Prisma.$ADR_ParticipantPayload>
/**
 * Model ADR_ComponentInstance
 * 
 */
export type ADR_ComponentInstance = $Result.DefaultSelection<Prisma.$ADR_ComponentInstancePayload>
/**
 * Model ADR_Component
 * 
 */
export type ADR_Component = $Result.DefaultSelection<Prisma.$ADR_ComponentPayload>
/**
 * Model RoadmapItem
 * 
 */
export type RoadmapItem = $Result.DefaultSelection<Prisma.$RoadmapItemPayload>
/**
 * Model RoadmapType
 * 
 */
export type RoadmapType = $Result.DefaultSelection<Prisma.$RoadmapTypePayload>
/**
 * Model Log
 * 
 */
export type Log = $Result.DefaultSelection<Prisma.$LogPayload>
/**
 * Model GlossaryTerm
 * 
 */
export type GlossaryTerm = $Result.DefaultSelection<Prisma.$GlossaryTermPayload>
/**
 * Model ComponentTag
 * 
 */
export type ComponentTag = $Result.DefaultSelection<Prisma.$ComponentTagPayload>
/**
 * Model RelationshipTag
 * 
 */
export type RelationshipTag = $Result.DefaultSelection<Prisma.$RelationshipTagPayload>
/**
 * Model ADRTag
 * 
 */
export type ADRTag = $Result.DefaultSelection<Prisma.$ADRTagPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const User_role: {
  ADMIN: 'ADMIN',
  USER: 'USER',
  GUEST: 'GUEST'
};

export type User_role = (typeof User_role)[keyof typeof User_role]


export const Component_status: {
  PLANNED: 'PLANNED',
  ACTIVE: 'ACTIVE',
  DEPRECATED: 'DEPRECATED'
};

export type Component_status = (typeof Component_status)[keyof typeof Component_status]


export const ADR_status: {
  DRAFT: 'DRAFT',
  ACCEPTED: 'ACCEPTED',
  SUPERSEDED: 'SUPERSEDED',
  REJECTED: 'REJECTED'
};

export type ADR_status = (typeof ADR_status)[keyof typeof ADR_status]


export const ParticipantRole: {
  OWNER: 'OWNER',
  REVIEWER: 'REVIEWER',
  CONSUMER: 'CONSUMER'
};

export type ParticipantRole = (typeof ParticipantRole)[keyof typeof ParticipantRole]


export const ImpactLevel: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

export type ImpactLevel = (typeof ImpactLevel)[keyof typeof ImpactLevel]


export const RoadmapItem_status: {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  DONE: 'DONE',
  BLOCKED: 'BLOCKED'
};

export type RoadmapItem_status = (typeof RoadmapItem_status)[keyof typeof RoadmapItem_status]


export const LogLevel: {
  INFO: 'INFO',
  WARN: 'WARN',
  ERROR: 'ERROR'
};

export type LogLevel = (typeof LogLevel)[keyof typeof LogLevel]


export const GlossaryStatus: {
  DRAFT: 'DRAFT',
  APPROVED: 'APPROVED',
  DEPRECATED: 'DEPRECATED'
};

export type GlossaryStatus = (typeof GlossaryStatus)[keyof typeof GlossaryStatus]

}

export type User_role = $Enums.User_role

export const User_role: typeof $Enums.User_role

export type Component_status = $Enums.Component_status

export const Component_status: typeof $Enums.Component_status

export type ADR_status = $Enums.ADR_status

export const ADR_status: typeof $Enums.ADR_status

export type ParticipantRole = $Enums.ParticipantRole

export const ParticipantRole: typeof $Enums.ParticipantRole

export type ImpactLevel = $Enums.ImpactLevel

export const ImpactLevel: typeof $Enums.ImpactLevel

export type RoadmapItem_status = $Enums.RoadmapItem_status

export const RoadmapItem_status: typeof $Enums.RoadmapItem_status

export type LogLevel = $Enums.LogLevel

export const LogLevel: typeof $Enums.LogLevel

export type GlossaryStatus = $Enums.GlossaryStatus

export const GlossaryStatus: typeof $Enums.GlossaryStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs>;

  /**
   * `prisma.team_Member`: Exposes CRUD operations for the **Team_Member** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Team_Members
    * const team_Members = await prisma.team_Member.findMany()
    * ```
    */
  get team_Member(): Prisma.Team_MemberDelegate<ExtArgs>;

  /**
   * `prisma.environment`: Exposes CRUD operations for the **Environment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Environments
    * const environments = await prisma.environment.findMany()
    * ```
    */
  get environment(): Prisma.EnvironmentDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.component`: Exposes CRUD operations for the **Component** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Components
    * const components = await prisma.component.findMany()
    * ```
    */
  get component(): Prisma.ComponentDelegate<ExtArgs>;

  /**
   * `prisma.componentInstance`: Exposes CRUD operations for the **ComponentInstance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ComponentInstances
    * const componentInstances = await prisma.componentInstance.findMany()
    * ```
    */
  get componentInstance(): Prisma.ComponentInstanceDelegate<ExtArgs>;

  /**
   * `prisma.aDR`: Exposes CRUD operations for the **ADR** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ADRS
    * const aDRS = await prisma.aDR.findMany()
    * ```
    */
  get aDR(): Prisma.ADRDelegate<ExtArgs>;

  /**
   * `prisma.aDR_Participant`: Exposes CRUD operations for the **ADR_Participant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ADR_Participants
    * const aDR_Participants = await prisma.aDR_Participant.findMany()
    * ```
    */
  get aDR_Participant(): Prisma.ADR_ParticipantDelegate<ExtArgs>;

  /**
   * `prisma.aDR_ComponentInstance`: Exposes CRUD operations for the **ADR_ComponentInstance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ADR_ComponentInstances
    * const aDR_ComponentInstances = await prisma.aDR_ComponentInstance.findMany()
    * ```
    */
  get aDR_ComponentInstance(): Prisma.ADR_ComponentInstanceDelegate<ExtArgs>;

  /**
   * `prisma.aDR_Component`: Exposes CRUD operations for the **ADR_Component** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ADR_Components
    * const aDR_Components = await prisma.aDR_Component.findMany()
    * ```
    */
  get aDR_Component(): Prisma.ADR_ComponentDelegate<ExtArgs>;

  /**
   * `prisma.roadmapItem`: Exposes CRUD operations for the **RoadmapItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoadmapItems
    * const roadmapItems = await prisma.roadmapItem.findMany()
    * ```
    */
  get roadmapItem(): Prisma.RoadmapItemDelegate<ExtArgs>;

  /**
   * `prisma.roadmapType`: Exposes CRUD operations for the **RoadmapType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoadmapTypes
    * const roadmapTypes = await prisma.roadmapType.findMany()
    * ```
    */
  get roadmapType(): Prisma.RoadmapTypeDelegate<ExtArgs>;

  /**
   * `prisma.log`: Exposes CRUD operations for the **Log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logs
    * const logs = await prisma.log.findMany()
    * ```
    */
  get log(): Prisma.LogDelegate<ExtArgs>;

  /**
   * `prisma.glossaryTerm`: Exposes CRUD operations for the **GlossaryTerm** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GlossaryTerms
    * const glossaryTerms = await prisma.glossaryTerm.findMany()
    * ```
    */
  get glossaryTerm(): Prisma.GlossaryTermDelegate<ExtArgs>;

  /**
   * `prisma.componentTag`: Exposes CRUD operations for the **ComponentTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ComponentTags
    * const componentTags = await prisma.componentTag.findMany()
    * ```
    */
  get componentTag(): Prisma.ComponentTagDelegate<ExtArgs>;

  /**
   * `prisma.relationshipTag`: Exposes CRUD operations for the **RelationshipTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RelationshipTags
    * const relationshipTags = await prisma.relationshipTag.findMany()
    * ```
    */
  get relationshipTag(): Prisma.RelationshipTagDelegate<ExtArgs>;

  /**
   * `prisma.aDRTag`: Exposes CRUD operations for the **ADRTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ADRTags
    * const aDRTags = await prisma.aDRTag.findMany()
    * ```
    */
  get aDRTag(): Prisma.ADRTagDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Team: 'Team',
    Team_Member: 'Team_Member',
    Environment: 'Environment',
    Category: 'Category',
    Component: 'Component',
    ComponentInstance: 'ComponentInstance',
    ADR: 'ADR',
    ADR_Participant: 'ADR_Participant',
    ADR_ComponentInstance: 'ADR_ComponentInstance',
    ADR_Component: 'ADR_Component',
    RoadmapItem: 'RoadmapItem',
    RoadmapType: 'RoadmapType',
    Log: 'Log',
    GlossaryTerm: 'GlossaryTerm',
    ComponentTag: 'ComponentTag',
    RelationshipTag: 'RelationshipTag',
    ADRTag: 'ADRTag'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "team" | "team_Member" | "environment" | "category" | "component" | "componentInstance" | "aDR" | "aDR_Participant" | "aDR_ComponentInstance" | "aDR_Component" | "roadmapItem" | "roadmapType" | "log" | "glossaryTerm" | "componentTag" | "relationshipTag" | "aDRTag"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      Team_Member: {
        payload: Prisma.$Team_MemberPayload<ExtArgs>
        fields: Prisma.Team_MemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Team_MemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Team_MemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Team_MemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Team_MemberPayload>
          }
          findFirst: {
            args: Prisma.Team_MemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Team_MemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Team_MemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Team_MemberPayload>
          }
          findMany: {
            args: Prisma.Team_MemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Team_MemberPayload>[]
          }
          create: {
            args: Prisma.Team_MemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Team_MemberPayload>
          }
          createMany: {
            args: Prisma.Team_MemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.Team_MemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Team_MemberPayload>
          }
          update: {
            args: Prisma.Team_MemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Team_MemberPayload>
          }
          deleteMany: {
            args: Prisma.Team_MemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Team_MemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Team_MemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Team_MemberPayload>
          }
          aggregate: {
            args: Prisma.Team_MemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam_Member>
          }
          groupBy: {
            args: Prisma.Team_MemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<Team_MemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.Team_MemberCountArgs<ExtArgs>
            result: $Utils.Optional<Team_MemberCountAggregateOutputType> | number
          }
        }
      }
      Environment: {
        payload: Prisma.$EnvironmentPayload<ExtArgs>
        fields: Prisma.EnvironmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EnvironmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnvironmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnvironmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnvironmentPayload>
          }
          findFirst: {
            args: Prisma.EnvironmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnvironmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnvironmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnvironmentPayload>
          }
          findMany: {
            args: Prisma.EnvironmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnvironmentPayload>[]
          }
          create: {
            args: Prisma.EnvironmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnvironmentPayload>
          }
          createMany: {
            args: Prisma.EnvironmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EnvironmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnvironmentPayload>
          }
          update: {
            args: Prisma.EnvironmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnvironmentPayload>
          }
          deleteMany: {
            args: Prisma.EnvironmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EnvironmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EnvironmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnvironmentPayload>
          }
          aggregate: {
            args: Prisma.EnvironmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEnvironment>
          }
          groupBy: {
            args: Prisma.EnvironmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<EnvironmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnvironmentCountArgs<ExtArgs>
            result: $Utils.Optional<EnvironmentCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Component: {
        payload: Prisma.$ComponentPayload<ExtArgs>
        fields: Prisma.ComponentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComponentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComponentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPayload>
          }
          findFirst: {
            args: Prisma.ComponentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComponentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPayload>
          }
          findMany: {
            args: Prisma.ComponentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPayload>[]
          }
          create: {
            args: Prisma.ComponentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPayload>
          }
          createMany: {
            args: Prisma.ComponentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ComponentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPayload>
          }
          update: {
            args: Prisma.ComponentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPayload>
          }
          deleteMany: {
            args: Prisma.ComponentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComponentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ComponentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentPayload>
          }
          aggregate: {
            args: Prisma.ComponentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComponent>
          }
          groupBy: {
            args: Prisma.ComponentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComponentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComponentCountArgs<ExtArgs>
            result: $Utils.Optional<ComponentCountAggregateOutputType> | number
          }
        }
      }
      ComponentInstance: {
        payload: Prisma.$ComponentInstancePayload<ExtArgs>
        fields: Prisma.ComponentInstanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComponentInstanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentInstancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComponentInstanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentInstancePayload>
          }
          findFirst: {
            args: Prisma.ComponentInstanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentInstancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComponentInstanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentInstancePayload>
          }
          findMany: {
            args: Prisma.ComponentInstanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentInstancePayload>[]
          }
          create: {
            args: Prisma.ComponentInstanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentInstancePayload>
          }
          createMany: {
            args: Prisma.ComponentInstanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ComponentInstanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentInstancePayload>
          }
          update: {
            args: Prisma.ComponentInstanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentInstancePayload>
          }
          deleteMany: {
            args: Prisma.ComponentInstanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComponentInstanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ComponentInstanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentInstancePayload>
          }
          aggregate: {
            args: Prisma.ComponentInstanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComponentInstance>
          }
          groupBy: {
            args: Prisma.ComponentInstanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComponentInstanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComponentInstanceCountArgs<ExtArgs>
            result: $Utils.Optional<ComponentInstanceCountAggregateOutputType> | number
          }
        }
      }
      ADR: {
        payload: Prisma.$ADRPayload<ExtArgs>
        fields: Prisma.ADRFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ADRFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADRPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ADRFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADRPayload>
          }
          findFirst: {
            args: Prisma.ADRFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADRPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ADRFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADRPayload>
          }
          findMany: {
            args: Prisma.ADRFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADRPayload>[]
          }
          create: {
            args: Prisma.ADRCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADRPayload>
          }
          createMany: {
            args: Prisma.ADRCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ADRDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADRPayload>
          }
          update: {
            args: Prisma.ADRUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADRPayload>
          }
          deleteMany: {
            args: Prisma.ADRDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ADRUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ADRUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADRPayload>
          }
          aggregate: {
            args: Prisma.ADRAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateADR>
          }
          groupBy: {
            args: Prisma.ADRGroupByArgs<ExtArgs>
            result: $Utils.Optional<ADRGroupByOutputType>[]
          }
          count: {
            args: Prisma.ADRCountArgs<ExtArgs>
            result: $Utils.Optional<ADRCountAggregateOutputType> | number
          }
        }
      }
      ADR_Participant: {
        payload: Prisma.$ADR_ParticipantPayload<ExtArgs>
        fields: Prisma.ADR_ParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ADR_ParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ADR_ParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ParticipantPayload>
          }
          findFirst: {
            args: Prisma.ADR_ParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ADR_ParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ParticipantPayload>
          }
          findMany: {
            args: Prisma.ADR_ParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ParticipantPayload>[]
          }
          create: {
            args: Prisma.ADR_ParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ParticipantPayload>
          }
          createMany: {
            args: Prisma.ADR_ParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ADR_ParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ParticipantPayload>
          }
          update: {
            args: Prisma.ADR_ParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ParticipantPayload>
          }
          deleteMany: {
            args: Prisma.ADR_ParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ADR_ParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ADR_ParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ParticipantPayload>
          }
          aggregate: {
            args: Prisma.ADR_ParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateADR_Participant>
          }
          groupBy: {
            args: Prisma.ADR_ParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<ADR_ParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.ADR_ParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<ADR_ParticipantCountAggregateOutputType> | number
          }
        }
      }
      ADR_ComponentInstance: {
        payload: Prisma.$ADR_ComponentInstancePayload<ExtArgs>
        fields: Prisma.ADR_ComponentInstanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ADR_ComponentInstanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ComponentInstancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ADR_ComponentInstanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ComponentInstancePayload>
          }
          findFirst: {
            args: Prisma.ADR_ComponentInstanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ComponentInstancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ADR_ComponentInstanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ComponentInstancePayload>
          }
          findMany: {
            args: Prisma.ADR_ComponentInstanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ComponentInstancePayload>[]
          }
          create: {
            args: Prisma.ADR_ComponentInstanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ComponentInstancePayload>
          }
          createMany: {
            args: Prisma.ADR_ComponentInstanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ADR_ComponentInstanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ComponentInstancePayload>
          }
          update: {
            args: Prisma.ADR_ComponentInstanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ComponentInstancePayload>
          }
          deleteMany: {
            args: Prisma.ADR_ComponentInstanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ADR_ComponentInstanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ADR_ComponentInstanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ComponentInstancePayload>
          }
          aggregate: {
            args: Prisma.ADR_ComponentInstanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateADR_ComponentInstance>
          }
          groupBy: {
            args: Prisma.ADR_ComponentInstanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ADR_ComponentInstanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ADR_ComponentInstanceCountArgs<ExtArgs>
            result: $Utils.Optional<ADR_ComponentInstanceCountAggregateOutputType> | number
          }
        }
      }
      ADR_Component: {
        payload: Prisma.$ADR_ComponentPayload<ExtArgs>
        fields: Prisma.ADR_ComponentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ADR_ComponentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ComponentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ADR_ComponentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ComponentPayload>
          }
          findFirst: {
            args: Prisma.ADR_ComponentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ComponentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ADR_ComponentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ComponentPayload>
          }
          findMany: {
            args: Prisma.ADR_ComponentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ComponentPayload>[]
          }
          create: {
            args: Prisma.ADR_ComponentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ComponentPayload>
          }
          createMany: {
            args: Prisma.ADR_ComponentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ADR_ComponentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ComponentPayload>
          }
          update: {
            args: Prisma.ADR_ComponentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ComponentPayload>
          }
          deleteMany: {
            args: Prisma.ADR_ComponentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ADR_ComponentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ADR_ComponentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADR_ComponentPayload>
          }
          aggregate: {
            args: Prisma.ADR_ComponentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateADR_Component>
          }
          groupBy: {
            args: Prisma.ADR_ComponentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ADR_ComponentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ADR_ComponentCountArgs<ExtArgs>
            result: $Utils.Optional<ADR_ComponentCountAggregateOutputType> | number
          }
        }
      }
      RoadmapItem: {
        payload: Prisma.$RoadmapItemPayload<ExtArgs>
        fields: Prisma.RoadmapItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoadmapItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoadmapItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapItemPayload>
          }
          findFirst: {
            args: Prisma.RoadmapItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoadmapItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapItemPayload>
          }
          findMany: {
            args: Prisma.RoadmapItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapItemPayload>[]
          }
          create: {
            args: Prisma.RoadmapItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapItemPayload>
          }
          createMany: {
            args: Prisma.RoadmapItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RoadmapItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapItemPayload>
          }
          update: {
            args: Prisma.RoadmapItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapItemPayload>
          }
          deleteMany: {
            args: Prisma.RoadmapItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoadmapItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoadmapItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapItemPayload>
          }
          aggregate: {
            args: Prisma.RoadmapItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoadmapItem>
          }
          groupBy: {
            args: Prisma.RoadmapItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoadmapItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoadmapItemCountArgs<ExtArgs>
            result: $Utils.Optional<RoadmapItemCountAggregateOutputType> | number
          }
        }
      }
      RoadmapType: {
        payload: Prisma.$RoadmapTypePayload<ExtArgs>
        fields: Prisma.RoadmapTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoadmapTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoadmapTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapTypePayload>
          }
          findFirst: {
            args: Prisma.RoadmapTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoadmapTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapTypePayload>
          }
          findMany: {
            args: Prisma.RoadmapTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapTypePayload>[]
          }
          create: {
            args: Prisma.RoadmapTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapTypePayload>
          }
          createMany: {
            args: Prisma.RoadmapTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RoadmapTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapTypePayload>
          }
          update: {
            args: Prisma.RoadmapTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapTypePayload>
          }
          deleteMany: {
            args: Prisma.RoadmapTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoadmapTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoadmapTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapTypePayload>
          }
          aggregate: {
            args: Prisma.RoadmapTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoadmapType>
          }
          groupBy: {
            args: Prisma.RoadmapTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoadmapTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoadmapTypeCountArgs<ExtArgs>
            result: $Utils.Optional<RoadmapTypeCountAggregateOutputType> | number
          }
        }
      }
      Log: {
        payload: Prisma.$LogPayload<ExtArgs>
        fields: Prisma.LogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findFirst: {
            args: Prisma.LogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findMany: {
            args: Prisma.LogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          create: {
            args: Prisma.LogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          createMany: {
            args: Prisma.LogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          update: {
            args: Prisma.LogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          deleteMany: {
            args: Prisma.LogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          aggregate: {
            args: Prisma.LogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLog>
          }
          groupBy: {
            args: Prisma.LogGroupByArgs<ExtArgs>
            result: $Utils.Optional<LogGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogCountArgs<ExtArgs>
            result: $Utils.Optional<LogCountAggregateOutputType> | number
          }
        }
      }
      GlossaryTerm: {
        payload: Prisma.$GlossaryTermPayload<ExtArgs>
        fields: Prisma.GlossaryTermFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GlossaryTermFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryTermPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GlossaryTermFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryTermPayload>
          }
          findFirst: {
            args: Prisma.GlossaryTermFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryTermPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GlossaryTermFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryTermPayload>
          }
          findMany: {
            args: Prisma.GlossaryTermFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryTermPayload>[]
          }
          create: {
            args: Prisma.GlossaryTermCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryTermPayload>
          }
          createMany: {
            args: Prisma.GlossaryTermCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GlossaryTermDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryTermPayload>
          }
          update: {
            args: Prisma.GlossaryTermUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryTermPayload>
          }
          deleteMany: {
            args: Prisma.GlossaryTermDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GlossaryTermUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GlossaryTermUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryTermPayload>
          }
          aggregate: {
            args: Prisma.GlossaryTermAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGlossaryTerm>
          }
          groupBy: {
            args: Prisma.GlossaryTermGroupByArgs<ExtArgs>
            result: $Utils.Optional<GlossaryTermGroupByOutputType>[]
          }
          count: {
            args: Prisma.GlossaryTermCountArgs<ExtArgs>
            result: $Utils.Optional<GlossaryTermCountAggregateOutputType> | number
          }
        }
      }
      ComponentTag: {
        payload: Prisma.$ComponentTagPayload<ExtArgs>
        fields: Prisma.ComponentTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComponentTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComponentTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTagPayload>
          }
          findFirst: {
            args: Prisma.ComponentTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComponentTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTagPayload>
          }
          findMany: {
            args: Prisma.ComponentTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTagPayload>[]
          }
          create: {
            args: Prisma.ComponentTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTagPayload>
          }
          createMany: {
            args: Prisma.ComponentTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ComponentTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTagPayload>
          }
          update: {
            args: Prisma.ComponentTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTagPayload>
          }
          deleteMany: {
            args: Prisma.ComponentTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComponentTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ComponentTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTagPayload>
          }
          aggregate: {
            args: Prisma.ComponentTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComponentTag>
          }
          groupBy: {
            args: Prisma.ComponentTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComponentTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComponentTagCountArgs<ExtArgs>
            result: $Utils.Optional<ComponentTagCountAggregateOutputType> | number
          }
        }
      }
      RelationshipTag: {
        payload: Prisma.$RelationshipTagPayload<ExtArgs>
        fields: Prisma.RelationshipTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RelationshipTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RelationshipTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipTagPayload>
          }
          findFirst: {
            args: Prisma.RelationshipTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RelationshipTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipTagPayload>
          }
          findMany: {
            args: Prisma.RelationshipTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipTagPayload>[]
          }
          create: {
            args: Prisma.RelationshipTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipTagPayload>
          }
          createMany: {
            args: Prisma.RelationshipTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RelationshipTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipTagPayload>
          }
          update: {
            args: Prisma.RelationshipTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipTagPayload>
          }
          deleteMany: {
            args: Prisma.RelationshipTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RelationshipTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RelationshipTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipTagPayload>
          }
          aggregate: {
            args: Prisma.RelationshipTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRelationshipTag>
          }
          groupBy: {
            args: Prisma.RelationshipTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<RelationshipTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.RelationshipTagCountArgs<ExtArgs>
            result: $Utils.Optional<RelationshipTagCountAggregateOutputType> | number
          }
        }
      }
      ADRTag: {
        payload: Prisma.$ADRTagPayload<ExtArgs>
        fields: Prisma.ADRTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ADRTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADRTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ADRTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADRTagPayload>
          }
          findFirst: {
            args: Prisma.ADRTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADRTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ADRTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADRTagPayload>
          }
          findMany: {
            args: Prisma.ADRTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADRTagPayload>[]
          }
          create: {
            args: Prisma.ADRTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADRTagPayload>
          }
          createMany: {
            args: Prisma.ADRTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ADRTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADRTagPayload>
          }
          update: {
            args: Prisma.ADRTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADRTagPayload>
          }
          deleteMany: {
            args: Prisma.ADRTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ADRTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ADRTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ADRTagPayload>
          }
          aggregate: {
            args: Prisma.ADRTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateADRTag>
          }
          groupBy: {
            args: Prisma.ADRTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<ADRTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.ADRTagCountArgs<ExtArgs>
            result: $Utils.Optional<ADRTagCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    logs: number
    teamMembers: number
    adrParticipants: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logs?: boolean | UserCountOutputTypeCountLogsArgs
    teamMembers?: boolean | UserCountOutputTypeCountTeamMembersArgs
    adrParticipants?: boolean | UserCountOutputTypeCountAdrParticipantsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeamMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Team_MemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAdrParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ADR_ParticipantWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    components: number
    members: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    components?: boolean | TeamCountOutputTypeCountComponentsArgs
    members?: boolean | TeamCountOutputTypeCountMembersArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountComponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Team_MemberWhereInput
  }


  /**
   * Count Type EnvironmentCountOutputType
   */

  export type EnvironmentCountOutputType = {
    componentInstances: number
  }

  export type EnvironmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    componentInstances?: boolean | EnvironmentCountOutputTypeCountComponentInstancesArgs
  }

  // Custom InputTypes
  /**
   * EnvironmentCountOutputType without action
   */
  export type EnvironmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnvironmentCountOutputType
     */
    select?: EnvironmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EnvironmentCountOutputType without action
   */
  export type EnvironmentCountOutputTypeCountComponentInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentInstanceWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    components: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    components?: boolean | CategoryCountOutputTypeCountComponentsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountComponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentWhereInput
  }


  /**
   * Count Type ComponentCountOutputType
   */

  export type ComponentCountOutputType = {
    tags: number
    instances: number
    adrComponents: number
  }

  export type ComponentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | ComponentCountOutputTypeCountTagsArgs
    instances?: boolean | ComponentCountOutputTypeCountInstancesArgs
    adrComponents?: boolean | ComponentCountOutputTypeCountAdrComponentsArgs
  }

  // Custom InputTypes
  /**
   * ComponentCountOutputType without action
   */
  export type ComponentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentCountOutputType
     */
    select?: ComponentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ComponentCountOutputType without action
   */
  export type ComponentCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentTagWhereInput
  }

  /**
   * ComponentCountOutputType without action
   */
  export type ComponentCountOutputTypeCountInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentInstanceWhereInput
  }

  /**
   * ComponentCountOutputType without action
   */
  export type ComponentCountOutputTypeCountAdrComponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ADR_ComponentWhereInput
  }


  /**
   * Count Type ComponentInstanceCountOutputType
   */

  export type ComponentInstanceCountOutputType = {
    adrInstances: number
  }

  export type ComponentInstanceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adrInstances?: boolean | ComponentInstanceCountOutputTypeCountAdrInstancesArgs
  }

  // Custom InputTypes
  /**
   * ComponentInstanceCountOutputType without action
   */
  export type ComponentInstanceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentInstanceCountOutputType
     */
    select?: ComponentInstanceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ComponentInstanceCountOutputType without action
   */
  export type ComponentInstanceCountOutputTypeCountAdrInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ADR_ComponentInstanceWhereInput
  }


  /**
   * Count Type ADRCountOutputType
   */

  export type ADRCountOutputType = {
    tags: number
    participants: number
    componentInstances: number
    components: number
  }

  export type ADRCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | ADRCountOutputTypeCountTagsArgs
    participants?: boolean | ADRCountOutputTypeCountParticipantsArgs
    componentInstances?: boolean | ADRCountOutputTypeCountComponentInstancesArgs
    components?: boolean | ADRCountOutputTypeCountComponentsArgs
  }

  // Custom InputTypes
  /**
   * ADRCountOutputType without action
   */
  export type ADRCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADRCountOutputType
     */
    select?: ADRCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ADRCountOutputType without action
   */
  export type ADRCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ADRTagWhereInput
  }

  /**
   * ADRCountOutputType without action
   */
  export type ADRCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ADR_ParticipantWhereInput
  }

  /**
   * ADRCountOutputType without action
   */
  export type ADRCountOutputTypeCountComponentInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ADR_ComponentInstanceWhereInput
  }

  /**
   * ADRCountOutputType without action
   */
  export type ADRCountOutputTypeCountComponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ADR_ComponentWhereInput
  }


  /**
   * Count Type RoadmapTypeCountOutputType
   */

  export type RoadmapTypeCountOutputType = {
    items: number
  }

  export type RoadmapTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | RoadmapTypeCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * RoadmapTypeCountOutputType without action
   */
  export type RoadmapTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapTypeCountOutputType
     */
    select?: RoadmapTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoadmapTypeCountOutputType without action
   */
  export type RoadmapTypeCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoadmapItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    passwordHash: string | null
    email: string | null
    role: $Enums.User_role | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    passwordHash: string | null
    email: string | null
    role: $Enums.User_role | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    passwordHash: number
    email: number
    role: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    passwordHash?: true
    email?: true
    role?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    passwordHash?: true
    email?: true
    role?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    passwordHash?: true
    email?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    passwordHash: string
    email: string
    role: $Enums.User_role
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    passwordHash?: boolean
    email?: boolean
    role?: boolean
    createdAt?: boolean
    logs?: boolean | User$logsArgs<ExtArgs>
    teamMembers?: boolean | User$teamMembersArgs<ExtArgs>
    adrParticipants?: boolean | User$adrParticipantsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    passwordHash?: boolean
    email?: boolean
    role?: boolean
    createdAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logs?: boolean | User$logsArgs<ExtArgs>
    teamMembers?: boolean | User$teamMembersArgs<ExtArgs>
    adrParticipants?: boolean | User$adrParticipantsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      logs: Prisma.$LogPayload<ExtArgs>[]
      teamMembers: Prisma.$Team_MemberPayload<ExtArgs>[]
      adrParticipants: Prisma.$ADR_ParticipantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      passwordHash: string
      email: string
      role: $Enums.User_role
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    logs<T extends User$logsArgs<ExtArgs> = {}>(args?: Subset<T, User$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany"> | Null>
    teamMembers<T extends User$teamMembersArgs<ExtArgs> = {}>(args?: Subset<T, User$teamMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Team_MemberPayload<ExtArgs>, T, "findMany"> | Null>
    adrParticipants<T extends User$adrParticipantsArgs<ExtArgs> = {}>(args?: Subset<T, User$adrParticipantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ADR_ParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'User_role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.logs
   */
  export type User$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    where?: LogWhereInput
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    cursor?: LogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * User.teamMembers
   */
  export type User$teamMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team_Member
     */
    select?: Team_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Team_MemberInclude<ExtArgs> | null
    where?: Team_MemberWhereInput
    orderBy?: Team_MemberOrderByWithRelationInput | Team_MemberOrderByWithRelationInput[]
    cursor?: Team_MemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Team_MemberScalarFieldEnum | Team_MemberScalarFieldEnum[]
  }

  /**
   * User.adrParticipants
   */
  export type User$adrParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Participant
     */
    select?: ADR_ParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ParticipantInclude<ExtArgs> | null
    where?: ADR_ParticipantWhereInput
    orderBy?: ADR_ParticipantOrderByWithRelationInput | ADR_ParticipantOrderByWithRelationInput[]
    cursor?: ADR_ParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ADR_ParticipantScalarFieldEnum | ADR_ParticipantScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    id: number | null
  }

  export type TeamSumAggregateOutputType = {
    id: number | null
  }

  export type TeamMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
  }

  export type TeamMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    id?: true
  }

  export type TeamSumAggregateInputType = {
    id?: true
  }

  export type TeamMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: number
    name: string
    description: string | null
    createdAt: Date
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    components?: boolean | Team$componentsArgs<ExtArgs>
    members?: boolean | Team$membersArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>


  export type TeamSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
  }

  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    components?: boolean | Team$componentsArgs<ExtArgs>
    members?: boolean | Team$membersArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      components: Prisma.$ComponentPayload<ExtArgs>[]
      members: Prisma.$Team_MemberPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      createdAt: Date
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    components<T extends Team$componentsArgs<ExtArgs> = {}>(args?: Subset<T, Team$componentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentPayload<ExtArgs>, T, "findMany"> | Null>
    members<T extends Team$membersArgs<ExtArgs> = {}>(args?: Subset<T, Team$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Team_MemberPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */ 
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'Int'>
    readonly name: FieldRef<"Team", 'String'>
    readonly description: FieldRef<"Team", 'String'>
    readonly createdAt: FieldRef<"Team", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
  }

  /**
   * Team.components
   */
  export type Team$componentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Component
     */
    select?: ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInclude<ExtArgs> | null
    where?: ComponentWhereInput
    orderBy?: ComponentOrderByWithRelationInput | ComponentOrderByWithRelationInput[]
    cursor?: ComponentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComponentScalarFieldEnum | ComponentScalarFieldEnum[]
  }

  /**
   * Team.members
   */
  export type Team$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team_Member
     */
    select?: Team_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Team_MemberInclude<ExtArgs> | null
    where?: Team_MemberWhereInput
    orderBy?: Team_MemberOrderByWithRelationInput | Team_MemberOrderByWithRelationInput[]
    cursor?: Team_MemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Team_MemberScalarFieldEnum | Team_MemberScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model Team_Member
   */

  export type AggregateTeam_Member = {
    _count: Team_MemberCountAggregateOutputType | null
    _avg: Team_MemberAvgAggregateOutputType | null
    _sum: Team_MemberSumAggregateOutputType | null
    _min: Team_MemberMinAggregateOutputType | null
    _max: Team_MemberMaxAggregateOutputType | null
  }

  export type Team_MemberAvgAggregateOutputType = {
    teamId: number | null
    userId: number | null
  }

  export type Team_MemberSumAggregateOutputType = {
    teamId: number | null
    userId: number | null
  }

  export type Team_MemberMinAggregateOutputType = {
    teamId: number | null
    userId: number | null
    joinedAt: Date | null
  }

  export type Team_MemberMaxAggregateOutputType = {
    teamId: number | null
    userId: number | null
    joinedAt: Date | null
  }

  export type Team_MemberCountAggregateOutputType = {
    teamId: number
    userId: number
    joinedAt: number
    _all: number
  }


  export type Team_MemberAvgAggregateInputType = {
    teamId?: true
    userId?: true
  }

  export type Team_MemberSumAggregateInputType = {
    teamId?: true
    userId?: true
  }

  export type Team_MemberMinAggregateInputType = {
    teamId?: true
    userId?: true
    joinedAt?: true
  }

  export type Team_MemberMaxAggregateInputType = {
    teamId?: true
    userId?: true
    joinedAt?: true
  }

  export type Team_MemberCountAggregateInputType = {
    teamId?: true
    userId?: true
    joinedAt?: true
    _all?: true
  }

  export type Team_MemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team_Member to aggregate.
     */
    where?: Team_MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Team_Members to fetch.
     */
    orderBy?: Team_MemberOrderByWithRelationInput | Team_MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Team_MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Team_Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Team_Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Team_Members
    **/
    _count?: true | Team_MemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Team_MemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Team_MemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Team_MemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Team_MemberMaxAggregateInputType
  }

  export type GetTeam_MemberAggregateType<T extends Team_MemberAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam_Member]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam_Member[P]>
      : GetScalarType<T[P], AggregateTeam_Member[P]>
  }




  export type Team_MemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Team_MemberWhereInput
    orderBy?: Team_MemberOrderByWithAggregationInput | Team_MemberOrderByWithAggregationInput[]
    by: Team_MemberScalarFieldEnum[] | Team_MemberScalarFieldEnum
    having?: Team_MemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Team_MemberCountAggregateInputType | true
    _avg?: Team_MemberAvgAggregateInputType
    _sum?: Team_MemberSumAggregateInputType
    _min?: Team_MemberMinAggregateInputType
    _max?: Team_MemberMaxAggregateInputType
  }

  export type Team_MemberGroupByOutputType = {
    teamId: number
    userId: number
    joinedAt: Date
    _count: Team_MemberCountAggregateOutputType | null
    _avg: Team_MemberAvgAggregateOutputType | null
    _sum: Team_MemberSumAggregateOutputType | null
    _min: Team_MemberMinAggregateOutputType | null
    _max: Team_MemberMaxAggregateOutputType | null
  }

  type GetTeam_MemberGroupByPayload<T extends Team_MemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Team_MemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Team_MemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Team_MemberGroupByOutputType[P]>
            : GetScalarType<T[P], Team_MemberGroupByOutputType[P]>
        }
      >
    >


  export type Team_MemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teamId?: boolean
    userId?: boolean
    joinedAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team_Member"]>


  export type Team_MemberSelectScalar = {
    teamId?: boolean
    userId?: boolean
    joinedAt?: boolean
  }

  export type Team_MemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $Team_MemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team_Member"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      teamId: number
      userId: number
      joinedAt: Date
    }, ExtArgs["result"]["team_Member"]>
    composites: {}
  }

  type Team_MemberGetPayload<S extends boolean | null | undefined | Team_MemberDefaultArgs> = $Result.GetResult<Prisma.$Team_MemberPayload, S>

  type Team_MemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Team_MemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Team_MemberCountAggregateInputType | true
    }

  export interface Team_MemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team_Member'], meta: { name: 'Team_Member' } }
    /**
     * Find zero or one Team_Member that matches the filter.
     * @param {Team_MemberFindUniqueArgs} args - Arguments to find a Team_Member
     * @example
     * // Get one Team_Member
     * const team_Member = await prisma.team_Member.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Team_MemberFindUniqueArgs>(args: SelectSubset<T, Team_MemberFindUniqueArgs<ExtArgs>>): Prisma__Team_MemberClient<$Result.GetResult<Prisma.$Team_MemberPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Team_Member that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {Team_MemberFindUniqueOrThrowArgs} args - Arguments to find a Team_Member
     * @example
     * // Get one Team_Member
     * const team_Member = await prisma.team_Member.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Team_MemberFindUniqueOrThrowArgs>(args: SelectSubset<T, Team_MemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Team_MemberClient<$Result.GetResult<Prisma.$Team_MemberPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Team_Member that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Team_MemberFindFirstArgs} args - Arguments to find a Team_Member
     * @example
     * // Get one Team_Member
     * const team_Member = await prisma.team_Member.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Team_MemberFindFirstArgs>(args?: SelectSubset<T, Team_MemberFindFirstArgs<ExtArgs>>): Prisma__Team_MemberClient<$Result.GetResult<Prisma.$Team_MemberPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Team_Member that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Team_MemberFindFirstOrThrowArgs} args - Arguments to find a Team_Member
     * @example
     * // Get one Team_Member
     * const team_Member = await prisma.team_Member.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Team_MemberFindFirstOrThrowArgs>(args?: SelectSubset<T, Team_MemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__Team_MemberClient<$Result.GetResult<Prisma.$Team_MemberPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Team_Members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Team_MemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Team_Members
     * const team_Members = await prisma.team_Member.findMany()
     * 
     * // Get first 10 Team_Members
     * const team_Members = await prisma.team_Member.findMany({ take: 10 })
     * 
     * // Only select the `teamId`
     * const team_MemberWithTeamIdOnly = await prisma.team_Member.findMany({ select: { teamId: true } })
     * 
     */
    findMany<T extends Team_MemberFindManyArgs>(args?: SelectSubset<T, Team_MemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Team_MemberPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Team_Member.
     * @param {Team_MemberCreateArgs} args - Arguments to create a Team_Member.
     * @example
     * // Create one Team_Member
     * const Team_Member = await prisma.team_Member.create({
     *   data: {
     *     // ... data to create a Team_Member
     *   }
     * })
     * 
     */
    create<T extends Team_MemberCreateArgs>(args: SelectSubset<T, Team_MemberCreateArgs<ExtArgs>>): Prisma__Team_MemberClient<$Result.GetResult<Prisma.$Team_MemberPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Team_Members.
     * @param {Team_MemberCreateManyArgs} args - Arguments to create many Team_Members.
     * @example
     * // Create many Team_Members
     * const team_Member = await prisma.team_Member.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Team_MemberCreateManyArgs>(args?: SelectSubset<T, Team_MemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Team_Member.
     * @param {Team_MemberDeleteArgs} args - Arguments to delete one Team_Member.
     * @example
     * // Delete one Team_Member
     * const Team_Member = await prisma.team_Member.delete({
     *   where: {
     *     // ... filter to delete one Team_Member
     *   }
     * })
     * 
     */
    delete<T extends Team_MemberDeleteArgs>(args: SelectSubset<T, Team_MemberDeleteArgs<ExtArgs>>): Prisma__Team_MemberClient<$Result.GetResult<Prisma.$Team_MemberPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Team_Member.
     * @param {Team_MemberUpdateArgs} args - Arguments to update one Team_Member.
     * @example
     * // Update one Team_Member
     * const team_Member = await prisma.team_Member.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Team_MemberUpdateArgs>(args: SelectSubset<T, Team_MemberUpdateArgs<ExtArgs>>): Prisma__Team_MemberClient<$Result.GetResult<Prisma.$Team_MemberPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Team_Members.
     * @param {Team_MemberDeleteManyArgs} args - Arguments to filter Team_Members to delete.
     * @example
     * // Delete a few Team_Members
     * const { count } = await prisma.team_Member.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Team_MemberDeleteManyArgs>(args?: SelectSubset<T, Team_MemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Team_Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Team_MemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Team_Members
     * const team_Member = await prisma.team_Member.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Team_MemberUpdateManyArgs>(args: SelectSubset<T, Team_MemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team_Member.
     * @param {Team_MemberUpsertArgs} args - Arguments to update or create a Team_Member.
     * @example
     * // Update or create a Team_Member
     * const team_Member = await prisma.team_Member.upsert({
     *   create: {
     *     // ... data to create a Team_Member
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team_Member we want to update
     *   }
     * })
     */
    upsert<T extends Team_MemberUpsertArgs>(args: SelectSubset<T, Team_MemberUpsertArgs<ExtArgs>>): Prisma__Team_MemberClient<$Result.GetResult<Prisma.$Team_MemberPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Team_Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Team_MemberCountArgs} args - Arguments to filter Team_Members to count.
     * @example
     * // Count the number of Team_Members
     * const count = await prisma.team_Member.count({
     *   where: {
     *     // ... the filter for the Team_Members we want to count
     *   }
     * })
    **/
    count<T extends Team_MemberCountArgs>(
      args?: Subset<T, Team_MemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Team_MemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team_Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Team_MemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Team_MemberAggregateArgs>(args: Subset<T, Team_MemberAggregateArgs>): Prisma.PrismaPromise<GetTeam_MemberAggregateType<T>>

    /**
     * Group by Team_Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Team_MemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Team_MemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Team_MemberGroupByArgs['orderBy'] }
        : { orderBy?: Team_MemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Team_MemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeam_MemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team_Member model
   */
  readonly fields: Team_MemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team_Member.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Team_MemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team_Member model
   */ 
  interface Team_MemberFieldRefs {
    readonly teamId: FieldRef<"Team_Member", 'Int'>
    readonly userId: FieldRef<"Team_Member", 'Int'>
    readonly joinedAt: FieldRef<"Team_Member", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Team_Member findUnique
   */
  export type Team_MemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team_Member
     */
    select?: Team_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Team_MemberInclude<ExtArgs> | null
    /**
     * Filter, which Team_Member to fetch.
     */
    where: Team_MemberWhereUniqueInput
  }

  /**
   * Team_Member findUniqueOrThrow
   */
  export type Team_MemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team_Member
     */
    select?: Team_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Team_MemberInclude<ExtArgs> | null
    /**
     * Filter, which Team_Member to fetch.
     */
    where: Team_MemberWhereUniqueInput
  }

  /**
   * Team_Member findFirst
   */
  export type Team_MemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team_Member
     */
    select?: Team_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Team_MemberInclude<ExtArgs> | null
    /**
     * Filter, which Team_Member to fetch.
     */
    where?: Team_MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Team_Members to fetch.
     */
    orderBy?: Team_MemberOrderByWithRelationInput | Team_MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Team_Members.
     */
    cursor?: Team_MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Team_Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Team_Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Team_Members.
     */
    distinct?: Team_MemberScalarFieldEnum | Team_MemberScalarFieldEnum[]
  }

  /**
   * Team_Member findFirstOrThrow
   */
  export type Team_MemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team_Member
     */
    select?: Team_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Team_MemberInclude<ExtArgs> | null
    /**
     * Filter, which Team_Member to fetch.
     */
    where?: Team_MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Team_Members to fetch.
     */
    orderBy?: Team_MemberOrderByWithRelationInput | Team_MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Team_Members.
     */
    cursor?: Team_MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Team_Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Team_Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Team_Members.
     */
    distinct?: Team_MemberScalarFieldEnum | Team_MemberScalarFieldEnum[]
  }

  /**
   * Team_Member findMany
   */
  export type Team_MemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team_Member
     */
    select?: Team_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Team_MemberInclude<ExtArgs> | null
    /**
     * Filter, which Team_Members to fetch.
     */
    where?: Team_MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Team_Members to fetch.
     */
    orderBy?: Team_MemberOrderByWithRelationInput | Team_MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Team_Members.
     */
    cursor?: Team_MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Team_Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Team_Members.
     */
    skip?: number
    distinct?: Team_MemberScalarFieldEnum | Team_MemberScalarFieldEnum[]
  }

  /**
   * Team_Member create
   */
  export type Team_MemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team_Member
     */
    select?: Team_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Team_MemberInclude<ExtArgs> | null
    /**
     * The data needed to create a Team_Member.
     */
    data: XOR<Team_MemberCreateInput, Team_MemberUncheckedCreateInput>
  }

  /**
   * Team_Member createMany
   */
  export type Team_MemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Team_Members.
     */
    data: Team_MemberCreateManyInput | Team_MemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team_Member update
   */
  export type Team_MemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team_Member
     */
    select?: Team_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Team_MemberInclude<ExtArgs> | null
    /**
     * The data needed to update a Team_Member.
     */
    data: XOR<Team_MemberUpdateInput, Team_MemberUncheckedUpdateInput>
    /**
     * Choose, which Team_Member to update.
     */
    where: Team_MemberWhereUniqueInput
  }

  /**
   * Team_Member updateMany
   */
  export type Team_MemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Team_Members.
     */
    data: XOR<Team_MemberUpdateManyMutationInput, Team_MemberUncheckedUpdateManyInput>
    /**
     * Filter which Team_Members to update
     */
    where?: Team_MemberWhereInput
  }

  /**
   * Team_Member upsert
   */
  export type Team_MemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team_Member
     */
    select?: Team_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Team_MemberInclude<ExtArgs> | null
    /**
     * The filter to search for the Team_Member to update in case it exists.
     */
    where: Team_MemberWhereUniqueInput
    /**
     * In case the Team_Member found by the `where` argument doesn't exist, create a new Team_Member with this data.
     */
    create: XOR<Team_MemberCreateInput, Team_MemberUncheckedCreateInput>
    /**
     * In case the Team_Member was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Team_MemberUpdateInput, Team_MemberUncheckedUpdateInput>
  }

  /**
   * Team_Member delete
   */
  export type Team_MemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team_Member
     */
    select?: Team_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Team_MemberInclude<ExtArgs> | null
    /**
     * Filter which Team_Member to delete.
     */
    where: Team_MemberWhereUniqueInput
  }

  /**
   * Team_Member deleteMany
   */
  export type Team_MemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team_Members to delete
     */
    where?: Team_MemberWhereInput
  }

  /**
   * Team_Member without action
   */
  export type Team_MemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team_Member
     */
    select?: Team_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Team_MemberInclude<ExtArgs> | null
  }


  /**
   * Model Environment
   */

  export type AggregateEnvironment = {
    _count: EnvironmentCountAggregateOutputType | null
    _avg: EnvironmentAvgAggregateOutputType | null
    _sum: EnvironmentSumAggregateOutputType | null
    _min: EnvironmentMinAggregateOutputType | null
    _max: EnvironmentMaxAggregateOutputType | null
  }

  export type EnvironmentAvgAggregateOutputType = {
    id: number | null
  }

  export type EnvironmentSumAggregateOutputType = {
    id: number | null
  }

  export type EnvironmentMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
  }

  export type EnvironmentMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
  }

  export type EnvironmentCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    _all: number
  }


  export type EnvironmentAvgAggregateInputType = {
    id?: true
  }

  export type EnvironmentSumAggregateInputType = {
    id?: true
  }

  export type EnvironmentMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
  }

  export type EnvironmentMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
  }

  export type EnvironmentCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    _all?: true
  }

  export type EnvironmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Environment to aggregate.
     */
    where?: EnvironmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Environments to fetch.
     */
    orderBy?: EnvironmentOrderByWithRelationInput | EnvironmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnvironmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Environments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Environments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Environments
    **/
    _count?: true | EnvironmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnvironmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnvironmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnvironmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnvironmentMaxAggregateInputType
  }

  export type GetEnvironmentAggregateType<T extends EnvironmentAggregateArgs> = {
        [P in keyof T & keyof AggregateEnvironment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnvironment[P]>
      : GetScalarType<T[P], AggregateEnvironment[P]>
  }




  export type EnvironmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnvironmentWhereInput
    orderBy?: EnvironmentOrderByWithAggregationInput | EnvironmentOrderByWithAggregationInput[]
    by: EnvironmentScalarFieldEnum[] | EnvironmentScalarFieldEnum
    having?: EnvironmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnvironmentCountAggregateInputType | true
    _avg?: EnvironmentAvgAggregateInputType
    _sum?: EnvironmentSumAggregateInputType
    _min?: EnvironmentMinAggregateInputType
    _max?: EnvironmentMaxAggregateInputType
  }

  export type EnvironmentGroupByOutputType = {
    id: number
    name: string
    description: string | null
    createdAt: Date
    _count: EnvironmentCountAggregateOutputType | null
    _avg: EnvironmentAvgAggregateOutputType | null
    _sum: EnvironmentSumAggregateOutputType | null
    _min: EnvironmentMinAggregateOutputType | null
    _max: EnvironmentMaxAggregateOutputType | null
  }

  type GetEnvironmentGroupByPayload<T extends EnvironmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnvironmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnvironmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnvironmentGroupByOutputType[P]>
            : GetScalarType<T[P], EnvironmentGroupByOutputType[P]>
        }
      >
    >


  export type EnvironmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    componentInstances?: boolean | Environment$componentInstancesArgs<ExtArgs>
    _count?: boolean | EnvironmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["environment"]>


  export type EnvironmentSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
  }

  export type EnvironmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    componentInstances?: boolean | Environment$componentInstancesArgs<ExtArgs>
    _count?: boolean | EnvironmentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EnvironmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Environment"
    objects: {
      componentInstances: Prisma.$ComponentInstancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      createdAt: Date
    }, ExtArgs["result"]["environment"]>
    composites: {}
  }

  type EnvironmentGetPayload<S extends boolean | null | undefined | EnvironmentDefaultArgs> = $Result.GetResult<Prisma.$EnvironmentPayload, S>

  type EnvironmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EnvironmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EnvironmentCountAggregateInputType | true
    }

  export interface EnvironmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Environment'], meta: { name: 'Environment' } }
    /**
     * Find zero or one Environment that matches the filter.
     * @param {EnvironmentFindUniqueArgs} args - Arguments to find a Environment
     * @example
     * // Get one Environment
     * const environment = await prisma.environment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EnvironmentFindUniqueArgs>(args: SelectSubset<T, EnvironmentFindUniqueArgs<ExtArgs>>): Prisma__EnvironmentClient<$Result.GetResult<Prisma.$EnvironmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Environment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EnvironmentFindUniqueOrThrowArgs} args - Arguments to find a Environment
     * @example
     * // Get one Environment
     * const environment = await prisma.environment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EnvironmentFindUniqueOrThrowArgs>(args: SelectSubset<T, EnvironmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EnvironmentClient<$Result.GetResult<Prisma.$EnvironmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Environment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnvironmentFindFirstArgs} args - Arguments to find a Environment
     * @example
     * // Get one Environment
     * const environment = await prisma.environment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EnvironmentFindFirstArgs>(args?: SelectSubset<T, EnvironmentFindFirstArgs<ExtArgs>>): Prisma__EnvironmentClient<$Result.GetResult<Prisma.$EnvironmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Environment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnvironmentFindFirstOrThrowArgs} args - Arguments to find a Environment
     * @example
     * // Get one Environment
     * const environment = await prisma.environment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EnvironmentFindFirstOrThrowArgs>(args?: SelectSubset<T, EnvironmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__EnvironmentClient<$Result.GetResult<Prisma.$EnvironmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Environments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnvironmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Environments
     * const environments = await prisma.environment.findMany()
     * 
     * // Get first 10 Environments
     * const environments = await prisma.environment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const environmentWithIdOnly = await prisma.environment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EnvironmentFindManyArgs>(args?: SelectSubset<T, EnvironmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnvironmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Environment.
     * @param {EnvironmentCreateArgs} args - Arguments to create a Environment.
     * @example
     * // Create one Environment
     * const Environment = await prisma.environment.create({
     *   data: {
     *     // ... data to create a Environment
     *   }
     * })
     * 
     */
    create<T extends EnvironmentCreateArgs>(args: SelectSubset<T, EnvironmentCreateArgs<ExtArgs>>): Prisma__EnvironmentClient<$Result.GetResult<Prisma.$EnvironmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Environments.
     * @param {EnvironmentCreateManyArgs} args - Arguments to create many Environments.
     * @example
     * // Create many Environments
     * const environment = await prisma.environment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EnvironmentCreateManyArgs>(args?: SelectSubset<T, EnvironmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Environment.
     * @param {EnvironmentDeleteArgs} args - Arguments to delete one Environment.
     * @example
     * // Delete one Environment
     * const Environment = await prisma.environment.delete({
     *   where: {
     *     // ... filter to delete one Environment
     *   }
     * })
     * 
     */
    delete<T extends EnvironmentDeleteArgs>(args: SelectSubset<T, EnvironmentDeleteArgs<ExtArgs>>): Prisma__EnvironmentClient<$Result.GetResult<Prisma.$EnvironmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Environment.
     * @param {EnvironmentUpdateArgs} args - Arguments to update one Environment.
     * @example
     * // Update one Environment
     * const environment = await prisma.environment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EnvironmentUpdateArgs>(args: SelectSubset<T, EnvironmentUpdateArgs<ExtArgs>>): Prisma__EnvironmentClient<$Result.GetResult<Prisma.$EnvironmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Environments.
     * @param {EnvironmentDeleteManyArgs} args - Arguments to filter Environments to delete.
     * @example
     * // Delete a few Environments
     * const { count } = await prisma.environment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EnvironmentDeleteManyArgs>(args?: SelectSubset<T, EnvironmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Environments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnvironmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Environments
     * const environment = await prisma.environment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EnvironmentUpdateManyArgs>(args: SelectSubset<T, EnvironmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Environment.
     * @param {EnvironmentUpsertArgs} args - Arguments to update or create a Environment.
     * @example
     * // Update or create a Environment
     * const environment = await prisma.environment.upsert({
     *   create: {
     *     // ... data to create a Environment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Environment we want to update
     *   }
     * })
     */
    upsert<T extends EnvironmentUpsertArgs>(args: SelectSubset<T, EnvironmentUpsertArgs<ExtArgs>>): Prisma__EnvironmentClient<$Result.GetResult<Prisma.$EnvironmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Environments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnvironmentCountArgs} args - Arguments to filter Environments to count.
     * @example
     * // Count the number of Environments
     * const count = await prisma.environment.count({
     *   where: {
     *     // ... the filter for the Environments we want to count
     *   }
     * })
    **/
    count<T extends EnvironmentCountArgs>(
      args?: Subset<T, EnvironmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnvironmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Environment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnvironmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnvironmentAggregateArgs>(args: Subset<T, EnvironmentAggregateArgs>): Prisma.PrismaPromise<GetEnvironmentAggregateType<T>>

    /**
     * Group by Environment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnvironmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnvironmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnvironmentGroupByArgs['orderBy'] }
        : { orderBy?: EnvironmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnvironmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnvironmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Environment model
   */
  readonly fields: EnvironmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Environment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EnvironmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    componentInstances<T extends Environment$componentInstancesArgs<ExtArgs> = {}>(args?: Subset<T, Environment$componentInstancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentInstancePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Environment model
   */ 
  interface EnvironmentFieldRefs {
    readonly id: FieldRef<"Environment", 'Int'>
    readonly name: FieldRef<"Environment", 'String'>
    readonly description: FieldRef<"Environment", 'String'>
    readonly createdAt: FieldRef<"Environment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Environment findUnique
   */
  export type EnvironmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Environment
     */
    select?: EnvironmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnvironmentInclude<ExtArgs> | null
    /**
     * Filter, which Environment to fetch.
     */
    where: EnvironmentWhereUniqueInput
  }

  /**
   * Environment findUniqueOrThrow
   */
  export type EnvironmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Environment
     */
    select?: EnvironmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnvironmentInclude<ExtArgs> | null
    /**
     * Filter, which Environment to fetch.
     */
    where: EnvironmentWhereUniqueInput
  }

  /**
   * Environment findFirst
   */
  export type EnvironmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Environment
     */
    select?: EnvironmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnvironmentInclude<ExtArgs> | null
    /**
     * Filter, which Environment to fetch.
     */
    where?: EnvironmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Environments to fetch.
     */
    orderBy?: EnvironmentOrderByWithRelationInput | EnvironmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Environments.
     */
    cursor?: EnvironmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Environments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Environments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Environments.
     */
    distinct?: EnvironmentScalarFieldEnum | EnvironmentScalarFieldEnum[]
  }

  /**
   * Environment findFirstOrThrow
   */
  export type EnvironmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Environment
     */
    select?: EnvironmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnvironmentInclude<ExtArgs> | null
    /**
     * Filter, which Environment to fetch.
     */
    where?: EnvironmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Environments to fetch.
     */
    orderBy?: EnvironmentOrderByWithRelationInput | EnvironmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Environments.
     */
    cursor?: EnvironmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Environments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Environments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Environments.
     */
    distinct?: EnvironmentScalarFieldEnum | EnvironmentScalarFieldEnum[]
  }

  /**
   * Environment findMany
   */
  export type EnvironmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Environment
     */
    select?: EnvironmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnvironmentInclude<ExtArgs> | null
    /**
     * Filter, which Environments to fetch.
     */
    where?: EnvironmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Environments to fetch.
     */
    orderBy?: EnvironmentOrderByWithRelationInput | EnvironmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Environments.
     */
    cursor?: EnvironmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Environments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Environments.
     */
    skip?: number
    distinct?: EnvironmentScalarFieldEnum | EnvironmentScalarFieldEnum[]
  }

  /**
   * Environment create
   */
  export type EnvironmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Environment
     */
    select?: EnvironmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnvironmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Environment.
     */
    data: XOR<EnvironmentCreateInput, EnvironmentUncheckedCreateInput>
  }

  /**
   * Environment createMany
   */
  export type EnvironmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Environments.
     */
    data: EnvironmentCreateManyInput | EnvironmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Environment update
   */
  export type EnvironmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Environment
     */
    select?: EnvironmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnvironmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Environment.
     */
    data: XOR<EnvironmentUpdateInput, EnvironmentUncheckedUpdateInput>
    /**
     * Choose, which Environment to update.
     */
    where: EnvironmentWhereUniqueInput
  }

  /**
   * Environment updateMany
   */
  export type EnvironmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Environments.
     */
    data: XOR<EnvironmentUpdateManyMutationInput, EnvironmentUncheckedUpdateManyInput>
    /**
     * Filter which Environments to update
     */
    where?: EnvironmentWhereInput
  }

  /**
   * Environment upsert
   */
  export type EnvironmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Environment
     */
    select?: EnvironmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnvironmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Environment to update in case it exists.
     */
    where: EnvironmentWhereUniqueInput
    /**
     * In case the Environment found by the `where` argument doesn't exist, create a new Environment with this data.
     */
    create: XOR<EnvironmentCreateInput, EnvironmentUncheckedCreateInput>
    /**
     * In case the Environment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnvironmentUpdateInput, EnvironmentUncheckedUpdateInput>
  }

  /**
   * Environment delete
   */
  export type EnvironmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Environment
     */
    select?: EnvironmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnvironmentInclude<ExtArgs> | null
    /**
     * Filter which Environment to delete.
     */
    where: EnvironmentWhereUniqueInput
  }

  /**
   * Environment deleteMany
   */
  export type EnvironmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Environments to delete
     */
    where?: EnvironmentWhereInput
  }

  /**
   * Environment.componentInstances
   */
  export type Environment$componentInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentInstance
     */
    select?: ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInstanceInclude<ExtArgs> | null
    where?: ComponentInstanceWhereInput
    orderBy?: ComponentInstanceOrderByWithRelationInput | ComponentInstanceOrderByWithRelationInput[]
    cursor?: ComponentInstanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComponentInstanceScalarFieldEnum | ComponentInstanceScalarFieldEnum[]
  }

  /**
   * Environment without action
   */
  export type EnvironmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Environment
     */
    select?: EnvironmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnvironmentInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    image: string | null
    createdAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    image: string | null
    createdAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    image: number
    createdAt: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image?: true
    createdAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image?: true
    createdAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image?: true
    createdAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    description: string | null
    image: string | null
    createdAt: Date
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    createdAt?: boolean
    components?: boolean | Category$componentsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>


  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    createdAt?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    components?: boolean | Category$componentsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      components: Prisma.$ComponentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      image: string | null
      createdAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    components<T extends Category$componentsArgs<ExtArgs> = {}>(args?: Subset<T, Category$componentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
    readonly image: FieldRef<"Category", 'String'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.components
   */
  export type Category$componentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Component
     */
    select?: ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInclude<ExtArgs> | null
    where?: ComponentWhereInput
    orderBy?: ComponentOrderByWithRelationInput | ComponentOrderByWithRelationInput[]
    cursor?: ComponentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComponentScalarFieldEnum | ComponentScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Component
   */

  export type AggregateComponent = {
    _count: ComponentCountAggregateOutputType | null
    _avg: ComponentAvgAggregateOutputType | null
    _sum: ComponentSumAggregateOutputType | null
    _min: ComponentMinAggregateOutputType | null
    _max: ComponentMaxAggregateOutputType | null
  }

  export type ComponentAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
    teamId: number | null
  }

  export type ComponentSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
    teamId: number | null
  }

  export type ComponentMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    status: $Enums.Component_status | null
    categoryId: number | null
    teamId: number | null
    createdAt: Date | null
  }

  export type ComponentMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    status: $Enums.Component_status | null
    categoryId: number | null
    teamId: number | null
    createdAt: Date | null
  }

  export type ComponentCountAggregateOutputType = {
    id: number
    name: number
    description: number
    status: number
    categoryId: number
    teamId: number
    createdAt: number
    _all: number
  }


  export type ComponentAvgAggregateInputType = {
    id?: true
    categoryId?: true
    teamId?: true
  }

  export type ComponentSumAggregateInputType = {
    id?: true
    categoryId?: true
    teamId?: true
  }

  export type ComponentMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    categoryId?: true
    teamId?: true
    createdAt?: true
  }

  export type ComponentMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    categoryId?: true
    teamId?: true
    createdAt?: true
  }

  export type ComponentCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    categoryId?: true
    teamId?: true
    createdAt?: true
    _all?: true
  }

  export type ComponentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Component to aggregate.
     */
    where?: ComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Components to fetch.
     */
    orderBy?: ComponentOrderByWithRelationInput | ComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Components from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Components.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Components
    **/
    _count?: true | ComponentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComponentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComponentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComponentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComponentMaxAggregateInputType
  }

  export type GetComponentAggregateType<T extends ComponentAggregateArgs> = {
        [P in keyof T & keyof AggregateComponent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComponent[P]>
      : GetScalarType<T[P], AggregateComponent[P]>
  }




  export type ComponentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentWhereInput
    orderBy?: ComponentOrderByWithAggregationInput | ComponentOrderByWithAggregationInput[]
    by: ComponentScalarFieldEnum[] | ComponentScalarFieldEnum
    having?: ComponentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComponentCountAggregateInputType | true
    _avg?: ComponentAvgAggregateInputType
    _sum?: ComponentSumAggregateInputType
    _min?: ComponentMinAggregateInputType
    _max?: ComponentMaxAggregateInputType
  }

  export type ComponentGroupByOutputType = {
    id: number
    name: string
    description: string | null
    status: $Enums.Component_status
    categoryId: number | null
    teamId: number | null
    createdAt: Date
    _count: ComponentCountAggregateOutputType | null
    _avg: ComponentAvgAggregateOutputType | null
    _sum: ComponentSumAggregateOutputType | null
    _min: ComponentMinAggregateOutputType | null
    _max: ComponentMaxAggregateOutputType | null
  }

  type GetComponentGroupByPayload<T extends ComponentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComponentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComponentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComponentGroupByOutputType[P]>
            : GetScalarType<T[P], ComponentGroupByOutputType[P]>
        }
      >
    >


  export type ComponentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    categoryId?: boolean
    teamId?: boolean
    createdAt?: boolean
    category?: boolean | Component$categoryArgs<ExtArgs>
    team?: boolean | Component$teamArgs<ExtArgs>
    tags?: boolean | Component$tagsArgs<ExtArgs>
    instances?: boolean | Component$instancesArgs<ExtArgs>
    adrComponents?: boolean | Component$adrComponentsArgs<ExtArgs>
    _count?: boolean | ComponentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["component"]>


  export type ComponentSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    categoryId?: boolean
    teamId?: boolean
    createdAt?: boolean
  }

  export type ComponentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | Component$categoryArgs<ExtArgs>
    team?: boolean | Component$teamArgs<ExtArgs>
    tags?: boolean | Component$tagsArgs<ExtArgs>
    instances?: boolean | Component$instancesArgs<ExtArgs>
    adrComponents?: boolean | Component$adrComponentsArgs<ExtArgs>
    _count?: boolean | ComponentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ComponentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Component"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs> | null
      team: Prisma.$TeamPayload<ExtArgs> | null
      tags: Prisma.$ComponentTagPayload<ExtArgs>[]
      instances: Prisma.$ComponentInstancePayload<ExtArgs>[]
      adrComponents: Prisma.$ADR_ComponentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      status: $Enums.Component_status
      categoryId: number | null
      teamId: number | null
      createdAt: Date
    }, ExtArgs["result"]["component"]>
    composites: {}
  }

  type ComponentGetPayload<S extends boolean | null | undefined | ComponentDefaultArgs> = $Result.GetResult<Prisma.$ComponentPayload, S>

  type ComponentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ComponentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ComponentCountAggregateInputType | true
    }

  export interface ComponentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Component'], meta: { name: 'Component' } }
    /**
     * Find zero or one Component that matches the filter.
     * @param {ComponentFindUniqueArgs} args - Arguments to find a Component
     * @example
     * // Get one Component
     * const component = await prisma.component.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComponentFindUniqueArgs>(args: SelectSubset<T, ComponentFindUniqueArgs<ExtArgs>>): Prisma__ComponentClient<$Result.GetResult<Prisma.$ComponentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Component that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ComponentFindUniqueOrThrowArgs} args - Arguments to find a Component
     * @example
     * // Get one Component
     * const component = await prisma.component.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComponentFindUniqueOrThrowArgs>(args: SelectSubset<T, ComponentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComponentClient<$Result.GetResult<Prisma.$ComponentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Component that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentFindFirstArgs} args - Arguments to find a Component
     * @example
     * // Get one Component
     * const component = await prisma.component.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComponentFindFirstArgs>(args?: SelectSubset<T, ComponentFindFirstArgs<ExtArgs>>): Prisma__ComponentClient<$Result.GetResult<Prisma.$ComponentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Component that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentFindFirstOrThrowArgs} args - Arguments to find a Component
     * @example
     * // Get one Component
     * const component = await prisma.component.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComponentFindFirstOrThrowArgs>(args?: SelectSubset<T, ComponentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComponentClient<$Result.GetResult<Prisma.$ComponentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Components that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Components
     * const components = await prisma.component.findMany()
     * 
     * // Get first 10 Components
     * const components = await prisma.component.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const componentWithIdOnly = await prisma.component.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComponentFindManyArgs>(args?: SelectSubset<T, ComponentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Component.
     * @param {ComponentCreateArgs} args - Arguments to create a Component.
     * @example
     * // Create one Component
     * const Component = await prisma.component.create({
     *   data: {
     *     // ... data to create a Component
     *   }
     * })
     * 
     */
    create<T extends ComponentCreateArgs>(args: SelectSubset<T, ComponentCreateArgs<ExtArgs>>): Prisma__ComponentClient<$Result.GetResult<Prisma.$ComponentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Components.
     * @param {ComponentCreateManyArgs} args - Arguments to create many Components.
     * @example
     * // Create many Components
     * const component = await prisma.component.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComponentCreateManyArgs>(args?: SelectSubset<T, ComponentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Component.
     * @param {ComponentDeleteArgs} args - Arguments to delete one Component.
     * @example
     * // Delete one Component
     * const Component = await prisma.component.delete({
     *   where: {
     *     // ... filter to delete one Component
     *   }
     * })
     * 
     */
    delete<T extends ComponentDeleteArgs>(args: SelectSubset<T, ComponentDeleteArgs<ExtArgs>>): Prisma__ComponentClient<$Result.GetResult<Prisma.$ComponentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Component.
     * @param {ComponentUpdateArgs} args - Arguments to update one Component.
     * @example
     * // Update one Component
     * const component = await prisma.component.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComponentUpdateArgs>(args: SelectSubset<T, ComponentUpdateArgs<ExtArgs>>): Prisma__ComponentClient<$Result.GetResult<Prisma.$ComponentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Components.
     * @param {ComponentDeleteManyArgs} args - Arguments to filter Components to delete.
     * @example
     * // Delete a few Components
     * const { count } = await prisma.component.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComponentDeleteManyArgs>(args?: SelectSubset<T, ComponentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Components.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Components
     * const component = await prisma.component.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComponentUpdateManyArgs>(args: SelectSubset<T, ComponentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Component.
     * @param {ComponentUpsertArgs} args - Arguments to update or create a Component.
     * @example
     * // Update or create a Component
     * const component = await prisma.component.upsert({
     *   create: {
     *     // ... data to create a Component
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Component we want to update
     *   }
     * })
     */
    upsert<T extends ComponentUpsertArgs>(args: SelectSubset<T, ComponentUpsertArgs<ExtArgs>>): Prisma__ComponentClient<$Result.GetResult<Prisma.$ComponentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Components.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentCountArgs} args - Arguments to filter Components to count.
     * @example
     * // Count the number of Components
     * const count = await prisma.component.count({
     *   where: {
     *     // ... the filter for the Components we want to count
     *   }
     * })
    **/
    count<T extends ComponentCountArgs>(
      args?: Subset<T, ComponentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComponentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Component.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComponentAggregateArgs>(args: Subset<T, ComponentAggregateArgs>): Prisma.PrismaPromise<GetComponentAggregateType<T>>

    /**
     * Group by Component.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComponentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComponentGroupByArgs['orderBy'] }
        : { orderBy?: ComponentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComponentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComponentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Component model
   */
  readonly fields: ComponentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Component.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComponentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends Component$categoryArgs<ExtArgs> = {}>(args?: Subset<T, Component$categoryArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    team<T extends Component$teamArgs<ExtArgs> = {}>(args?: Subset<T, Component$teamArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    tags<T extends Component$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Component$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentTagPayload<ExtArgs>, T, "findMany"> | Null>
    instances<T extends Component$instancesArgs<ExtArgs> = {}>(args?: Subset<T, Component$instancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentInstancePayload<ExtArgs>, T, "findMany"> | Null>
    adrComponents<T extends Component$adrComponentsArgs<ExtArgs> = {}>(args?: Subset<T, Component$adrComponentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ADR_ComponentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Component model
   */ 
  interface ComponentFieldRefs {
    readonly id: FieldRef<"Component", 'Int'>
    readonly name: FieldRef<"Component", 'String'>
    readonly description: FieldRef<"Component", 'String'>
    readonly status: FieldRef<"Component", 'Component_status'>
    readonly categoryId: FieldRef<"Component", 'Int'>
    readonly teamId: FieldRef<"Component", 'Int'>
    readonly createdAt: FieldRef<"Component", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Component findUnique
   */
  export type ComponentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Component
     */
    select?: ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInclude<ExtArgs> | null
    /**
     * Filter, which Component to fetch.
     */
    where: ComponentWhereUniqueInput
  }

  /**
   * Component findUniqueOrThrow
   */
  export type ComponentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Component
     */
    select?: ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInclude<ExtArgs> | null
    /**
     * Filter, which Component to fetch.
     */
    where: ComponentWhereUniqueInput
  }

  /**
   * Component findFirst
   */
  export type ComponentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Component
     */
    select?: ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInclude<ExtArgs> | null
    /**
     * Filter, which Component to fetch.
     */
    where?: ComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Components to fetch.
     */
    orderBy?: ComponentOrderByWithRelationInput | ComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Components.
     */
    cursor?: ComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Components from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Components.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Components.
     */
    distinct?: ComponentScalarFieldEnum | ComponentScalarFieldEnum[]
  }

  /**
   * Component findFirstOrThrow
   */
  export type ComponentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Component
     */
    select?: ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInclude<ExtArgs> | null
    /**
     * Filter, which Component to fetch.
     */
    where?: ComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Components to fetch.
     */
    orderBy?: ComponentOrderByWithRelationInput | ComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Components.
     */
    cursor?: ComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Components from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Components.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Components.
     */
    distinct?: ComponentScalarFieldEnum | ComponentScalarFieldEnum[]
  }

  /**
   * Component findMany
   */
  export type ComponentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Component
     */
    select?: ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInclude<ExtArgs> | null
    /**
     * Filter, which Components to fetch.
     */
    where?: ComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Components to fetch.
     */
    orderBy?: ComponentOrderByWithRelationInput | ComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Components.
     */
    cursor?: ComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Components from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Components.
     */
    skip?: number
    distinct?: ComponentScalarFieldEnum | ComponentScalarFieldEnum[]
  }

  /**
   * Component create
   */
  export type ComponentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Component
     */
    select?: ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInclude<ExtArgs> | null
    /**
     * The data needed to create a Component.
     */
    data: XOR<ComponentCreateInput, ComponentUncheckedCreateInput>
  }

  /**
   * Component createMany
   */
  export type ComponentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Components.
     */
    data: ComponentCreateManyInput | ComponentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Component update
   */
  export type ComponentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Component
     */
    select?: ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInclude<ExtArgs> | null
    /**
     * The data needed to update a Component.
     */
    data: XOR<ComponentUpdateInput, ComponentUncheckedUpdateInput>
    /**
     * Choose, which Component to update.
     */
    where: ComponentWhereUniqueInput
  }

  /**
   * Component updateMany
   */
  export type ComponentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Components.
     */
    data: XOR<ComponentUpdateManyMutationInput, ComponentUncheckedUpdateManyInput>
    /**
     * Filter which Components to update
     */
    where?: ComponentWhereInput
  }

  /**
   * Component upsert
   */
  export type ComponentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Component
     */
    select?: ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInclude<ExtArgs> | null
    /**
     * The filter to search for the Component to update in case it exists.
     */
    where: ComponentWhereUniqueInput
    /**
     * In case the Component found by the `where` argument doesn't exist, create a new Component with this data.
     */
    create: XOR<ComponentCreateInput, ComponentUncheckedCreateInput>
    /**
     * In case the Component was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComponentUpdateInput, ComponentUncheckedUpdateInput>
  }

  /**
   * Component delete
   */
  export type ComponentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Component
     */
    select?: ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInclude<ExtArgs> | null
    /**
     * Filter which Component to delete.
     */
    where: ComponentWhereUniqueInput
  }

  /**
   * Component deleteMany
   */
  export type ComponentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Components to delete
     */
    where?: ComponentWhereInput
  }

  /**
   * Component.category
   */
  export type Component$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Component.team
   */
  export type Component$teamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
  }

  /**
   * Component.tags
   */
  export type Component$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTag
     */
    select?: ComponentTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTagInclude<ExtArgs> | null
    where?: ComponentTagWhereInput
    orderBy?: ComponentTagOrderByWithRelationInput | ComponentTagOrderByWithRelationInput[]
    cursor?: ComponentTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComponentTagScalarFieldEnum | ComponentTagScalarFieldEnum[]
  }

  /**
   * Component.instances
   */
  export type Component$instancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentInstance
     */
    select?: ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInstanceInclude<ExtArgs> | null
    where?: ComponentInstanceWhereInput
    orderBy?: ComponentInstanceOrderByWithRelationInput | ComponentInstanceOrderByWithRelationInput[]
    cursor?: ComponentInstanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComponentInstanceScalarFieldEnum | ComponentInstanceScalarFieldEnum[]
  }

  /**
   * Component.adrComponents
   */
  export type Component$adrComponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Component
     */
    select?: ADR_ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInclude<ExtArgs> | null
    where?: ADR_ComponentWhereInput
    orderBy?: ADR_ComponentOrderByWithRelationInput | ADR_ComponentOrderByWithRelationInput[]
    cursor?: ADR_ComponentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ADR_ComponentScalarFieldEnum | ADR_ComponentScalarFieldEnum[]
  }

  /**
   * Component without action
   */
  export type ComponentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Component
     */
    select?: ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInclude<ExtArgs> | null
  }


  /**
   * Model ComponentInstance
   */

  export type AggregateComponentInstance = {
    _count: ComponentInstanceCountAggregateOutputType | null
    _avg: ComponentInstanceAvgAggregateOutputType | null
    _sum: ComponentInstanceSumAggregateOutputType | null
    _min: ComponentInstanceMinAggregateOutputType | null
    _max: ComponentInstanceMaxAggregateOutputType | null
  }

  export type ComponentInstanceAvgAggregateOutputType = {
    id: number | null
    componentId: number | null
    environmentId: number | null
  }

  export type ComponentInstanceSumAggregateOutputType = {
    id: number | null
    componentId: number | null
    environmentId: number | null
  }

  export type ComponentInstanceMinAggregateOutputType = {
    id: number | null
    componentId: number | null
    environmentId: number | null
    hostname: string | null
    createdAt: Date | null
  }

  export type ComponentInstanceMaxAggregateOutputType = {
    id: number | null
    componentId: number | null
    environmentId: number | null
    hostname: string | null
    createdAt: Date | null
  }

  export type ComponentInstanceCountAggregateOutputType = {
    id: number
    componentId: number
    environmentId: number
    hostname: number
    specs: number
    createdAt: number
    _all: number
  }


  export type ComponentInstanceAvgAggregateInputType = {
    id?: true
    componentId?: true
    environmentId?: true
  }

  export type ComponentInstanceSumAggregateInputType = {
    id?: true
    componentId?: true
    environmentId?: true
  }

  export type ComponentInstanceMinAggregateInputType = {
    id?: true
    componentId?: true
    environmentId?: true
    hostname?: true
    createdAt?: true
  }

  export type ComponentInstanceMaxAggregateInputType = {
    id?: true
    componentId?: true
    environmentId?: true
    hostname?: true
    createdAt?: true
  }

  export type ComponentInstanceCountAggregateInputType = {
    id?: true
    componentId?: true
    environmentId?: true
    hostname?: true
    specs?: true
    createdAt?: true
    _all?: true
  }

  export type ComponentInstanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComponentInstance to aggregate.
     */
    where?: ComponentInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentInstances to fetch.
     */
    orderBy?: ComponentInstanceOrderByWithRelationInput | ComponentInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComponentInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentInstances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ComponentInstances
    **/
    _count?: true | ComponentInstanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComponentInstanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComponentInstanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComponentInstanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComponentInstanceMaxAggregateInputType
  }

  export type GetComponentInstanceAggregateType<T extends ComponentInstanceAggregateArgs> = {
        [P in keyof T & keyof AggregateComponentInstance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComponentInstance[P]>
      : GetScalarType<T[P], AggregateComponentInstance[P]>
  }




  export type ComponentInstanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentInstanceWhereInput
    orderBy?: ComponentInstanceOrderByWithAggregationInput | ComponentInstanceOrderByWithAggregationInput[]
    by: ComponentInstanceScalarFieldEnum[] | ComponentInstanceScalarFieldEnum
    having?: ComponentInstanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComponentInstanceCountAggregateInputType | true
    _avg?: ComponentInstanceAvgAggregateInputType
    _sum?: ComponentInstanceSumAggregateInputType
    _min?: ComponentInstanceMinAggregateInputType
    _max?: ComponentInstanceMaxAggregateInputType
  }

  export type ComponentInstanceGroupByOutputType = {
    id: number
    componentId: number
    environmentId: number
    hostname: string | null
    specs: JsonValue | null
    createdAt: Date
    _count: ComponentInstanceCountAggregateOutputType | null
    _avg: ComponentInstanceAvgAggregateOutputType | null
    _sum: ComponentInstanceSumAggregateOutputType | null
    _min: ComponentInstanceMinAggregateOutputType | null
    _max: ComponentInstanceMaxAggregateOutputType | null
  }

  type GetComponentInstanceGroupByPayload<T extends ComponentInstanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComponentInstanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComponentInstanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComponentInstanceGroupByOutputType[P]>
            : GetScalarType<T[P], ComponentInstanceGroupByOutputType[P]>
        }
      >
    >


  export type ComponentInstanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    componentId?: boolean
    environmentId?: boolean
    hostname?: boolean
    specs?: boolean
    createdAt?: boolean
    component?: boolean | ComponentDefaultArgs<ExtArgs>
    environment?: boolean | EnvironmentDefaultArgs<ExtArgs>
    adrInstances?: boolean | ComponentInstance$adrInstancesArgs<ExtArgs>
    _count?: boolean | ComponentInstanceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["componentInstance"]>


  export type ComponentInstanceSelectScalar = {
    id?: boolean
    componentId?: boolean
    environmentId?: boolean
    hostname?: boolean
    specs?: boolean
    createdAt?: boolean
  }

  export type ComponentInstanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    component?: boolean | ComponentDefaultArgs<ExtArgs>
    environment?: boolean | EnvironmentDefaultArgs<ExtArgs>
    adrInstances?: boolean | ComponentInstance$adrInstancesArgs<ExtArgs>
    _count?: boolean | ComponentInstanceCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ComponentInstancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ComponentInstance"
    objects: {
      component: Prisma.$ComponentPayload<ExtArgs>
      environment: Prisma.$EnvironmentPayload<ExtArgs>
      adrInstances: Prisma.$ADR_ComponentInstancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      componentId: number
      environmentId: number
      hostname: string | null
      specs: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["componentInstance"]>
    composites: {}
  }

  type ComponentInstanceGetPayload<S extends boolean | null | undefined | ComponentInstanceDefaultArgs> = $Result.GetResult<Prisma.$ComponentInstancePayload, S>

  type ComponentInstanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ComponentInstanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ComponentInstanceCountAggregateInputType | true
    }

  export interface ComponentInstanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ComponentInstance'], meta: { name: 'ComponentInstance' } }
    /**
     * Find zero or one ComponentInstance that matches the filter.
     * @param {ComponentInstanceFindUniqueArgs} args - Arguments to find a ComponentInstance
     * @example
     * // Get one ComponentInstance
     * const componentInstance = await prisma.componentInstance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComponentInstanceFindUniqueArgs>(args: SelectSubset<T, ComponentInstanceFindUniqueArgs<ExtArgs>>): Prisma__ComponentInstanceClient<$Result.GetResult<Prisma.$ComponentInstancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ComponentInstance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ComponentInstanceFindUniqueOrThrowArgs} args - Arguments to find a ComponentInstance
     * @example
     * // Get one ComponentInstance
     * const componentInstance = await prisma.componentInstance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComponentInstanceFindUniqueOrThrowArgs>(args: SelectSubset<T, ComponentInstanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComponentInstanceClient<$Result.GetResult<Prisma.$ComponentInstancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ComponentInstance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentInstanceFindFirstArgs} args - Arguments to find a ComponentInstance
     * @example
     * // Get one ComponentInstance
     * const componentInstance = await prisma.componentInstance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComponentInstanceFindFirstArgs>(args?: SelectSubset<T, ComponentInstanceFindFirstArgs<ExtArgs>>): Prisma__ComponentInstanceClient<$Result.GetResult<Prisma.$ComponentInstancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ComponentInstance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentInstanceFindFirstOrThrowArgs} args - Arguments to find a ComponentInstance
     * @example
     * // Get one ComponentInstance
     * const componentInstance = await prisma.componentInstance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComponentInstanceFindFirstOrThrowArgs>(args?: SelectSubset<T, ComponentInstanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComponentInstanceClient<$Result.GetResult<Prisma.$ComponentInstancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ComponentInstances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentInstanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ComponentInstances
     * const componentInstances = await prisma.componentInstance.findMany()
     * 
     * // Get first 10 ComponentInstances
     * const componentInstances = await prisma.componentInstance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const componentInstanceWithIdOnly = await prisma.componentInstance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComponentInstanceFindManyArgs>(args?: SelectSubset<T, ComponentInstanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentInstancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ComponentInstance.
     * @param {ComponentInstanceCreateArgs} args - Arguments to create a ComponentInstance.
     * @example
     * // Create one ComponentInstance
     * const ComponentInstance = await prisma.componentInstance.create({
     *   data: {
     *     // ... data to create a ComponentInstance
     *   }
     * })
     * 
     */
    create<T extends ComponentInstanceCreateArgs>(args: SelectSubset<T, ComponentInstanceCreateArgs<ExtArgs>>): Prisma__ComponentInstanceClient<$Result.GetResult<Prisma.$ComponentInstancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ComponentInstances.
     * @param {ComponentInstanceCreateManyArgs} args - Arguments to create many ComponentInstances.
     * @example
     * // Create many ComponentInstances
     * const componentInstance = await prisma.componentInstance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComponentInstanceCreateManyArgs>(args?: SelectSubset<T, ComponentInstanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ComponentInstance.
     * @param {ComponentInstanceDeleteArgs} args - Arguments to delete one ComponentInstance.
     * @example
     * // Delete one ComponentInstance
     * const ComponentInstance = await prisma.componentInstance.delete({
     *   where: {
     *     // ... filter to delete one ComponentInstance
     *   }
     * })
     * 
     */
    delete<T extends ComponentInstanceDeleteArgs>(args: SelectSubset<T, ComponentInstanceDeleteArgs<ExtArgs>>): Prisma__ComponentInstanceClient<$Result.GetResult<Prisma.$ComponentInstancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ComponentInstance.
     * @param {ComponentInstanceUpdateArgs} args - Arguments to update one ComponentInstance.
     * @example
     * // Update one ComponentInstance
     * const componentInstance = await prisma.componentInstance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComponentInstanceUpdateArgs>(args: SelectSubset<T, ComponentInstanceUpdateArgs<ExtArgs>>): Prisma__ComponentInstanceClient<$Result.GetResult<Prisma.$ComponentInstancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ComponentInstances.
     * @param {ComponentInstanceDeleteManyArgs} args - Arguments to filter ComponentInstances to delete.
     * @example
     * // Delete a few ComponentInstances
     * const { count } = await prisma.componentInstance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComponentInstanceDeleteManyArgs>(args?: SelectSubset<T, ComponentInstanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComponentInstances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentInstanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ComponentInstances
     * const componentInstance = await prisma.componentInstance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComponentInstanceUpdateManyArgs>(args: SelectSubset<T, ComponentInstanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ComponentInstance.
     * @param {ComponentInstanceUpsertArgs} args - Arguments to update or create a ComponentInstance.
     * @example
     * // Update or create a ComponentInstance
     * const componentInstance = await prisma.componentInstance.upsert({
     *   create: {
     *     // ... data to create a ComponentInstance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ComponentInstance we want to update
     *   }
     * })
     */
    upsert<T extends ComponentInstanceUpsertArgs>(args: SelectSubset<T, ComponentInstanceUpsertArgs<ExtArgs>>): Prisma__ComponentInstanceClient<$Result.GetResult<Prisma.$ComponentInstancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ComponentInstances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentInstanceCountArgs} args - Arguments to filter ComponentInstances to count.
     * @example
     * // Count the number of ComponentInstances
     * const count = await prisma.componentInstance.count({
     *   where: {
     *     // ... the filter for the ComponentInstances we want to count
     *   }
     * })
    **/
    count<T extends ComponentInstanceCountArgs>(
      args?: Subset<T, ComponentInstanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComponentInstanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ComponentInstance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentInstanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComponentInstanceAggregateArgs>(args: Subset<T, ComponentInstanceAggregateArgs>): Prisma.PrismaPromise<GetComponentInstanceAggregateType<T>>

    /**
     * Group by ComponentInstance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentInstanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComponentInstanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComponentInstanceGroupByArgs['orderBy'] }
        : { orderBy?: ComponentInstanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComponentInstanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComponentInstanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ComponentInstance model
   */
  readonly fields: ComponentInstanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ComponentInstance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComponentInstanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    component<T extends ComponentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ComponentDefaultArgs<ExtArgs>>): Prisma__ComponentClient<$Result.GetResult<Prisma.$ComponentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    environment<T extends EnvironmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EnvironmentDefaultArgs<ExtArgs>>): Prisma__EnvironmentClient<$Result.GetResult<Prisma.$EnvironmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    adrInstances<T extends ComponentInstance$adrInstancesArgs<ExtArgs> = {}>(args?: Subset<T, ComponentInstance$adrInstancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ADR_ComponentInstancePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ComponentInstance model
   */ 
  interface ComponentInstanceFieldRefs {
    readonly id: FieldRef<"ComponentInstance", 'Int'>
    readonly componentId: FieldRef<"ComponentInstance", 'Int'>
    readonly environmentId: FieldRef<"ComponentInstance", 'Int'>
    readonly hostname: FieldRef<"ComponentInstance", 'String'>
    readonly specs: FieldRef<"ComponentInstance", 'Json'>
    readonly createdAt: FieldRef<"ComponentInstance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ComponentInstance findUnique
   */
  export type ComponentInstanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentInstance
     */
    select?: ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInstanceInclude<ExtArgs> | null
    /**
     * Filter, which ComponentInstance to fetch.
     */
    where: ComponentInstanceWhereUniqueInput
  }

  /**
   * ComponentInstance findUniqueOrThrow
   */
  export type ComponentInstanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentInstance
     */
    select?: ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInstanceInclude<ExtArgs> | null
    /**
     * Filter, which ComponentInstance to fetch.
     */
    where: ComponentInstanceWhereUniqueInput
  }

  /**
   * ComponentInstance findFirst
   */
  export type ComponentInstanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentInstance
     */
    select?: ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInstanceInclude<ExtArgs> | null
    /**
     * Filter, which ComponentInstance to fetch.
     */
    where?: ComponentInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentInstances to fetch.
     */
    orderBy?: ComponentInstanceOrderByWithRelationInput | ComponentInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentInstances.
     */
    cursor?: ComponentInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentInstances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentInstances.
     */
    distinct?: ComponentInstanceScalarFieldEnum | ComponentInstanceScalarFieldEnum[]
  }

  /**
   * ComponentInstance findFirstOrThrow
   */
  export type ComponentInstanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentInstance
     */
    select?: ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInstanceInclude<ExtArgs> | null
    /**
     * Filter, which ComponentInstance to fetch.
     */
    where?: ComponentInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentInstances to fetch.
     */
    orderBy?: ComponentInstanceOrderByWithRelationInput | ComponentInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentInstances.
     */
    cursor?: ComponentInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentInstances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentInstances.
     */
    distinct?: ComponentInstanceScalarFieldEnum | ComponentInstanceScalarFieldEnum[]
  }

  /**
   * ComponentInstance findMany
   */
  export type ComponentInstanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentInstance
     */
    select?: ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInstanceInclude<ExtArgs> | null
    /**
     * Filter, which ComponentInstances to fetch.
     */
    where?: ComponentInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentInstances to fetch.
     */
    orderBy?: ComponentInstanceOrderByWithRelationInput | ComponentInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ComponentInstances.
     */
    cursor?: ComponentInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentInstances.
     */
    skip?: number
    distinct?: ComponentInstanceScalarFieldEnum | ComponentInstanceScalarFieldEnum[]
  }

  /**
   * ComponentInstance create
   */
  export type ComponentInstanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentInstance
     */
    select?: ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInstanceInclude<ExtArgs> | null
    /**
     * The data needed to create a ComponentInstance.
     */
    data: XOR<ComponentInstanceCreateInput, ComponentInstanceUncheckedCreateInput>
  }

  /**
   * ComponentInstance createMany
   */
  export type ComponentInstanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ComponentInstances.
     */
    data: ComponentInstanceCreateManyInput | ComponentInstanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ComponentInstance update
   */
  export type ComponentInstanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentInstance
     */
    select?: ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInstanceInclude<ExtArgs> | null
    /**
     * The data needed to update a ComponentInstance.
     */
    data: XOR<ComponentInstanceUpdateInput, ComponentInstanceUncheckedUpdateInput>
    /**
     * Choose, which ComponentInstance to update.
     */
    where: ComponentInstanceWhereUniqueInput
  }

  /**
   * ComponentInstance updateMany
   */
  export type ComponentInstanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ComponentInstances.
     */
    data: XOR<ComponentInstanceUpdateManyMutationInput, ComponentInstanceUncheckedUpdateManyInput>
    /**
     * Filter which ComponentInstances to update
     */
    where?: ComponentInstanceWhereInput
  }

  /**
   * ComponentInstance upsert
   */
  export type ComponentInstanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentInstance
     */
    select?: ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInstanceInclude<ExtArgs> | null
    /**
     * The filter to search for the ComponentInstance to update in case it exists.
     */
    where: ComponentInstanceWhereUniqueInput
    /**
     * In case the ComponentInstance found by the `where` argument doesn't exist, create a new ComponentInstance with this data.
     */
    create: XOR<ComponentInstanceCreateInput, ComponentInstanceUncheckedCreateInput>
    /**
     * In case the ComponentInstance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComponentInstanceUpdateInput, ComponentInstanceUncheckedUpdateInput>
  }

  /**
   * ComponentInstance delete
   */
  export type ComponentInstanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentInstance
     */
    select?: ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInstanceInclude<ExtArgs> | null
    /**
     * Filter which ComponentInstance to delete.
     */
    where: ComponentInstanceWhereUniqueInput
  }

  /**
   * ComponentInstance deleteMany
   */
  export type ComponentInstanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComponentInstances to delete
     */
    where?: ComponentInstanceWhereInput
  }

  /**
   * ComponentInstance.adrInstances
   */
  export type ComponentInstance$adrInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_ComponentInstance
     */
    select?: ADR_ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInstanceInclude<ExtArgs> | null
    where?: ADR_ComponentInstanceWhereInput
    orderBy?: ADR_ComponentInstanceOrderByWithRelationInput | ADR_ComponentInstanceOrderByWithRelationInput[]
    cursor?: ADR_ComponentInstanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ADR_ComponentInstanceScalarFieldEnum | ADR_ComponentInstanceScalarFieldEnum[]
  }

  /**
   * ComponentInstance without action
   */
  export type ComponentInstanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentInstance
     */
    select?: ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentInstanceInclude<ExtArgs> | null
  }


  /**
   * Model ADR
   */

  export type AggregateADR = {
    _count: ADRCountAggregateOutputType | null
    _avg: ADRAvgAggregateOutputType | null
    _sum: ADRSumAggregateOutputType | null
    _min: ADRMinAggregateOutputType | null
    _max: ADRMaxAggregateOutputType | null
  }

  export type ADRAvgAggregateOutputType = {
    id: number | null
  }

  export type ADRSumAggregateOutputType = {
    id: number | null
  }

  export type ADRMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    status: $Enums.ADR_status | null
    createdAt: Date | null
  }

  export type ADRMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    status: $Enums.ADR_status | null
    createdAt: Date | null
  }

  export type ADRCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    createdAt: number
    _all: number
  }


  export type ADRAvgAggregateInputType = {
    id?: true
  }

  export type ADRSumAggregateInputType = {
    id?: true
  }

  export type ADRMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    createdAt?: true
  }

  export type ADRMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    createdAt?: true
  }

  export type ADRCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type ADRAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ADR to aggregate.
     */
    where?: ADRWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADRS to fetch.
     */
    orderBy?: ADROrderByWithRelationInput | ADROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ADRWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADRS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADRS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ADRS
    **/
    _count?: true | ADRCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ADRAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ADRSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ADRMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ADRMaxAggregateInputType
  }

  export type GetADRAggregateType<T extends ADRAggregateArgs> = {
        [P in keyof T & keyof AggregateADR]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateADR[P]>
      : GetScalarType<T[P], AggregateADR[P]>
  }




  export type ADRGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ADRWhereInput
    orderBy?: ADROrderByWithAggregationInput | ADROrderByWithAggregationInput[]
    by: ADRScalarFieldEnum[] | ADRScalarFieldEnum
    having?: ADRScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ADRCountAggregateInputType | true
    _avg?: ADRAvgAggregateInputType
    _sum?: ADRSumAggregateInputType
    _min?: ADRMinAggregateInputType
    _max?: ADRMaxAggregateInputType
  }

  export type ADRGroupByOutputType = {
    id: number
    title: string
    description: string
    status: $Enums.ADR_status
    createdAt: Date
    _count: ADRCountAggregateOutputType | null
    _avg: ADRAvgAggregateOutputType | null
    _sum: ADRSumAggregateOutputType | null
    _min: ADRMinAggregateOutputType | null
    _max: ADRMaxAggregateOutputType | null
  }

  type GetADRGroupByPayload<T extends ADRGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ADRGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ADRGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ADRGroupByOutputType[P]>
            : GetScalarType<T[P], ADRGroupByOutputType[P]>
        }
      >
    >


  export type ADRSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    tags?: boolean | ADR$tagsArgs<ExtArgs>
    participants?: boolean | ADR$participantsArgs<ExtArgs>
    componentInstances?: boolean | ADR$componentInstancesArgs<ExtArgs>
    components?: boolean | ADR$componentsArgs<ExtArgs>
    _count?: boolean | ADRCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aDR"]>


  export type ADRSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type ADRInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | ADR$tagsArgs<ExtArgs>
    participants?: boolean | ADR$participantsArgs<ExtArgs>
    componentInstances?: boolean | ADR$componentInstancesArgs<ExtArgs>
    components?: boolean | ADR$componentsArgs<ExtArgs>
    _count?: boolean | ADRCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ADRPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ADR"
    objects: {
      tags: Prisma.$ADRTagPayload<ExtArgs>[]
      participants: Prisma.$ADR_ParticipantPayload<ExtArgs>[]
      componentInstances: Prisma.$ADR_ComponentInstancePayload<ExtArgs>[]
      components: Prisma.$ADR_ComponentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      status: $Enums.ADR_status
      createdAt: Date
    }, ExtArgs["result"]["aDR"]>
    composites: {}
  }

  type ADRGetPayload<S extends boolean | null | undefined | ADRDefaultArgs> = $Result.GetResult<Prisma.$ADRPayload, S>

  type ADRCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ADRFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ADRCountAggregateInputType | true
    }

  export interface ADRDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ADR'], meta: { name: 'ADR' } }
    /**
     * Find zero or one ADR that matches the filter.
     * @param {ADRFindUniqueArgs} args - Arguments to find a ADR
     * @example
     * // Get one ADR
     * const aDR = await prisma.aDR.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ADRFindUniqueArgs>(args: SelectSubset<T, ADRFindUniqueArgs<ExtArgs>>): Prisma__ADRClient<$Result.GetResult<Prisma.$ADRPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ADR that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ADRFindUniqueOrThrowArgs} args - Arguments to find a ADR
     * @example
     * // Get one ADR
     * const aDR = await prisma.aDR.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ADRFindUniqueOrThrowArgs>(args: SelectSubset<T, ADRFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ADRClient<$Result.GetResult<Prisma.$ADRPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ADR that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADRFindFirstArgs} args - Arguments to find a ADR
     * @example
     * // Get one ADR
     * const aDR = await prisma.aDR.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ADRFindFirstArgs>(args?: SelectSubset<T, ADRFindFirstArgs<ExtArgs>>): Prisma__ADRClient<$Result.GetResult<Prisma.$ADRPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ADR that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADRFindFirstOrThrowArgs} args - Arguments to find a ADR
     * @example
     * // Get one ADR
     * const aDR = await prisma.aDR.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ADRFindFirstOrThrowArgs>(args?: SelectSubset<T, ADRFindFirstOrThrowArgs<ExtArgs>>): Prisma__ADRClient<$Result.GetResult<Prisma.$ADRPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ADRS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADRFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ADRS
     * const aDRS = await prisma.aDR.findMany()
     * 
     * // Get first 10 ADRS
     * const aDRS = await prisma.aDR.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aDRWithIdOnly = await prisma.aDR.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ADRFindManyArgs>(args?: SelectSubset<T, ADRFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ADRPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ADR.
     * @param {ADRCreateArgs} args - Arguments to create a ADR.
     * @example
     * // Create one ADR
     * const ADR = await prisma.aDR.create({
     *   data: {
     *     // ... data to create a ADR
     *   }
     * })
     * 
     */
    create<T extends ADRCreateArgs>(args: SelectSubset<T, ADRCreateArgs<ExtArgs>>): Prisma__ADRClient<$Result.GetResult<Prisma.$ADRPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ADRS.
     * @param {ADRCreateManyArgs} args - Arguments to create many ADRS.
     * @example
     * // Create many ADRS
     * const aDR = await prisma.aDR.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ADRCreateManyArgs>(args?: SelectSubset<T, ADRCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ADR.
     * @param {ADRDeleteArgs} args - Arguments to delete one ADR.
     * @example
     * // Delete one ADR
     * const ADR = await prisma.aDR.delete({
     *   where: {
     *     // ... filter to delete one ADR
     *   }
     * })
     * 
     */
    delete<T extends ADRDeleteArgs>(args: SelectSubset<T, ADRDeleteArgs<ExtArgs>>): Prisma__ADRClient<$Result.GetResult<Prisma.$ADRPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ADR.
     * @param {ADRUpdateArgs} args - Arguments to update one ADR.
     * @example
     * // Update one ADR
     * const aDR = await prisma.aDR.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ADRUpdateArgs>(args: SelectSubset<T, ADRUpdateArgs<ExtArgs>>): Prisma__ADRClient<$Result.GetResult<Prisma.$ADRPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ADRS.
     * @param {ADRDeleteManyArgs} args - Arguments to filter ADRS to delete.
     * @example
     * // Delete a few ADRS
     * const { count } = await prisma.aDR.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ADRDeleteManyArgs>(args?: SelectSubset<T, ADRDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ADRS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADRUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ADRS
     * const aDR = await prisma.aDR.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ADRUpdateManyArgs>(args: SelectSubset<T, ADRUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ADR.
     * @param {ADRUpsertArgs} args - Arguments to update or create a ADR.
     * @example
     * // Update or create a ADR
     * const aDR = await prisma.aDR.upsert({
     *   create: {
     *     // ... data to create a ADR
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ADR we want to update
     *   }
     * })
     */
    upsert<T extends ADRUpsertArgs>(args: SelectSubset<T, ADRUpsertArgs<ExtArgs>>): Prisma__ADRClient<$Result.GetResult<Prisma.$ADRPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ADRS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADRCountArgs} args - Arguments to filter ADRS to count.
     * @example
     * // Count the number of ADRS
     * const count = await prisma.aDR.count({
     *   where: {
     *     // ... the filter for the ADRS we want to count
     *   }
     * })
    **/
    count<T extends ADRCountArgs>(
      args?: Subset<T, ADRCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ADRCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ADR.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADRAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ADRAggregateArgs>(args: Subset<T, ADRAggregateArgs>): Prisma.PrismaPromise<GetADRAggregateType<T>>

    /**
     * Group by ADR.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADRGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ADRGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ADRGroupByArgs['orderBy'] }
        : { orderBy?: ADRGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ADRGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetADRGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ADR model
   */
  readonly fields: ADRFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ADR.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ADRClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tags<T extends ADR$tagsArgs<ExtArgs> = {}>(args?: Subset<T, ADR$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ADRTagPayload<ExtArgs>, T, "findMany"> | Null>
    participants<T extends ADR$participantsArgs<ExtArgs> = {}>(args?: Subset<T, ADR$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ADR_ParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    componentInstances<T extends ADR$componentInstancesArgs<ExtArgs> = {}>(args?: Subset<T, ADR$componentInstancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ADR_ComponentInstancePayload<ExtArgs>, T, "findMany"> | Null>
    components<T extends ADR$componentsArgs<ExtArgs> = {}>(args?: Subset<T, ADR$componentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ADR_ComponentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ADR model
   */ 
  interface ADRFieldRefs {
    readonly id: FieldRef<"ADR", 'Int'>
    readonly title: FieldRef<"ADR", 'String'>
    readonly description: FieldRef<"ADR", 'String'>
    readonly status: FieldRef<"ADR", 'ADR_status'>
    readonly createdAt: FieldRef<"ADR", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ADR findUnique
   */
  export type ADRFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR
     */
    select?: ADRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRInclude<ExtArgs> | null
    /**
     * Filter, which ADR to fetch.
     */
    where: ADRWhereUniqueInput
  }

  /**
   * ADR findUniqueOrThrow
   */
  export type ADRFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR
     */
    select?: ADRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRInclude<ExtArgs> | null
    /**
     * Filter, which ADR to fetch.
     */
    where: ADRWhereUniqueInput
  }

  /**
   * ADR findFirst
   */
  export type ADRFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR
     */
    select?: ADRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRInclude<ExtArgs> | null
    /**
     * Filter, which ADR to fetch.
     */
    where?: ADRWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADRS to fetch.
     */
    orderBy?: ADROrderByWithRelationInput | ADROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ADRS.
     */
    cursor?: ADRWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADRS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADRS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ADRS.
     */
    distinct?: ADRScalarFieldEnum | ADRScalarFieldEnum[]
  }

  /**
   * ADR findFirstOrThrow
   */
  export type ADRFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR
     */
    select?: ADRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRInclude<ExtArgs> | null
    /**
     * Filter, which ADR to fetch.
     */
    where?: ADRWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADRS to fetch.
     */
    orderBy?: ADROrderByWithRelationInput | ADROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ADRS.
     */
    cursor?: ADRWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADRS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADRS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ADRS.
     */
    distinct?: ADRScalarFieldEnum | ADRScalarFieldEnum[]
  }

  /**
   * ADR findMany
   */
  export type ADRFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR
     */
    select?: ADRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRInclude<ExtArgs> | null
    /**
     * Filter, which ADRS to fetch.
     */
    where?: ADRWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADRS to fetch.
     */
    orderBy?: ADROrderByWithRelationInput | ADROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ADRS.
     */
    cursor?: ADRWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADRS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADRS.
     */
    skip?: number
    distinct?: ADRScalarFieldEnum | ADRScalarFieldEnum[]
  }

  /**
   * ADR create
   */
  export type ADRCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR
     */
    select?: ADRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRInclude<ExtArgs> | null
    /**
     * The data needed to create a ADR.
     */
    data: XOR<ADRCreateInput, ADRUncheckedCreateInput>
  }

  /**
   * ADR createMany
   */
  export type ADRCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ADRS.
     */
    data: ADRCreateManyInput | ADRCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ADR update
   */
  export type ADRUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR
     */
    select?: ADRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRInclude<ExtArgs> | null
    /**
     * The data needed to update a ADR.
     */
    data: XOR<ADRUpdateInput, ADRUncheckedUpdateInput>
    /**
     * Choose, which ADR to update.
     */
    where: ADRWhereUniqueInput
  }

  /**
   * ADR updateMany
   */
  export type ADRUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ADRS.
     */
    data: XOR<ADRUpdateManyMutationInput, ADRUncheckedUpdateManyInput>
    /**
     * Filter which ADRS to update
     */
    where?: ADRWhereInput
  }

  /**
   * ADR upsert
   */
  export type ADRUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR
     */
    select?: ADRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRInclude<ExtArgs> | null
    /**
     * The filter to search for the ADR to update in case it exists.
     */
    where: ADRWhereUniqueInput
    /**
     * In case the ADR found by the `where` argument doesn't exist, create a new ADR with this data.
     */
    create: XOR<ADRCreateInput, ADRUncheckedCreateInput>
    /**
     * In case the ADR was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ADRUpdateInput, ADRUncheckedUpdateInput>
  }

  /**
   * ADR delete
   */
  export type ADRDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR
     */
    select?: ADRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRInclude<ExtArgs> | null
    /**
     * Filter which ADR to delete.
     */
    where: ADRWhereUniqueInput
  }

  /**
   * ADR deleteMany
   */
  export type ADRDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ADRS to delete
     */
    where?: ADRWhereInput
  }

  /**
   * ADR.tags
   */
  export type ADR$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADRTag
     */
    select?: ADRTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRTagInclude<ExtArgs> | null
    where?: ADRTagWhereInput
    orderBy?: ADRTagOrderByWithRelationInput | ADRTagOrderByWithRelationInput[]
    cursor?: ADRTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ADRTagScalarFieldEnum | ADRTagScalarFieldEnum[]
  }

  /**
   * ADR.participants
   */
  export type ADR$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Participant
     */
    select?: ADR_ParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ParticipantInclude<ExtArgs> | null
    where?: ADR_ParticipantWhereInput
    orderBy?: ADR_ParticipantOrderByWithRelationInput | ADR_ParticipantOrderByWithRelationInput[]
    cursor?: ADR_ParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ADR_ParticipantScalarFieldEnum | ADR_ParticipantScalarFieldEnum[]
  }

  /**
   * ADR.componentInstances
   */
  export type ADR$componentInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_ComponentInstance
     */
    select?: ADR_ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInstanceInclude<ExtArgs> | null
    where?: ADR_ComponentInstanceWhereInput
    orderBy?: ADR_ComponentInstanceOrderByWithRelationInput | ADR_ComponentInstanceOrderByWithRelationInput[]
    cursor?: ADR_ComponentInstanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ADR_ComponentInstanceScalarFieldEnum | ADR_ComponentInstanceScalarFieldEnum[]
  }

  /**
   * ADR.components
   */
  export type ADR$componentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Component
     */
    select?: ADR_ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInclude<ExtArgs> | null
    where?: ADR_ComponentWhereInput
    orderBy?: ADR_ComponentOrderByWithRelationInput | ADR_ComponentOrderByWithRelationInput[]
    cursor?: ADR_ComponentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ADR_ComponentScalarFieldEnum | ADR_ComponentScalarFieldEnum[]
  }

  /**
   * ADR without action
   */
  export type ADRDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR
     */
    select?: ADRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRInclude<ExtArgs> | null
  }


  /**
   * Model ADR_Participant
   */

  export type AggregateADR_Participant = {
    _count: ADR_ParticipantCountAggregateOutputType | null
    _avg: ADR_ParticipantAvgAggregateOutputType | null
    _sum: ADR_ParticipantSumAggregateOutputType | null
    _min: ADR_ParticipantMinAggregateOutputType | null
    _max: ADR_ParticipantMaxAggregateOutputType | null
  }

  export type ADR_ParticipantAvgAggregateOutputType = {
    id: number | null
    adrId: number | null
    userId: number | null
  }

  export type ADR_ParticipantSumAggregateOutputType = {
    id: number | null
    adrId: number | null
    userId: number | null
  }

  export type ADR_ParticipantMinAggregateOutputType = {
    id: number | null
    adrId: number | null
    userId: number | null
    role: $Enums.ParticipantRole | null
    createdAt: Date | null
  }

  export type ADR_ParticipantMaxAggregateOutputType = {
    id: number | null
    adrId: number | null
    userId: number | null
    role: $Enums.ParticipantRole | null
    createdAt: Date | null
  }

  export type ADR_ParticipantCountAggregateOutputType = {
    id: number
    adrId: number
    userId: number
    role: number
    createdAt: number
    _all: number
  }


  export type ADR_ParticipantAvgAggregateInputType = {
    id?: true
    adrId?: true
    userId?: true
  }

  export type ADR_ParticipantSumAggregateInputType = {
    id?: true
    adrId?: true
    userId?: true
  }

  export type ADR_ParticipantMinAggregateInputType = {
    id?: true
    adrId?: true
    userId?: true
    role?: true
    createdAt?: true
  }

  export type ADR_ParticipantMaxAggregateInputType = {
    id?: true
    adrId?: true
    userId?: true
    role?: true
    createdAt?: true
  }

  export type ADR_ParticipantCountAggregateInputType = {
    id?: true
    adrId?: true
    userId?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type ADR_ParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ADR_Participant to aggregate.
     */
    where?: ADR_ParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADR_Participants to fetch.
     */
    orderBy?: ADR_ParticipantOrderByWithRelationInput | ADR_ParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ADR_ParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADR_Participants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADR_Participants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ADR_Participants
    **/
    _count?: true | ADR_ParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ADR_ParticipantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ADR_ParticipantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ADR_ParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ADR_ParticipantMaxAggregateInputType
  }

  export type GetADR_ParticipantAggregateType<T extends ADR_ParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateADR_Participant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateADR_Participant[P]>
      : GetScalarType<T[P], AggregateADR_Participant[P]>
  }




  export type ADR_ParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ADR_ParticipantWhereInput
    orderBy?: ADR_ParticipantOrderByWithAggregationInput | ADR_ParticipantOrderByWithAggregationInput[]
    by: ADR_ParticipantScalarFieldEnum[] | ADR_ParticipantScalarFieldEnum
    having?: ADR_ParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ADR_ParticipantCountAggregateInputType | true
    _avg?: ADR_ParticipantAvgAggregateInputType
    _sum?: ADR_ParticipantSumAggregateInputType
    _min?: ADR_ParticipantMinAggregateInputType
    _max?: ADR_ParticipantMaxAggregateInputType
  }

  export type ADR_ParticipantGroupByOutputType = {
    id: number
    adrId: number
    userId: number
    role: $Enums.ParticipantRole
    createdAt: Date
    _count: ADR_ParticipantCountAggregateOutputType | null
    _avg: ADR_ParticipantAvgAggregateOutputType | null
    _sum: ADR_ParticipantSumAggregateOutputType | null
    _min: ADR_ParticipantMinAggregateOutputType | null
    _max: ADR_ParticipantMaxAggregateOutputType | null
  }

  type GetADR_ParticipantGroupByPayload<T extends ADR_ParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ADR_ParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ADR_ParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ADR_ParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], ADR_ParticipantGroupByOutputType[P]>
        }
      >
    >


  export type ADR_ParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adrId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    adr?: boolean | ADRDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aDR_Participant"]>


  export type ADR_ParticipantSelectScalar = {
    id?: boolean
    adrId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
  }

  export type ADR_ParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adr?: boolean | ADRDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ADR_ParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ADR_Participant"
    objects: {
      adr: Prisma.$ADRPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      adrId: number
      userId: number
      role: $Enums.ParticipantRole
      createdAt: Date
    }, ExtArgs["result"]["aDR_Participant"]>
    composites: {}
  }

  type ADR_ParticipantGetPayload<S extends boolean | null | undefined | ADR_ParticipantDefaultArgs> = $Result.GetResult<Prisma.$ADR_ParticipantPayload, S>

  type ADR_ParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ADR_ParticipantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ADR_ParticipantCountAggregateInputType | true
    }

  export interface ADR_ParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ADR_Participant'], meta: { name: 'ADR_Participant' } }
    /**
     * Find zero or one ADR_Participant that matches the filter.
     * @param {ADR_ParticipantFindUniqueArgs} args - Arguments to find a ADR_Participant
     * @example
     * // Get one ADR_Participant
     * const aDR_Participant = await prisma.aDR_Participant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ADR_ParticipantFindUniqueArgs>(args: SelectSubset<T, ADR_ParticipantFindUniqueArgs<ExtArgs>>): Prisma__ADR_ParticipantClient<$Result.GetResult<Prisma.$ADR_ParticipantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ADR_Participant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ADR_ParticipantFindUniqueOrThrowArgs} args - Arguments to find a ADR_Participant
     * @example
     * // Get one ADR_Participant
     * const aDR_Participant = await prisma.aDR_Participant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ADR_ParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, ADR_ParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ADR_ParticipantClient<$Result.GetResult<Prisma.$ADR_ParticipantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ADR_Participant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ParticipantFindFirstArgs} args - Arguments to find a ADR_Participant
     * @example
     * // Get one ADR_Participant
     * const aDR_Participant = await prisma.aDR_Participant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ADR_ParticipantFindFirstArgs>(args?: SelectSubset<T, ADR_ParticipantFindFirstArgs<ExtArgs>>): Prisma__ADR_ParticipantClient<$Result.GetResult<Prisma.$ADR_ParticipantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ADR_Participant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ParticipantFindFirstOrThrowArgs} args - Arguments to find a ADR_Participant
     * @example
     * // Get one ADR_Participant
     * const aDR_Participant = await prisma.aDR_Participant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ADR_ParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, ADR_ParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__ADR_ParticipantClient<$Result.GetResult<Prisma.$ADR_ParticipantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ADR_Participants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ADR_Participants
     * const aDR_Participants = await prisma.aDR_Participant.findMany()
     * 
     * // Get first 10 ADR_Participants
     * const aDR_Participants = await prisma.aDR_Participant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aDR_ParticipantWithIdOnly = await prisma.aDR_Participant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ADR_ParticipantFindManyArgs>(args?: SelectSubset<T, ADR_ParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ADR_ParticipantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ADR_Participant.
     * @param {ADR_ParticipantCreateArgs} args - Arguments to create a ADR_Participant.
     * @example
     * // Create one ADR_Participant
     * const ADR_Participant = await prisma.aDR_Participant.create({
     *   data: {
     *     // ... data to create a ADR_Participant
     *   }
     * })
     * 
     */
    create<T extends ADR_ParticipantCreateArgs>(args: SelectSubset<T, ADR_ParticipantCreateArgs<ExtArgs>>): Prisma__ADR_ParticipantClient<$Result.GetResult<Prisma.$ADR_ParticipantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ADR_Participants.
     * @param {ADR_ParticipantCreateManyArgs} args - Arguments to create many ADR_Participants.
     * @example
     * // Create many ADR_Participants
     * const aDR_Participant = await prisma.aDR_Participant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ADR_ParticipantCreateManyArgs>(args?: SelectSubset<T, ADR_ParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ADR_Participant.
     * @param {ADR_ParticipantDeleteArgs} args - Arguments to delete one ADR_Participant.
     * @example
     * // Delete one ADR_Participant
     * const ADR_Participant = await prisma.aDR_Participant.delete({
     *   where: {
     *     // ... filter to delete one ADR_Participant
     *   }
     * })
     * 
     */
    delete<T extends ADR_ParticipantDeleteArgs>(args: SelectSubset<T, ADR_ParticipantDeleteArgs<ExtArgs>>): Prisma__ADR_ParticipantClient<$Result.GetResult<Prisma.$ADR_ParticipantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ADR_Participant.
     * @param {ADR_ParticipantUpdateArgs} args - Arguments to update one ADR_Participant.
     * @example
     * // Update one ADR_Participant
     * const aDR_Participant = await prisma.aDR_Participant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ADR_ParticipantUpdateArgs>(args: SelectSubset<T, ADR_ParticipantUpdateArgs<ExtArgs>>): Prisma__ADR_ParticipantClient<$Result.GetResult<Prisma.$ADR_ParticipantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ADR_Participants.
     * @param {ADR_ParticipantDeleteManyArgs} args - Arguments to filter ADR_Participants to delete.
     * @example
     * // Delete a few ADR_Participants
     * const { count } = await prisma.aDR_Participant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ADR_ParticipantDeleteManyArgs>(args?: SelectSubset<T, ADR_ParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ADR_Participants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ADR_Participants
     * const aDR_Participant = await prisma.aDR_Participant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ADR_ParticipantUpdateManyArgs>(args: SelectSubset<T, ADR_ParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ADR_Participant.
     * @param {ADR_ParticipantUpsertArgs} args - Arguments to update or create a ADR_Participant.
     * @example
     * // Update or create a ADR_Participant
     * const aDR_Participant = await prisma.aDR_Participant.upsert({
     *   create: {
     *     // ... data to create a ADR_Participant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ADR_Participant we want to update
     *   }
     * })
     */
    upsert<T extends ADR_ParticipantUpsertArgs>(args: SelectSubset<T, ADR_ParticipantUpsertArgs<ExtArgs>>): Prisma__ADR_ParticipantClient<$Result.GetResult<Prisma.$ADR_ParticipantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ADR_Participants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ParticipantCountArgs} args - Arguments to filter ADR_Participants to count.
     * @example
     * // Count the number of ADR_Participants
     * const count = await prisma.aDR_Participant.count({
     *   where: {
     *     // ... the filter for the ADR_Participants we want to count
     *   }
     * })
    **/
    count<T extends ADR_ParticipantCountArgs>(
      args?: Subset<T, ADR_ParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ADR_ParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ADR_Participant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ADR_ParticipantAggregateArgs>(args: Subset<T, ADR_ParticipantAggregateArgs>): Prisma.PrismaPromise<GetADR_ParticipantAggregateType<T>>

    /**
     * Group by ADR_Participant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ADR_ParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ADR_ParticipantGroupByArgs['orderBy'] }
        : { orderBy?: ADR_ParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ADR_ParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetADR_ParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ADR_Participant model
   */
  readonly fields: ADR_ParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ADR_Participant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ADR_ParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    adr<T extends ADRDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ADRDefaultArgs<ExtArgs>>): Prisma__ADRClient<$Result.GetResult<Prisma.$ADRPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ADR_Participant model
   */ 
  interface ADR_ParticipantFieldRefs {
    readonly id: FieldRef<"ADR_Participant", 'Int'>
    readonly adrId: FieldRef<"ADR_Participant", 'Int'>
    readonly userId: FieldRef<"ADR_Participant", 'Int'>
    readonly role: FieldRef<"ADR_Participant", 'ParticipantRole'>
    readonly createdAt: FieldRef<"ADR_Participant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ADR_Participant findUnique
   */
  export type ADR_ParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Participant
     */
    select?: ADR_ParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ADR_Participant to fetch.
     */
    where: ADR_ParticipantWhereUniqueInput
  }

  /**
   * ADR_Participant findUniqueOrThrow
   */
  export type ADR_ParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Participant
     */
    select?: ADR_ParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ADR_Participant to fetch.
     */
    where: ADR_ParticipantWhereUniqueInput
  }

  /**
   * ADR_Participant findFirst
   */
  export type ADR_ParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Participant
     */
    select?: ADR_ParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ADR_Participant to fetch.
     */
    where?: ADR_ParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADR_Participants to fetch.
     */
    orderBy?: ADR_ParticipantOrderByWithRelationInput | ADR_ParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ADR_Participants.
     */
    cursor?: ADR_ParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADR_Participants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADR_Participants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ADR_Participants.
     */
    distinct?: ADR_ParticipantScalarFieldEnum | ADR_ParticipantScalarFieldEnum[]
  }

  /**
   * ADR_Participant findFirstOrThrow
   */
  export type ADR_ParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Participant
     */
    select?: ADR_ParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ADR_Participant to fetch.
     */
    where?: ADR_ParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADR_Participants to fetch.
     */
    orderBy?: ADR_ParticipantOrderByWithRelationInput | ADR_ParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ADR_Participants.
     */
    cursor?: ADR_ParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADR_Participants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADR_Participants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ADR_Participants.
     */
    distinct?: ADR_ParticipantScalarFieldEnum | ADR_ParticipantScalarFieldEnum[]
  }

  /**
   * ADR_Participant findMany
   */
  export type ADR_ParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Participant
     */
    select?: ADR_ParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ADR_Participants to fetch.
     */
    where?: ADR_ParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADR_Participants to fetch.
     */
    orderBy?: ADR_ParticipantOrderByWithRelationInput | ADR_ParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ADR_Participants.
     */
    cursor?: ADR_ParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADR_Participants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADR_Participants.
     */
    skip?: number
    distinct?: ADR_ParticipantScalarFieldEnum | ADR_ParticipantScalarFieldEnum[]
  }

  /**
   * ADR_Participant create
   */
  export type ADR_ParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Participant
     */
    select?: ADR_ParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a ADR_Participant.
     */
    data: XOR<ADR_ParticipantCreateInput, ADR_ParticipantUncheckedCreateInput>
  }

  /**
   * ADR_Participant createMany
   */
  export type ADR_ParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ADR_Participants.
     */
    data: ADR_ParticipantCreateManyInput | ADR_ParticipantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ADR_Participant update
   */
  export type ADR_ParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Participant
     */
    select?: ADR_ParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a ADR_Participant.
     */
    data: XOR<ADR_ParticipantUpdateInput, ADR_ParticipantUncheckedUpdateInput>
    /**
     * Choose, which ADR_Participant to update.
     */
    where: ADR_ParticipantWhereUniqueInput
  }

  /**
   * ADR_Participant updateMany
   */
  export type ADR_ParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ADR_Participants.
     */
    data: XOR<ADR_ParticipantUpdateManyMutationInput, ADR_ParticipantUncheckedUpdateManyInput>
    /**
     * Filter which ADR_Participants to update
     */
    where?: ADR_ParticipantWhereInput
  }

  /**
   * ADR_Participant upsert
   */
  export type ADR_ParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Participant
     */
    select?: ADR_ParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the ADR_Participant to update in case it exists.
     */
    where: ADR_ParticipantWhereUniqueInput
    /**
     * In case the ADR_Participant found by the `where` argument doesn't exist, create a new ADR_Participant with this data.
     */
    create: XOR<ADR_ParticipantCreateInput, ADR_ParticipantUncheckedCreateInput>
    /**
     * In case the ADR_Participant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ADR_ParticipantUpdateInput, ADR_ParticipantUncheckedUpdateInput>
  }

  /**
   * ADR_Participant delete
   */
  export type ADR_ParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Participant
     */
    select?: ADR_ParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ParticipantInclude<ExtArgs> | null
    /**
     * Filter which ADR_Participant to delete.
     */
    where: ADR_ParticipantWhereUniqueInput
  }

  /**
   * ADR_Participant deleteMany
   */
  export type ADR_ParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ADR_Participants to delete
     */
    where?: ADR_ParticipantWhereInput
  }

  /**
   * ADR_Participant without action
   */
  export type ADR_ParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Participant
     */
    select?: ADR_ParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ParticipantInclude<ExtArgs> | null
  }


  /**
   * Model ADR_ComponentInstance
   */

  export type AggregateADR_ComponentInstance = {
    _count: ADR_ComponentInstanceCountAggregateOutputType | null
    _avg: ADR_ComponentInstanceAvgAggregateOutputType | null
    _sum: ADR_ComponentInstanceSumAggregateOutputType | null
    _min: ADR_ComponentInstanceMinAggregateOutputType | null
    _max: ADR_ComponentInstanceMaxAggregateOutputType | null
  }

  export type ADR_ComponentInstanceAvgAggregateOutputType = {
    adrId: number | null
    instanceId: number | null
  }

  export type ADR_ComponentInstanceSumAggregateOutputType = {
    adrId: number | null
    instanceId: number | null
  }

  export type ADR_ComponentInstanceMinAggregateOutputType = {
    adrId: number | null
    instanceId: number | null
    impactLevel: $Enums.ImpactLevel | null
  }

  export type ADR_ComponentInstanceMaxAggregateOutputType = {
    adrId: number | null
    instanceId: number | null
    impactLevel: $Enums.ImpactLevel | null
  }

  export type ADR_ComponentInstanceCountAggregateOutputType = {
    adrId: number
    instanceId: number
    impactLevel: number
    _all: number
  }


  export type ADR_ComponentInstanceAvgAggregateInputType = {
    adrId?: true
    instanceId?: true
  }

  export type ADR_ComponentInstanceSumAggregateInputType = {
    adrId?: true
    instanceId?: true
  }

  export type ADR_ComponentInstanceMinAggregateInputType = {
    adrId?: true
    instanceId?: true
    impactLevel?: true
  }

  export type ADR_ComponentInstanceMaxAggregateInputType = {
    adrId?: true
    instanceId?: true
    impactLevel?: true
  }

  export type ADR_ComponentInstanceCountAggregateInputType = {
    adrId?: true
    instanceId?: true
    impactLevel?: true
    _all?: true
  }

  export type ADR_ComponentInstanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ADR_ComponentInstance to aggregate.
     */
    where?: ADR_ComponentInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADR_ComponentInstances to fetch.
     */
    orderBy?: ADR_ComponentInstanceOrderByWithRelationInput | ADR_ComponentInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ADR_ComponentInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADR_ComponentInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADR_ComponentInstances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ADR_ComponentInstances
    **/
    _count?: true | ADR_ComponentInstanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ADR_ComponentInstanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ADR_ComponentInstanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ADR_ComponentInstanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ADR_ComponentInstanceMaxAggregateInputType
  }

  export type GetADR_ComponentInstanceAggregateType<T extends ADR_ComponentInstanceAggregateArgs> = {
        [P in keyof T & keyof AggregateADR_ComponentInstance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateADR_ComponentInstance[P]>
      : GetScalarType<T[P], AggregateADR_ComponentInstance[P]>
  }




  export type ADR_ComponentInstanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ADR_ComponentInstanceWhereInput
    orderBy?: ADR_ComponentInstanceOrderByWithAggregationInput | ADR_ComponentInstanceOrderByWithAggregationInput[]
    by: ADR_ComponentInstanceScalarFieldEnum[] | ADR_ComponentInstanceScalarFieldEnum
    having?: ADR_ComponentInstanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ADR_ComponentInstanceCountAggregateInputType | true
    _avg?: ADR_ComponentInstanceAvgAggregateInputType
    _sum?: ADR_ComponentInstanceSumAggregateInputType
    _min?: ADR_ComponentInstanceMinAggregateInputType
    _max?: ADR_ComponentInstanceMaxAggregateInputType
  }

  export type ADR_ComponentInstanceGroupByOutputType = {
    adrId: number
    instanceId: number
    impactLevel: $Enums.ImpactLevel
    _count: ADR_ComponentInstanceCountAggregateOutputType | null
    _avg: ADR_ComponentInstanceAvgAggregateOutputType | null
    _sum: ADR_ComponentInstanceSumAggregateOutputType | null
    _min: ADR_ComponentInstanceMinAggregateOutputType | null
    _max: ADR_ComponentInstanceMaxAggregateOutputType | null
  }

  type GetADR_ComponentInstanceGroupByPayload<T extends ADR_ComponentInstanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ADR_ComponentInstanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ADR_ComponentInstanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ADR_ComponentInstanceGroupByOutputType[P]>
            : GetScalarType<T[P], ADR_ComponentInstanceGroupByOutputType[P]>
        }
      >
    >


  export type ADR_ComponentInstanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    adrId?: boolean
    instanceId?: boolean
    impactLevel?: boolean
    adr?: boolean | ADRDefaultArgs<ExtArgs>
    instance?: boolean | ComponentInstanceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aDR_ComponentInstance"]>


  export type ADR_ComponentInstanceSelectScalar = {
    adrId?: boolean
    instanceId?: boolean
    impactLevel?: boolean
  }

  export type ADR_ComponentInstanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adr?: boolean | ADRDefaultArgs<ExtArgs>
    instance?: boolean | ComponentInstanceDefaultArgs<ExtArgs>
  }

  export type $ADR_ComponentInstancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ADR_ComponentInstance"
    objects: {
      adr: Prisma.$ADRPayload<ExtArgs>
      instance: Prisma.$ComponentInstancePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      adrId: number
      instanceId: number
      impactLevel: $Enums.ImpactLevel
    }, ExtArgs["result"]["aDR_ComponentInstance"]>
    composites: {}
  }

  type ADR_ComponentInstanceGetPayload<S extends boolean | null | undefined | ADR_ComponentInstanceDefaultArgs> = $Result.GetResult<Prisma.$ADR_ComponentInstancePayload, S>

  type ADR_ComponentInstanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ADR_ComponentInstanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ADR_ComponentInstanceCountAggregateInputType | true
    }

  export interface ADR_ComponentInstanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ADR_ComponentInstance'], meta: { name: 'ADR_ComponentInstance' } }
    /**
     * Find zero or one ADR_ComponentInstance that matches the filter.
     * @param {ADR_ComponentInstanceFindUniqueArgs} args - Arguments to find a ADR_ComponentInstance
     * @example
     * // Get one ADR_ComponentInstance
     * const aDR_ComponentInstance = await prisma.aDR_ComponentInstance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ADR_ComponentInstanceFindUniqueArgs>(args: SelectSubset<T, ADR_ComponentInstanceFindUniqueArgs<ExtArgs>>): Prisma__ADR_ComponentInstanceClient<$Result.GetResult<Prisma.$ADR_ComponentInstancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ADR_ComponentInstance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ADR_ComponentInstanceFindUniqueOrThrowArgs} args - Arguments to find a ADR_ComponentInstance
     * @example
     * // Get one ADR_ComponentInstance
     * const aDR_ComponentInstance = await prisma.aDR_ComponentInstance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ADR_ComponentInstanceFindUniqueOrThrowArgs>(args: SelectSubset<T, ADR_ComponentInstanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ADR_ComponentInstanceClient<$Result.GetResult<Prisma.$ADR_ComponentInstancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ADR_ComponentInstance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ComponentInstanceFindFirstArgs} args - Arguments to find a ADR_ComponentInstance
     * @example
     * // Get one ADR_ComponentInstance
     * const aDR_ComponentInstance = await prisma.aDR_ComponentInstance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ADR_ComponentInstanceFindFirstArgs>(args?: SelectSubset<T, ADR_ComponentInstanceFindFirstArgs<ExtArgs>>): Prisma__ADR_ComponentInstanceClient<$Result.GetResult<Prisma.$ADR_ComponentInstancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ADR_ComponentInstance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ComponentInstanceFindFirstOrThrowArgs} args - Arguments to find a ADR_ComponentInstance
     * @example
     * // Get one ADR_ComponentInstance
     * const aDR_ComponentInstance = await prisma.aDR_ComponentInstance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ADR_ComponentInstanceFindFirstOrThrowArgs>(args?: SelectSubset<T, ADR_ComponentInstanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ADR_ComponentInstanceClient<$Result.GetResult<Prisma.$ADR_ComponentInstancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ADR_ComponentInstances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ComponentInstanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ADR_ComponentInstances
     * const aDR_ComponentInstances = await prisma.aDR_ComponentInstance.findMany()
     * 
     * // Get first 10 ADR_ComponentInstances
     * const aDR_ComponentInstances = await prisma.aDR_ComponentInstance.findMany({ take: 10 })
     * 
     * // Only select the `adrId`
     * const aDR_ComponentInstanceWithAdrIdOnly = await prisma.aDR_ComponentInstance.findMany({ select: { adrId: true } })
     * 
     */
    findMany<T extends ADR_ComponentInstanceFindManyArgs>(args?: SelectSubset<T, ADR_ComponentInstanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ADR_ComponentInstancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ADR_ComponentInstance.
     * @param {ADR_ComponentInstanceCreateArgs} args - Arguments to create a ADR_ComponentInstance.
     * @example
     * // Create one ADR_ComponentInstance
     * const ADR_ComponentInstance = await prisma.aDR_ComponentInstance.create({
     *   data: {
     *     // ... data to create a ADR_ComponentInstance
     *   }
     * })
     * 
     */
    create<T extends ADR_ComponentInstanceCreateArgs>(args: SelectSubset<T, ADR_ComponentInstanceCreateArgs<ExtArgs>>): Prisma__ADR_ComponentInstanceClient<$Result.GetResult<Prisma.$ADR_ComponentInstancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ADR_ComponentInstances.
     * @param {ADR_ComponentInstanceCreateManyArgs} args - Arguments to create many ADR_ComponentInstances.
     * @example
     * // Create many ADR_ComponentInstances
     * const aDR_ComponentInstance = await prisma.aDR_ComponentInstance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ADR_ComponentInstanceCreateManyArgs>(args?: SelectSubset<T, ADR_ComponentInstanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ADR_ComponentInstance.
     * @param {ADR_ComponentInstanceDeleteArgs} args - Arguments to delete one ADR_ComponentInstance.
     * @example
     * // Delete one ADR_ComponentInstance
     * const ADR_ComponentInstance = await prisma.aDR_ComponentInstance.delete({
     *   where: {
     *     // ... filter to delete one ADR_ComponentInstance
     *   }
     * })
     * 
     */
    delete<T extends ADR_ComponentInstanceDeleteArgs>(args: SelectSubset<T, ADR_ComponentInstanceDeleteArgs<ExtArgs>>): Prisma__ADR_ComponentInstanceClient<$Result.GetResult<Prisma.$ADR_ComponentInstancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ADR_ComponentInstance.
     * @param {ADR_ComponentInstanceUpdateArgs} args - Arguments to update one ADR_ComponentInstance.
     * @example
     * // Update one ADR_ComponentInstance
     * const aDR_ComponentInstance = await prisma.aDR_ComponentInstance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ADR_ComponentInstanceUpdateArgs>(args: SelectSubset<T, ADR_ComponentInstanceUpdateArgs<ExtArgs>>): Prisma__ADR_ComponentInstanceClient<$Result.GetResult<Prisma.$ADR_ComponentInstancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ADR_ComponentInstances.
     * @param {ADR_ComponentInstanceDeleteManyArgs} args - Arguments to filter ADR_ComponentInstances to delete.
     * @example
     * // Delete a few ADR_ComponentInstances
     * const { count } = await prisma.aDR_ComponentInstance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ADR_ComponentInstanceDeleteManyArgs>(args?: SelectSubset<T, ADR_ComponentInstanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ADR_ComponentInstances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ComponentInstanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ADR_ComponentInstances
     * const aDR_ComponentInstance = await prisma.aDR_ComponentInstance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ADR_ComponentInstanceUpdateManyArgs>(args: SelectSubset<T, ADR_ComponentInstanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ADR_ComponentInstance.
     * @param {ADR_ComponentInstanceUpsertArgs} args - Arguments to update or create a ADR_ComponentInstance.
     * @example
     * // Update or create a ADR_ComponentInstance
     * const aDR_ComponentInstance = await prisma.aDR_ComponentInstance.upsert({
     *   create: {
     *     // ... data to create a ADR_ComponentInstance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ADR_ComponentInstance we want to update
     *   }
     * })
     */
    upsert<T extends ADR_ComponentInstanceUpsertArgs>(args: SelectSubset<T, ADR_ComponentInstanceUpsertArgs<ExtArgs>>): Prisma__ADR_ComponentInstanceClient<$Result.GetResult<Prisma.$ADR_ComponentInstancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ADR_ComponentInstances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ComponentInstanceCountArgs} args - Arguments to filter ADR_ComponentInstances to count.
     * @example
     * // Count the number of ADR_ComponentInstances
     * const count = await prisma.aDR_ComponentInstance.count({
     *   where: {
     *     // ... the filter for the ADR_ComponentInstances we want to count
     *   }
     * })
    **/
    count<T extends ADR_ComponentInstanceCountArgs>(
      args?: Subset<T, ADR_ComponentInstanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ADR_ComponentInstanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ADR_ComponentInstance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ComponentInstanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ADR_ComponentInstanceAggregateArgs>(args: Subset<T, ADR_ComponentInstanceAggregateArgs>): Prisma.PrismaPromise<GetADR_ComponentInstanceAggregateType<T>>

    /**
     * Group by ADR_ComponentInstance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ComponentInstanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ADR_ComponentInstanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ADR_ComponentInstanceGroupByArgs['orderBy'] }
        : { orderBy?: ADR_ComponentInstanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ADR_ComponentInstanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetADR_ComponentInstanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ADR_ComponentInstance model
   */
  readonly fields: ADR_ComponentInstanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ADR_ComponentInstance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ADR_ComponentInstanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    adr<T extends ADRDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ADRDefaultArgs<ExtArgs>>): Prisma__ADRClient<$Result.GetResult<Prisma.$ADRPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    instance<T extends ComponentInstanceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ComponentInstanceDefaultArgs<ExtArgs>>): Prisma__ComponentInstanceClient<$Result.GetResult<Prisma.$ComponentInstancePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ADR_ComponentInstance model
   */ 
  interface ADR_ComponentInstanceFieldRefs {
    readonly adrId: FieldRef<"ADR_ComponentInstance", 'Int'>
    readonly instanceId: FieldRef<"ADR_ComponentInstance", 'Int'>
    readonly impactLevel: FieldRef<"ADR_ComponentInstance", 'ImpactLevel'>
  }
    

  // Custom InputTypes
  /**
   * ADR_ComponentInstance findUnique
   */
  export type ADR_ComponentInstanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_ComponentInstance
     */
    select?: ADR_ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInstanceInclude<ExtArgs> | null
    /**
     * Filter, which ADR_ComponentInstance to fetch.
     */
    where: ADR_ComponentInstanceWhereUniqueInput
  }

  /**
   * ADR_ComponentInstance findUniqueOrThrow
   */
  export type ADR_ComponentInstanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_ComponentInstance
     */
    select?: ADR_ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInstanceInclude<ExtArgs> | null
    /**
     * Filter, which ADR_ComponentInstance to fetch.
     */
    where: ADR_ComponentInstanceWhereUniqueInput
  }

  /**
   * ADR_ComponentInstance findFirst
   */
  export type ADR_ComponentInstanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_ComponentInstance
     */
    select?: ADR_ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInstanceInclude<ExtArgs> | null
    /**
     * Filter, which ADR_ComponentInstance to fetch.
     */
    where?: ADR_ComponentInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADR_ComponentInstances to fetch.
     */
    orderBy?: ADR_ComponentInstanceOrderByWithRelationInput | ADR_ComponentInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ADR_ComponentInstances.
     */
    cursor?: ADR_ComponentInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADR_ComponentInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADR_ComponentInstances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ADR_ComponentInstances.
     */
    distinct?: ADR_ComponentInstanceScalarFieldEnum | ADR_ComponentInstanceScalarFieldEnum[]
  }

  /**
   * ADR_ComponentInstance findFirstOrThrow
   */
  export type ADR_ComponentInstanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_ComponentInstance
     */
    select?: ADR_ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInstanceInclude<ExtArgs> | null
    /**
     * Filter, which ADR_ComponentInstance to fetch.
     */
    where?: ADR_ComponentInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADR_ComponentInstances to fetch.
     */
    orderBy?: ADR_ComponentInstanceOrderByWithRelationInput | ADR_ComponentInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ADR_ComponentInstances.
     */
    cursor?: ADR_ComponentInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADR_ComponentInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADR_ComponentInstances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ADR_ComponentInstances.
     */
    distinct?: ADR_ComponentInstanceScalarFieldEnum | ADR_ComponentInstanceScalarFieldEnum[]
  }

  /**
   * ADR_ComponentInstance findMany
   */
  export type ADR_ComponentInstanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_ComponentInstance
     */
    select?: ADR_ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInstanceInclude<ExtArgs> | null
    /**
     * Filter, which ADR_ComponentInstances to fetch.
     */
    where?: ADR_ComponentInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADR_ComponentInstances to fetch.
     */
    orderBy?: ADR_ComponentInstanceOrderByWithRelationInput | ADR_ComponentInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ADR_ComponentInstances.
     */
    cursor?: ADR_ComponentInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADR_ComponentInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADR_ComponentInstances.
     */
    skip?: number
    distinct?: ADR_ComponentInstanceScalarFieldEnum | ADR_ComponentInstanceScalarFieldEnum[]
  }

  /**
   * ADR_ComponentInstance create
   */
  export type ADR_ComponentInstanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_ComponentInstance
     */
    select?: ADR_ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInstanceInclude<ExtArgs> | null
    /**
     * The data needed to create a ADR_ComponentInstance.
     */
    data: XOR<ADR_ComponentInstanceCreateInput, ADR_ComponentInstanceUncheckedCreateInput>
  }

  /**
   * ADR_ComponentInstance createMany
   */
  export type ADR_ComponentInstanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ADR_ComponentInstances.
     */
    data: ADR_ComponentInstanceCreateManyInput | ADR_ComponentInstanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ADR_ComponentInstance update
   */
  export type ADR_ComponentInstanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_ComponentInstance
     */
    select?: ADR_ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInstanceInclude<ExtArgs> | null
    /**
     * The data needed to update a ADR_ComponentInstance.
     */
    data: XOR<ADR_ComponentInstanceUpdateInput, ADR_ComponentInstanceUncheckedUpdateInput>
    /**
     * Choose, which ADR_ComponentInstance to update.
     */
    where: ADR_ComponentInstanceWhereUniqueInput
  }

  /**
   * ADR_ComponentInstance updateMany
   */
  export type ADR_ComponentInstanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ADR_ComponentInstances.
     */
    data: XOR<ADR_ComponentInstanceUpdateManyMutationInput, ADR_ComponentInstanceUncheckedUpdateManyInput>
    /**
     * Filter which ADR_ComponentInstances to update
     */
    where?: ADR_ComponentInstanceWhereInput
  }

  /**
   * ADR_ComponentInstance upsert
   */
  export type ADR_ComponentInstanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_ComponentInstance
     */
    select?: ADR_ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInstanceInclude<ExtArgs> | null
    /**
     * The filter to search for the ADR_ComponentInstance to update in case it exists.
     */
    where: ADR_ComponentInstanceWhereUniqueInput
    /**
     * In case the ADR_ComponentInstance found by the `where` argument doesn't exist, create a new ADR_ComponentInstance with this data.
     */
    create: XOR<ADR_ComponentInstanceCreateInput, ADR_ComponentInstanceUncheckedCreateInput>
    /**
     * In case the ADR_ComponentInstance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ADR_ComponentInstanceUpdateInput, ADR_ComponentInstanceUncheckedUpdateInput>
  }

  /**
   * ADR_ComponentInstance delete
   */
  export type ADR_ComponentInstanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_ComponentInstance
     */
    select?: ADR_ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInstanceInclude<ExtArgs> | null
    /**
     * Filter which ADR_ComponentInstance to delete.
     */
    where: ADR_ComponentInstanceWhereUniqueInput
  }

  /**
   * ADR_ComponentInstance deleteMany
   */
  export type ADR_ComponentInstanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ADR_ComponentInstances to delete
     */
    where?: ADR_ComponentInstanceWhereInput
  }

  /**
   * ADR_ComponentInstance without action
   */
  export type ADR_ComponentInstanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_ComponentInstance
     */
    select?: ADR_ComponentInstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInstanceInclude<ExtArgs> | null
  }


  /**
   * Model ADR_Component
   */

  export type AggregateADR_Component = {
    _count: ADR_ComponentCountAggregateOutputType | null
    _avg: ADR_ComponentAvgAggregateOutputType | null
    _sum: ADR_ComponentSumAggregateOutputType | null
    _min: ADR_ComponentMinAggregateOutputType | null
    _max: ADR_ComponentMaxAggregateOutputType | null
  }

  export type ADR_ComponentAvgAggregateOutputType = {
    adrId: number | null
    componentId: number | null
  }

  export type ADR_ComponentSumAggregateOutputType = {
    adrId: number | null
    componentId: number | null
  }

  export type ADR_ComponentMinAggregateOutputType = {
    adrId: number | null
    componentId: number | null
  }

  export type ADR_ComponentMaxAggregateOutputType = {
    adrId: number | null
    componentId: number | null
  }

  export type ADR_ComponentCountAggregateOutputType = {
    adrId: number
    componentId: number
    _all: number
  }


  export type ADR_ComponentAvgAggregateInputType = {
    adrId?: true
    componentId?: true
  }

  export type ADR_ComponentSumAggregateInputType = {
    adrId?: true
    componentId?: true
  }

  export type ADR_ComponentMinAggregateInputType = {
    adrId?: true
    componentId?: true
  }

  export type ADR_ComponentMaxAggregateInputType = {
    adrId?: true
    componentId?: true
  }

  export type ADR_ComponentCountAggregateInputType = {
    adrId?: true
    componentId?: true
    _all?: true
  }

  export type ADR_ComponentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ADR_Component to aggregate.
     */
    where?: ADR_ComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADR_Components to fetch.
     */
    orderBy?: ADR_ComponentOrderByWithRelationInput | ADR_ComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ADR_ComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADR_Components from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADR_Components.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ADR_Components
    **/
    _count?: true | ADR_ComponentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ADR_ComponentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ADR_ComponentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ADR_ComponentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ADR_ComponentMaxAggregateInputType
  }

  export type GetADR_ComponentAggregateType<T extends ADR_ComponentAggregateArgs> = {
        [P in keyof T & keyof AggregateADR_Component]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateADR_Component[P]>
      : GetScalarType<T[P], AggregateADR_Component[P]>
  }




  export type ADR_ComponentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ADR_ComponentWhereInput
    orderBy?: ADR_ComponentOrderByWithAggregationInput | ADR_ComponentOrderByWithAggregationInput[]
    by: ADR_ComponentScalarFieldEnum[] | ADR_ComponentScalarFieldEnum
    having?: ADR_ComponentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ADR_ComponentCountAggregateInputType | true
    _avg?: ADR_ComponentAvgAggregateInputType
    _sum?: ADR_ComponentSumAggregateInputType
    _min?: ADR_ComponentMinAggregateInputType
    _max?: ADR_ComponentMaxAggregateInputType
  }

  export type ADR_ComponentGroupByOutputType = {
    adrId: number
    componentId: number
    _count: ADR_ComponentCountAggregateOutputType | null
    _avg: ADR_ComponentAvgAggregateOutputType | null
    _sum: ADR_ComponentSumAggregateOutputType | null
    _min: ADR_ComponentMinAggregateOutputType | null
    _max: ADR_ComponentMaxAggregateOutputType | null
  }

  type GetADR_ComponentGroupByPayload<T extends ADR_ComponentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ADR_ComponentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ADR_ComponentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ADR_ComponentGroupByOutputType[P]>
            : GetScalarType<T[P], ADR_ComponentGroupByOutputType[P]>
        }
      >
    >


  export type ADR_ComponentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    adrId?: boolean
    componentId?: boolean
    adr?: boolean | ADRDefaultArgs<ExtArgs>
    component?: boolean | ComponentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aDR_Component"]>


  export type ADR_ComponentSelectScalar = {
    adrId?: boolean
    componentId?: boolean
  }

  export type ADR_ComponentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adr?: boolean | ADRDefaultArgs<ExtArgs>
    component?: boolean | ComponentDefaultArgs<ExtArgs>
  }

  export type $ADR_ComponentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ADR_Component"
    objects: {
      adr: Prisma.$ADRPayload<ExtArgs>
      component: Prisma.$ComponentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      adrId: number
      componentId: number
    }, ExtArgs["result"]["aDR_Component"]>
    composites: {}
  }

  type ADR_ComponentGetPayload<S extends boolean | null | undefined | ADR_ComponentDefaultArgs> = $Result.GetResult<Prisma.$ADR_ComponentPayload, S>

  type ADR_ComponentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ADR_ComponentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ADR_ComponentCountAggregateInputType | true
    }

  export interface ADR_ComponentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ADR_Component'], meta: { name: 'ADR_Component' } }
    /**
     * Find zero or one ADR_Component that matches the filter.
     * @param {ADR_ComponentFindUniqueArgs} args - Arguments to find a ADR_Component
     * @example
     * // Get one ADR_Component
     * const aDR_Component = await prisma.aDR_Component.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ADR_ComponentFindUniqueArgs>(args: SelectSubset<T, ADR_ComponentFindUniqueArgs<ExtArgs>>): Prisma__ADR_ComponentClient<$Result.GetResult<Prisma.$ADR_ComponentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ADR_Component that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ADR_ComponentFindUniqueOrThrowArgs} args - Arguments to find a ADR_Component
     * @example
     * // Get one ADR_Component
     * const aDR_Component = await prisma.aDR_Component.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ADR_ComponentFindUniqueOrThrowArgs>(args: SelectSubset<T, ADR_ComponentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ADR_ComponentClient<$Result.GetResult<Prisma.$ADR_ComponentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ADR_Component that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ComponentFindFirstArgs} args - Arguments to find a ADR_Component
     * @example
     * // Get one ADR_Component
     * const aDR_Component = await prisma.aDR_Component.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ADR_ComponentFindFirstArgs>(args?: SelectSubset<T, ADR_ComponentFindFirstArgs<ExtArgs>>): Prisma__ADR_ComponentClient<$Result.GetResult<Prisma.$ADR_ComponentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ADR_Component that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ComponentFindFirstOrThrowArgs} args - Arguments to find a ADR_Component
     * @example
     * // Get one ADR_Component
     * const aDR_Component = await prisma.aDR_Component.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ADR_ComponentFindFirstOrThrowArgs>(args?: SelectSubset<T, ADR_ComponentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ADR_ComponentClient<$Result.GetResult<Prisma.$ADR_ComponentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ADR_Components that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ComponentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ADR_Components
     * const aDR_Components = await prisma.aDR_Component.findMany()
     * 
     * // Get first 10 ADR_Components
     * const aDR_Components = await prisma.aDR_Component.findMany({ take: 10 })
     * 
     * // Only select the `adrId`
     * const aDR_ComponentWithAdrIdOnly = await prisma.aDR_Component.findMany({ select: { adrId: true } })
     * 
     */
    findMany<T extends ADR_ComponentFindManyArgs>(args?: SelectSubset<T, ADR_ComponentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ADR_ComponentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ADR_Component.
     * @param {ADR_ComponentCreateArgs} args - Arguments to create a ADR_Component.
     * @example
     * // Create one ADR_Component
     * const ADR_Component = await prisma.aDR_Component.create({
     *   data: {
     *     // ... data to create a ADR_Component
     *   }
     * })
     * 
     */
    create<T extends ADR_ComponentCreateArgs>(args: SelectSubset<T, ADR_ComponentCreateArgs<ExtArgs>>): Prisma__ADR_ComponentClient<$Result.GetResult<Prisma.$ADR_ComponentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ADR_Components.
     * @param {ADR_ComponentCreateManyArgs} args - Arguments to create many ADR_Components.
     * @example
     * // Create many ADR_Components
     * const aDR_Component = await prisma.aDR_Component.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ADR_ComponentCreateManyArgs>(args?: SelectSubset<T, ADR_ComponentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ADR_Component.
     * @param {ADR_ComponentDeleteArgs} args - Arguments to delete one ADR_Component.
     * @example
     * // Delete one ADR_Component
     * const ADR_Component = await prisma.aDR_Component.delete({
     *   where: {
     *     // ... filter to delete one ADR_Component
     *   }
     * })
     * 
     */
    delete<T extends ADR_ComponentDeleteArgs>(args: SelectSubset<T, ADR_ComponentDeleteArgs<ExtArgs>>): Prisma__ADR_ComponentClient<$Result.GetResult<Prisma.$ADR_ComponentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ADR_Component.
     * @param {ADR_ComponentUpdateArgs} args - Arguments to update one ADR_Component.
     * @example
     * // Update one ADR_Component
     * const aDR_Component = await prisma.aDR_Component.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ADR_ComponentUpdateArgs>(args: SelectSubset<T, ADR_ComponentUpdateArgs<ExtArgs>>): Prisma__ADR_ComponentClient<$Result.GetResult<Prisma.$ADR_ComponentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ADR_Components.
     * @param {ADR_ComponentDeleteManyArgs} args - Arguments to filter ADR_Components to delete.
     * @example
     * // Delete a few ADR_Components
     * const { count } = await prisma.aDR_Component.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ADR_ComponentDeleteManyArgs>(args?: SelectSubset<T, ADR_ComponentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ADR_Components.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ComponentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ADR_Components
     * const aDR_Component = await prisma.aDR_Component.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ADR_ComponentUpdateManyArgs>(args: SelectSubset<T, ADR_ComponentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ADR_Component.
     * @param {ADR_ComponentUpsertArgs} args - Arguments to update or create a ADR_Component.
     * @example
     * // Update or create a ADR_Component
     * const aDR_Component = await prisma.aDR_Component.upsert({
     *   create: {
     *     // ... data to create a ADR_Component
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ADR_Component we want to update
     *   }
     * })
     */
    upsert<T extends ADR_ComponentUpsertArgs>(args: SelectSubset<T, ADR_ComponentUpsertArgs<ExtArgs>>): Prisma__ADR_ComponentClient<$Result.GetResult<Prisma.$ADR_ComponentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ADR_Components.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ComponentCountArgs} args - Arguments to filter ADR_Components to count.
     * @example
     * // Count the number of ADR_Components
     * const count = await prisma.aDR_Component.count({
     *   where: {
     *     // ... the filter for the ADR_Components we want to count
     *   }
     * })
    **/
    count<T extends ADR_ComponentCountArgs>(
      args?: Subset<T, ADR_ComponentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ADR_ComponentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ADR_Component.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ComponentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ADR_ComponentAggregateArgs>(args: Subset<T, ADR_ComponentAggregateArgs>): Prisma.PrismaPromise<GetADR_ComponentAggregateType<T>>

    /**
     * Group by ADR_Component.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADR_ComponentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ADR_ComponentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ADR_ComponentGroupByArgs['orderBy'] }
        : { orderBy?: ADR_ComponentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ADR_ComponentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetADR_ComponentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ADR_Component model
   */
  readonly fields: ADR_ComponentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ADR_Component.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ADR_ComponentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    adr<T extends ADRDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ADRDefaultArgs<ExtArgs>>): Prisma__ADRClient<$Result.GetResult<Prisma.$ADRPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    component<T extends ComponentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ComponentDefaultArgs<ExtArgs>>): Prisma__ComponentClient<$Result.GetResult<Prisma.$ComponentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ADR_Component model
   */ 
  interface ADR_ComponentFieldRefs {
    readonly adrId: FieldRef<"ADR_Component", 'Int'>
    readonly componentId: FieldRef<"ADR_Component", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ADR_Component findUnique
   */
  export type ADR_ComponentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Component
     */
    select?: ADR_ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInclude<ExtArgs> | null
    /**
     * Filter, which ADR_Component to fetch.
     */
    where: ADR_ComponentWhereUniqueInput
  }

  /**
   * ADR_Component findUniqueOrThrow
   */
  export type ADR_ComponentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Component
     */
    select?: ADR_ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInclude<ExtArgs> | null
    /**
     * Filter, which ADR_Component to fetch.
     */
    where: ADR_ComponentWhereUniqueInput
  }

  /**
   * ADR_Component findFirst
   */
  export type ADR_ComponentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Component
     */
    select?: ADR_ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInclude<ExtArgs> | null
    /**
     * Filter, which ADR_Component to fetch.
     */
    where?: ADR_ComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADR_Components to fetch.
     */
    orderBy?: ADR_ComponentOrderByWithRelationInput | ADR_ComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ADR_Components.
     */
    cursor?: ADR_ComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADR_Components from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADR_Components.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ADR_Components.
     */
    distinct?: ADR_ComponentScalarFieldEnum | ADR_ComponentScalarFieldEnum[]
  }

  /**
   * ADR_Component findFirstOrThrow
   */
  export type ADR_ComponentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Component
     */
    select?: ADR_ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInclude<ExtArgs> | null
    /**
     * Filter, which ADR_Component to fetch.
     */
    where?: ADR_ComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADR_Components to fetch.
     */
    orderBy?: ADR_ComponentOrderByWithRelationInput | ADR_ComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ADR_Components.
     */
    cursor?: ADR_ComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADR_Components from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADR_Components.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ADR_Components.
     */
    distinct?: ADR_ComponentScalarFieldEnum | ADR_ComponentScalarFieldEnum[]
  }

  /**
   * ADR_Component findMany
   */
  export type ADR_ComponentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Component
     */
    select?: ADR_ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInclude<ExtArgs> | null
    /**
     * Filter, which ADR_Components to fetch.
     */
    where?: ADR_ComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADR_Components to fetch.
     */
    orderBy?: ADR_ComponentOrderByWithRelationInput | ADR_ComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ADR_Components.
     */
    cursor?: ADR_ComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADR_Components from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADR_Components.
     */
    skip?: number
    distinct?: ADR_ComponentScalarFieldEnum | ADR_ComponentScalarFieldEnum[]
  }

  /**
   * ADR_Component create
   */
  export type ADR_ComponentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Component
     */
    select?: ADR_ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInclude<ExtArgs> | null
    /**
     * The data needed to create a ADR_Component.
     */
    data: XOR<ADR_ComponentCreateInput, ADR_ComponentUncheckedCreateInput>
  }

  /**
   * ADR_Component createMany
   */
  export type ADR_ComponentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ADR_Components.
     */
    data: ADR_ComponentCreateManyInput | ADR_ComponentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ADR_Component update
   */
  export type ADR_ComponentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Component
     */
    select?: ADR_ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInclude<ExtArgs> | null
    /**
     * The data needed to update a ADR_Component.
     */
    data: XOR<ADR_ComponentUpdateInput, ADR_ComponentUncheckedUpdateInput>
    /**
     * Choose, which ADR_Component to update.
     */
    where: ADR_ComponentWhereUniqueInput
  }

  /**
   * ADR_Component updateMany
   */
  export type ADR_ComponentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ADR_Components.
     */
    data: XOR<ADR_ComponentUpdateManyMutationInput, ADR_ComponentUncheckedUpdateManyInput>
    /**
     * Filter which ADR_Components to update
     */
    where?: ADR_ComponentWhereInput
  }

  /**
   * ADR_Component upsert
   */
  export type ADR_ComponentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Component
     */
    select?: ADR_ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInclude<ExtArgs> | null
    /**
     * The filter to search for the ADR_Component to update in case it exists.
     */
    where: ADR_ComponentWhereUniqueInput
    /**
     * In case the ADR_Component found by the `where` argument doesn't exist, create a new ADR_Component with this data.
     */
    create: XOR<ADR_ComponentCreateInput, ADR_ComponentUncheckedCreateInput>
    /**
     * In case the ADR_Component was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ADR_ComponentUpdateInput, ADR_ComponentUncheckedUpdateInput>
  }

  /**
   * ADR_Component delete
   */
  export type ADR_ComponentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Component
     */
    select?: ADR_ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInclude<ExtArgs> | null
    /**
     * Filter which ADR_Component to delete.
     */
    where: ADR_ComponentWhereUniqueInput
  }

  /**
   * ADR_Component deleteMany
   */
  export type ADR_ComponentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ADR_Components to delete
     */
    where?: ADR_ComponentWhereInput
  }

  /**
   * ADR_Component without action
   */
  export type ADR_ComponentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADR_Component
     */
    select?: ADR_ComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADR_ComponentInclude<ExtArgs> | null
  }


  /**
   * Model RoadmapItem
   */

  export type AggregateRoadmapItem = {
    _count: RoadmapItemCountAggregateOutputType | null
    _avg: RoadmapItemAvgAggregateOutputType | null
    _sum: RoadmapItemSumAggregateOutputType | null
    _min: RoadmapItemMinAggregateOutputType | null
    _max: RoadmapItemMaxAggregateOutputType | null
  }

  export type RoadmapItemAvgAggregateOutputType = {
    id: number | null
    componentId: number | null
    typeId: number | null
  }

  export type RoadmapItemSumAggregateOutputType = {
    id: number | null
    componentId: number | null
    typeId: number | null
  }

  export type RoadmapItemMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    componentId: number | null
    typeId: number | null
    status: $Enums.RoadmapItem_status | null
    dueDate: Date | null
    createdAt: Date | null
  }

  export type RoadmapItemMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    componentId: number | null
    typeId: number | null
    status: $Enums.RoadmapItem_status | null
    dueDate: Date | null
    createdAt: Date | null
  }

  export type RoadmapItemCountAggregateOutputType = {
    id: number
    title: number
    description: number
    componentId: number
    typeId: number
    status: number
    dueDate: number
    createdAt: number
    _all: number
  }


  export type RoadmapItemAvgAggregateInputType = {
    id?: true
    componentId?: true
    typeId?: true
  }

  export type RoadmapItemSumAggregateInputType = {
    id?: true
    componentId?: true
    typeId?: true
  }

  export type RoadmapItemMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    componentId?: true
    typeId?: true
    status?: true
    dueDate?: true
    createdAt?: true
  }

  export type RoadmapItemMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    componentId?: true
    typeId?: true
    status?: true
    dueDate?: true
    createdAt?: true
  }

  export type RoadmapItemCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    componentId?: true
    typeId?: true
    status?: true
    dueDate?: true
    createdAt?: true
    _all?: true
  }

  export type RoadmapItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoadmapItem to aggregate.
     */
    where?: RoadmapItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadmapItems to fetch.
     */
    orderBy?: RoadmapItemOrderByWithRelationInput | RoadmapItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoadmapItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadmapItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadmapItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoadmapItems
    **/
    _count?: true | RoadmapItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoadmapItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoadmapItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoadmapItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoadmapItemMaxAggregateInputType
  }

  export type GetRoadmapItemAggregateType<T extends RoadmapItemAggregateArgs> = {
        [P in keyof T & keyof AggregateRoadmapItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoadmapItem[P]>
      : GetScalarType<T[P], AggregateRoadmapItem[P]>
  }




  export type RoadmapItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoadmapItemWhereInput
    orderBy?: RoadmapItemOrderByWithAggregationInput | RoadmapItemOrderByWithAggregationInput[]
    by: RoadmapItemScalarFieldEnum[] | RoadmapItemScalarFieldEnum
    having?: RoadmapItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoadmapItemCountAggregateInputType | true
    _avg?: RoadmapItemAvgAggregateInputType
    _sum?: RoadmapItemSumAggregateInputType
    _min?: RoadmapItemMinAggregateInputType
    _max?: RoadmapItemMaxAggregateInputType
  }

  export type RoadmapItemGroupByOutputType = {
    id: number
    title: string
    description: string | null
    componentId: number | null
    typeId: number
    status: $Enums.RoadmapItem_status
    dueDate: Date | null
    createdAt: Date
    _count: RoadmapItemCountAggregateOutputType | null
    _avg: RoadmapItemAvgAggregateOutputType | null
    _sum: RoadmapItemSumAggregateOutputType | null
    _min: RoadmapItemMinAggregateOutputType | null
    _max: RoadmapItemMaxAggregateOutputType | null
  }

  type GetRoadmapItemGroupByPayload<T extends RoadmapItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoadmapItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoadmapItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoadmapItemGroupByOutputType[P]>
            : GetScalarType<T[P], RoadmapItemGroupByOutputType[P]>
        }
      >
    >


  export type RoadmapItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    componentId?: boolean
    typeId?: boolean
    status?: boolean
    dueDate?: boolean
    createdAt?: boolean
    type?: boolean | RoadmapTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roadmapItem"]>


  export type RoadmapItemSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    componentId?: boolean
    typeId?: boolean
    status?: boolean
    dueDate?: boolean
    createdAt?: boolean
  }

  export type RoadmapItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    type?: boolean | RoadmapTypeDefaultArgs<ExtArgs>
  }

  export type $RoadmapItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoadmapItem"
    objects: {
      type: Prisma.$RoadmapTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string | null
      componentId: number | null
      typeId: number
      status: $Enums.RoadmapItem_status
      dueDate: Date | null
      createdAt: Date
    }, ExtArgs["result"]["roadmapItem"]>
    composites: {}
  }

  type RoadmapItemGetPayload<S extends boolean | null | undefined | RoadmapItemDefaultArgs> = $Result.GetResult<Prisma.$RoadmapItemPayload, S>

  type RoadmapItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoadmapItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoadmapItemCountAggregateInputType | true
    }

  export interface RoadmapItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoadmapItem'], meta: { name: 'RoadmapItem' } }
    /**
     * Find zero or one RoadmapItem that matches the filter.
     * @param {RoadmapItemFindUniqueArgs} args - Arguments to find a RoadmapItem
     * @example
     * // Get one RoadmapItem
     * const roadmapItem = await prisma.roadmapItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoadmapItemFindUniqueArgs>(args: SelectSubset<T, RoadmapItemFindUniqueArgs<ExtArgs>>): Prisma__RoadmapItemClient<$Result.GetResult<Prisma.$RoadmapItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RoadmapItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RoadmapItemFindUniqueOrThrowArgs} args - Arguments to find a RoadmapItem
     * @example
     * // Get one RoadmapItem
     * const roadmapItem = await prisma.roadmapItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoadmapItemFindUniqueOrThrowArgs>(args: SelectSubset<T, RoadmapItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoadmapItemClient<$Result.GetResult<Prisma.$RoadmapItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RoadmapItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapItemFindFirstArgs} args - Arguments to find a RoadmapItem
     * @example
     * // Get one RoadmapItem
     * const roadmapItem = await prisma.roadmapItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoadmapItemFindFirstArgs>(args?: SelectSubset<T, RoadmapItemFindFirstArgs<ExtArgs>>): Prisma__RoadmapItemClient<$Result.GetResult<Prisma.$RoadmapItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RoadmapItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapItemFindFirstOrThrowArgs} args - Arguments to find a RoadmapItem
     * @example
     * // Get one RoadmapItem
     * const roadmapItem = await prisma.roadmapItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoadmapItemFindFirstOrThrowArgs>(args?: SelectSubset<T, RoadmapItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoadmapItemClient<$Result.GetResult<Prisma.$RoadmapItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RoadmapItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoadmapItems
     * const roadmapItems = await prisma.roadmapItem.findMany()
     * 
     * // Get first 10 RoadmapItems
     * const roadmapItems = await prisma.roadmapItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roadmapItemWithIdOnly = await prisma.roadmapItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoadmapItemFindManyArgs>(args?: SelectSubset<T, RoadmapItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadmapItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RoadmapItem.
     * @param {RoadmapItemCreateArgs} args - Arguments to create a RoadmapItem.
     * @example
     * // Create one RoadmapItem
     * const RoadmapItem = await prisma.roadmapItem.create({
     *   data: {
     *     // ... data to create a RoadmapItem
     *   }
     * })
     * 
     */
    create<T extends RoadmapItemCreateArgs>(args: SelectSubset<T, RoadmapItemCreateArgs<ExtArgs>>): Prisma__RoadmapItemClient<$Result.GetResult<Prisma.$RoadmapItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RoadmapItems.
     * @param {RoadmapItemCreateManyArgs} args - Arguments to create many RoadmapItems.
     * @example
     * // Create many RoadmapItems
     * const roadmapItem = await prisma.roadmapItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoadmapItemCreateManyArgs>(args?: SelectSubset<T, RoadmapItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RoadmapItem.
     * @param {RoadmapItemDeleteArgs} args - Arguments to delete one RoadmapItem.
     * @example
     * // Delete one RoadmapItem
     * const RoadmapItem = await prisma.roadmapItem.delete({
     *   where: {
     *     // ... filter to delete one RoadmapItem
     *   }
     * })
     * 
     */
    delete<T extends RoadmapItemDeleteArgs>(args: SelectSubset<T, RoadmapItemDeleteArgs<ExtArgs>>): Prisma__RoadmapItemClient<$Result.GetResult<Prisma.$RoadmapItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RoadmapItem.
     * @param {RoadmapItemUpdateArgs} args - Arguments to update one RoadmapItem.
     * @example
     * // Update one RoadmapItem
     * const roadmapItem = await prisma.roadmapItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoadmapItemUpdateArgs>(args: SelectSubset<T, RoadmapItemUpdateArgs<ExtArgs>>): Prisma__RoadmapItemClient<$Result.GetResult<Prisma.$RoadmapItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RoadmapItems.
     * @param {RoadmapItemDeleteManyArgs} args - Arguments to filter RoadmapItems to delete.
     * @example
     * // Delete a few RoadmapItems
     * const { count } = await prisma.roadmapItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoadmapItemDeleteManyArgs>(args?: SelectSubset<T, RoadmapItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoadmapItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoadmapItems
     * const roadmapItem = await prisma.roadmapItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoadmapItemUpdateManyArgs>(args: SelectSubset<T, RoadmapItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RoadmapItem.
     * @param {RoadmapItemUpsertArgs} args - Arguments to update or create a RoadmapItem.
     * @example
     * // Update or create a RoadmapItem
     * const roadmapItem = await prisma.roadmapItem.upsert({
     *   create: {
     *     // ... data to create a RoadmapItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoadmapItem we want to update
     *   }
     * })
     */
    upsert<T extends RoadmapItemUpsertArgs>(args: SelectSubset<T, RoadmapItemUpsertArgs<ExtArgs>>): Prisma__RoadmapItemClient<$Result.GetResult<Prisma.$RoadmapItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RoadmapItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapItemCountArgs} args - Arguments to filter RoadmapItems to count.
     * @example
     * // Count the number of RoadmapItems
     * const count = await prisma.roadmapItem.count({
     *   where: {
     *     // ... the filter for the RoadmapItems we want to count
     *   }
     * })
    **/
    count<T extends RoadmapItemCountArgs>(
      args?: Subset<T, RoadmapItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoadmapItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoadmapItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoadmapItemAggregateArgs>(args: Subset<T, RoadmapItemAggregateArgs>): Prisma.PrismaPromise<GetRoadmapItemAggregateType<T>>

    /**
     * Group by RoadmapItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoadmapItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoadmapItemGroupByArgs['orderBy'] }
        : { orderBy?: RoadmapItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoadmapItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoadmapItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoadmapItem model
   */
  readonly fields: RoadmapItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoadmapItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoadmapItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    type<T extends RoadmapTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoadmapTypeDefaultArgs<ExtArgs>>): Prisma__RoadmapTypeClient<$Result.GetResult<Prisma.$RoadmapTypePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoadmapItem model
   */ 
  interface RoadmapItemFieldRefs {
    readonly id: FieldRef<"RoadmapItem", 'Int'>
    readonly title: FieldRef<"RoadmapItem", 'String'>
    readonly description: FieldRef<"RoadmapItem", 'String'>
    readonly componentId: FieldRef<"RoadmapItem", 'Int'>
    readonly typeId: FieldRef<"RoadmapItem", 'Int'>
    readonly status: FieldRef<"RoadmapItem", 'RoadmapItem_status'>
    readonly dueDate: FieldRef<"RoadmapItem", 'DateTime'>
    readonly createdAt: FieldRef<"RoadmapItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RoadmapItem findUnique
   */
  export type RoadmapItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapItem
     */
    select?: RoadmapItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapItemInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapItem to fetch.
     */
    where: RoadmapItemWhereUniqueInput
  }

  /**
   * RoadmapItem findUniqueOrThrow
   */
  export type RoadmapItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapItem
     */
    select?: RoadmapItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapItemInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapItem to fetch.
     */
    where: RoadmapItemWhereUniqueInput
  }

  /**
   * RoadmapItem findFirst
   */
  export type RoadmapItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapItem
     */
    select?: RoadmapItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapItemInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapItem to fetch.
     */
    where?: RoadmapItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadmapItems to fetch.
     */
    orderBy?: RoadmapItemOrderByWithRelationInput | RoadmapItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoadmapItems.
     */
    cursor?: RoadmapItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadmapItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadmapItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoadmapItems.
     */
    distinct?: RoadmapItemScalarFieldEnum | RoadmapItemScalarFieldEnum[]
  }

  /**
   * RoadmapItem findFirstOrThrow
   */
  export type RoadmapItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapItem
     */
    select?: RoadmapItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapItemInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapItem to fetch.
     */
    where?: RoadmapItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadmapItems to fetch.
     */
    orderBy?: RoadmapItemOrderByWithRelationInput | RoadmapItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoadmapItems.
     */
    cursor?: RoadmapItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadmapItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadmapItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoadmapItems.
     */
    distinct?: RoadmapItemScalarFieldEnum | RoadmapItemScalarFieldEnum[]
  }

  /**
   * RoadmapItem findMany
   */
  export type RoadmapItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapItem
     */
    select?: RoadmapItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapItemInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapItems to fetch.
     */
    where?: RoadmapItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadmapItems to fetch.
     */
    orderBy?: RoadmapItemOrderByWithRelationInput | RoadmapItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoadmapItems.
     */
    cursor?: RoadmapItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadmapItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadmapItems.
     */
    skip?: number
    distinct?: RoadmapItemScalarFieldEnum | RoadmapItemScalarFieldEnum[]
  }

  /**
   * RoadmapItem create
   */
  export type RoadmapItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapItem
     */
    select?: RoadmapItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapItemInclude<ExtArgs> | null
    /**
     * The data needed to create a RoadmapItem.
     */
    data: XOR<RoadmapItemCreateInput, RoadmapItemUncheckedCreateInput>
  }

  /**
   * RoadmapItem createMany
   */
  export type RoadmapItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoadmapItems.
     */
    data: RoadmapItemCreateManyInput | RoadmapItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RoadmapItem update
   */
  export type RoadmapItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapItem
     */
    select?: RoadmapItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapItemInclude<ExtArgs> | null
    /**
     * The data needed to update a RoadmapItem.
     */
    data: XOR<RoadmapItemUpdateInput, RoadmapItemUncheckedUpdateInput>
    /**
     * Choose, which RoadmapItem to update.
     */
    where: RoadmapItemWhereUniqueInput
  }

  /**
   * RoadmapItem updateMany
   */
  export type RoadmapItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoadmapItems.
     */
    data: XOR<RoadmapItemUpdateManyMutationInput, RoadmapItemUncheckedUpdateManyInput>
    /**
     * Filter which RoadmapItems to update
     */
    where?: RoadmapItemWhereInput
  }

  /**
   * RoadmapItem upsert
   */
  export type RoadmapItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapItem
     */
    select?: RoadmapItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapItemInclude<ExtArgs> | null
    /**
     * The filter to search for the RoadmapItem to update in case it exists.
     */
    where: RoadmapItemWhereUniqueInput
    /**
     * In case the RoadmapItem found by the `where` argument doesn't exist, create a new RoadmapItem with this data.
     */
    create: XOR<RoadmapItemCreateInput, RoadmapItemUncheckedCreateInput>
    /**
     * In case the RoadmapItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoadmapItemUpdateInput, RoadmapItemUncheckedUpdateInput>
  }

  /**
   * RoadmapItem delete
   */
  export type RoadmapItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapItem
     */
    select?: RoadmapItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapItemInclude<ExtArgs> | null
    /**
     * Filter which RoadmapItem to delete.
     */
    where: RoadmapItemWhereUniqueInput
  }

  /**
   * RoadmapItem deleteMany
   */
  export type RoadmapItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoadmapItems to delete
     */
    where?: RoadmapItemWhereInput
  }

  /**
   * RoadmapItem without action
   */
  export type RoadmapItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapItem
     */
    select?: RoadmapItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapItemInclude<ExtArgs> | null
  }


  /**
   * Model RoadmapType
   */

  export type AggregateRoadmapType = {
    _count: RoadmapTypeCountAggregateOutputType | null
    _avg: RoadmapTypeAvgAggregateOutputType | null
    _sum: RoadmapTypeSumAggregateOutputType | null
    _min: RoadmapTypeMinAggregateOutputType | null
    _max: RoadmapTypeMaxAggregateOutputType | null
  }

  export type RoadmapTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type RoadmapTypeSumAggregateOutputType = {
    id: number | null
  }

  export type RoadmapTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    colorHex: string | null
    createdAt: Date | null
  }

  export type RoadmapTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    colorHex: string | null
    createdAt: Date | null
  }

  export type RoadmapTypeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    colorHex: number
    createdAt: number
    _all: number
  }


  export type RoadmapTypeAvgAggregateInputType = {
    id?: true
  }

  export type RoadmapTypeSumAggregateInputType = {
    id?: true
  }

  export type RoadmapTypeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    colorHex?: true
    createdAt?: true
  }

  export type RoadmapTypeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    colorHex?: true
    createdAt?: true
  }

  export type RoadmapTypeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    colorHex?: true
    createdAt?: true
    _all?: true
  }

  export type RoadmapTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoadmapType to aggregate.
     */
    where?: RoadmapTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadmapTypes to fetch.
     */
    orderBy?: RoadmapTypeOrderByWithRelationInput | RoadmapTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoadmapTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadmapTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadmapTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoadmapTypes
    **/
    _count?: true | RoadmapTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoadmapTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoadmapTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoadmapTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoadmapTypeMaxAggregateInputType
  }

  export type GetRoadmapTypeAggregateType<T extends RoadmapTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateRoadmapType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoadmapType[P]>
      : GetScalarType<T[P], AggregateRoadmapType[P]>
  }




  export type RoadmapTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoadmapTypeWhereInput
    orderBy?: RoadmapTypeOrderByWithAggregationInput | RoadmapTypeOrderByWithAggregationInput[]
    by: RoadmapTypeScalarFieldEnum[] | RoadmapTypeScalarFieldEnum
    having?: RoadmapTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoadmapTypeCountAggregateInputType | true
    _avg?: RoadmapTypeAvgAggregateInputType
    _sum?: RoadmapTypeSumAggregateInputType
    _min?: RoadmapTypeMinAggregateInputType
    _max?: RoadmapTypeMaxAggregateInputType
  }

  export type RoadmapTypeGroupByOutputType = {
    id: number
    name: string
    description: string | null
    colorHex: string | null
    createdAt: Date
    _count: RoadmapTypeCountAggregateOutputType | null
    _avg: RoadmapTypeAvgAggregateOutputType | null
    _sum: RoadmapTypeSumAggregateOutputType | null
    _min: RoadmapTypeMinAggregateOutputType | null
    _max: RoadmapTypeMaxAggregateOutputType | null
  }

  type GetRoadmapTypeGroupByPayload<T extends RoadmapTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoadmapTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoadmapTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoadmapTypeGroupByOutputType[P]>
            : GetScalarType<T[P], RoadmapTypeGroupByOutputType[P]>
        }
      >
    >


  export type RoadmapTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    colorHex?: boolean
    createdAt?: boolean
    items?: boolean | RoadmapType$itemsArgs<ExtArgs>
    _count?: boolean | RoadmapTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roadmapType"]>


  export type RoadmapTypeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    colorHex?: boolean
    createdAt?: boolean
  }

  export type RoadmapTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | RoadmapType$itemsArgs<ExtArgs>
    _count?: boolean | RoadmapTypeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RoadmapTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoadmapType"
    objects: {
      items: Prisma.$RoadmapItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      colorHex: string | null
      createdAt: Date
    }, ExtArgs["result"]["roadmapType"]>
    composites: {}
  }

  type RoadmapTypeGetPayload<S extends boolean | null | undefined | RoadmapTypeDefaultArgs> = $Result.GetResult<Prisma.$RoadmapTypePayload, S>

  type RoadmapTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoadmapTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoadmapTypeCountAggregateInputType | true
    }

  export interface RoadmapTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoadmapType'], meta: { name: 'RoadmapType' } }
    /**
     * Find zero or one RoadmapType that matches the filter.
     * @param {RoadmapTypeFindUniqueArgs} args - Arguments to find a RoadmapType
     * @example
     * // Get one RoadmapType
     * const roadmapType = await prisma.roadmapType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoadmapTypeFindUniqueArgs>(args: SelectSubset<T, RoadmapTypeFindUniqueArgs<ExtArgs>>): Prisma__RoadmapTypeClient<$Result.GetResult<Prisma.$RoadmapTypePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RoadmapType that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RoadmapTypeFindUniqueOrThrowArgs} args - Arguments to find a RoadmapType
     * @example
     * // Get one RoadmapType
     * const roadmapType = await prisma.roadmapType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoadmapTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, RoadmapTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoadmapTypeClient<$Result.GetResult<Prisma.$RoadmapTypePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RoadmapType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapTypeFindFirstArgs} args - Arguments to find a RoadmapType
     * @example
     * // Get one RoadmapType
     * const roadmapType = await prisma.roadmapType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoadmapTypeFindFirstArgs>(args?: SelectSubset<T, RoadmapTypeFindFirstArgs<ExtArgs>>): Prisma__RoadmapTypeClient<$Result.GetResult<Prisma.$RoadmapTypePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RoadmapType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapTypeFindFirstOrThrowArgs} args - Arguments to find a RoadmapType
     * @example
     * // Get one RoadmapType
     * const roadmapType = await prisma.roadmapType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoadmapTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, RoadmapTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoadmapTypeClient<$Result.GetResult<Prisma.$RoadmapTypePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RoadmapTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoadmapTypes
     * const roadmapTypes = await prisma.roadmapType.findMany()
     * 
     * // Get first 10 RoadmapTypes
     * const roadmapTypes = await prisma.roadmapType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roadmapTypeWithIdOnly = await prisma.roadmapType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoadmapTypeFindManyArgs>(args?: SelectSubset<T, RoadmapTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadmapTypePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RoadmapType.
     * @param {RoadmapTypeCreateArgs} args - Arguments to create a RoadmapType.
     * @example
     * // Create one RoadmapType
     * const RoadmapType = await prisma.roadmapType.create({
     *   data: {
     *     // ... data to create a RoadmapType
     *   }
     * })
     * 
     */
    create<T extends RoadmapTypeCreateArgs>(args: SelectSubset<T, RoadmapTypeCreateArgs<ExtArgs>>): Prisma__RoadmapTypeClient<$Result.GetResult<Prisma.$RoadmapTypePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RoadmapTypes.
     * @param {RoadmapTypeCreateManyArgs} args - Arguments to create many RoadmapTypes.
     * @example
     * // Create many RoadmapTypes
     * const roadmapType = await prisma.roadmapType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoadmapTypeCreateManyArgs>(args?: SelectSubset<T, RoadmapTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RoadmapType.
     * @param {RoadmapTypeDeleteArgs} args - Arguments to delete one RoadmapType.
     * @example
     * // Delete one RoadmapType
     * const RoadmapType = await prisma.roadmapType.delete({
     *   where: {
     *     // ... filter to delete one RoadmapType
     *   }
     * })
     * 
     */
    delete<T extends RoadmapTypeDeleteArgs>(args: SelectSubset<T, RoadmapTypeDeleteArgs<ExtArgs>>): Prisma__RoadmapTypeClient<$Result.GetResult<Prisma.$RoadmapTypePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RoadmapType.
     * @param {RoadmapTypeUpdateArgs} args - Arguments to update one RoadmapType.
     * @example
     * // Update one RoadmapType
     * const roadmapType = await prisma.roadmapType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoadmapTypeUpdateArgs>(args: SelectSubset<T, RoadmapTypeUpdateArgs<ExtArgs>>): Prisma__RoadmapTypeClient<$Result.GetResult<Prisma.$RoadmapTypePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RoadmapTypes.
     * @param {RoadmapTypeDeleteManyArgs} args - Arguments to filter RoadmapTypes to delete.
     * @example
     * // Delete a few RoadmapTypes
     * const { count } = await prisma.roadmapType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoadmapTypeDeleteManyArgs>(args?: SelectSubset<T, RoadmapTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoadmapTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoadmapTypes
     * const roadmapType = await prisma.roadmapType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoadmapTypeUpdateManyArgs>(args: SelectSubset<T, RoadmapTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RoadmapType.
     * @param {RoadmapTypeUpsertArgs} args - Arguments to update or create a RoadmapType.
     * @example
     * // Update or create a RoadmapType
     * const roadmapType = await prisma.roadmapType.upsert({
     *   create: {
     *     // ... data to create a RoadmapType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoadmapType we want to update
     *   }
     * })
     */
    upsert<T extends RoadmapTypeUpsertArgs>(args: SelectSubset<T, RoadmapTypeUpsertArgs<ExtArgs>>): Prisma__RoadmapTypeClient<$Result.GetResult<Prisma.$RoadmapTypePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RoadmapTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapTypeCountArgs} args - Arguments to filter RoadmapTypes to count.
     * @example
     * // Count the number of RoadmapTypes
     * const count = await prisma.roadmapType.count({
     *   where: {
     *     // ... the filter for the RoadmapTypes we want to count
     *   }
     * })
    **/
    count<T extends RoadmapTypeCountArgs>(
      args?: Subset<T, RoadmapTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoadmapTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoadmapType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoadmapTypeAggregateArgs>(args: Subset<T, RoadmapTypeAggregateArgs>): Prisma.PrismaPromise<GetRoadmapTypeAggregateType<T>>

    /**
     * Group by RoadmapType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoadmapTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoadmapTypeGroupByArgs['orderBy'] }
        : { orderBy?: RoadmapTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoadmapTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoadmapTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoadmapType model
   */
  readonly fields: RoadmapTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoadmapType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoadmapTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends RoadmapType$itemsArgs<ExtArgs> = {}>(args?: Subset<T, RoadmapType$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadmapItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoadmapType model
   */ 
  interface RoadmapTypeFieldRefs {
    readonly id: FieldRef<"RoadmapType", 'Int'>
    readonly name: FieldRef<"RoadmapType", 'String'>
    readonly description: FieldRef<"RoadmapType", 'String'>
    readonly colorHex: FieldRef<"RoadmapType", 'String'>
    readonly createdAt: FieldRef<"RoadmapType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RoadmapType findUnique
   */
  export type RoadmapTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapType
     */
    select?: RoadmapTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapTypeInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapType to fetch.
     */
    where: RoadmapTypeWhereUniqueInput
  }

  /**
   * RoadmapType findUniqueOrThrow
   */
  export type RoadmapTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapType
     */
    select?: RoadmapTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapTypeInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapType to fetch.
     */
    where: RoadmapTypeWhereUniqueInput
  }

  /**
   * RoadmapType findFirst
   */
  export type RoadmapTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapType
     */
    select?: RoadmapTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapTypeInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapType to fetch.
     */
    where?: RoadmapTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadmapTypes to fetch.
     */
    orderBy?: RoadmapTypeOrderByWithRelationInput | RoadmapTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoadmapTypes.
     */
    cursor?: RoadmapTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadmapTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadmapTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoadmapTypes.
     */
    distinct?: RoadmapTypeScalarFieldEnum | RoadmapTypeScalarFieldEnum[]
  }

  /**
   * RoadmapType findFirstOrThrow
   */
  export type RoadmapTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapType
     */
    select?: RoadmapTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapTypeInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapType to fetch.
     */
    where?: RoadmapTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadmapTypes to fetch.
     */
    orderBy?: RoadmapTypeOrderByWithRelationInput | RoadmapTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoadmapTypes.
     */
    cursor?: RoadmapTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadmapTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadmapTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoadmapTypes.
     */
    distinct?: RoadmapTypeScalarFieldEnum | RoadmapTypeScalarFieldEnum[]
  }

  /**
   * RoadmapType findMany
   */
  export type RoadmapTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapType
     */
    select?: RoadmapTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapTypeInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapTypes to fetch.
     */
    where?: RoadmapTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadmapTypes to fetch.
     */
    orderBy?: RoadmapTypeOrderByWithRelationInput | RoadmapTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoadmapTypes.
     */
    cursor?: RoadmapTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadmapTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadmapTypes.
     */
    skip?: number
    distinct?: RoadmapTypeScalarFieldEnum | RoadmapTypeScalarFieldEnum[]
  }

  /**
   * RoadmapType create
   */
  export type RoadmapTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapType
     */
    select?: RoadmapTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a RoadmapType.
     */
    data: XOR<RoadmapTypeCreateInput, RoadmapTypeUncheckedCreateInput>
  }

  /**
   * RoadmapType createMany
   */
  export type RoadmapTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoadmapTypes.
     */
    data: RoadmapTypeCreateManyInput | RoadmapTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RoadmapType update
   */
  export type RoadmapTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapType
     */
    select?: RoadmapTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a RoadmapType.
     */
    data: XOR<RoadmapTypeUpdateInput, RoadmapTypeUncheckedUpdateInput>
    /**
     * Choose, which RoadmapType to update.
     */
    where: RoadmapTypeWhereUniqueInput
  }

  /**
   * RoadmapType updateMany
   */
  export type RoadmapTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoadmapTypes.
     */
    data: XOR<RoadmapTypeUpdateManyMutationInput, RoadmapTypeUncheckedUpdateManyInput>
    /**
     * Filter which RoadmapTypes to update
     */
    where?: RoadmapTypeWhereInput
  }

  /**
   * RoadmapType upsert
   */
  export type RoadmapTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapType
     */
    select?: RoadmapTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the RoadmapType to update in case it exists.
     */
    where: RoadmapTypeWhereUniqueInput
    /**
     * In case the RoadmapType found by the `where` argument doesn't exist, create a new RoadmapType with this data.
     */
    create: XOR<RoadmapTypeCreateInput, RoadmapTypeUncheckedCreateInput>
    /**
     * In case the RoadmapType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoadmapTypeUpdateInput, RoadmapTypeUncheckedUpdateInput>
  }

  /**
   * RoadmapType delete
   */
  export type RoadmapTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapType
     */
    select?: RoadmapTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapTypeInclude<ExtArgs> | null
    /**
     * Filter which RoadmapType to delete.
     */
    where: RoadmapTypeWhereUniqueInput
  }

  /**
   * RoadmapType deleteMany
   */
  export type RoadmapTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoadmapTypes to delete
     */
    where?: RoadmapTypeWhereInput
  }

  /**
   * RoadmapType.items
   */
  export type RoadmapType$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapItem
     */
    select?: RoadmapItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapItemInclude<ExtArgs> | null
    where?: RoadmapItemWhereInput
    orderBy?: RoadmapItemOrderByWithRelationInput | RoadmapItemOrderByWithRelationInput[]
    cursor?: RoadmapItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoadmapItemScalarFieldEnum | RoadmapItemScalarFieldEnum[]
  }

  /**
   * RoadmapType without action
   */
  export type RoadmapTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapType
     */
    select?: RoadmapTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapTypeInclude<ExtArgs> | null
  }


  /**
   * Model Log
   */

  export type AggregateLog = {
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  export type LogAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type LogSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type LogMinAggregateOutputType = {
    id: number | null
    userId: number | null
    level: $Enums.LogLevel | null
    message: string | null
    createdAt: Date | null
  }

  export type LogMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    level: $Enums.LogLevel | null
    message: string | null
    createdAt: Date | null
  }

  export type LogCountAggregateOutputType = {
    id: number
    userId: number
    level: number
    message: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type LogAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type LogSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type LogMinAggregateInputType = {
    id?: true
    userId?: true
    level?: true
    message?: true
    createdAt?: true
  }

  export type LogMaxAggregateInputType = {
    id?: true
    userId?: true
    level?: true
    message?: true
    createdAt?: true
  }

  export type LogCountAggregateInputType = {
    id?: true
    userId?: true
    level?: true
    message?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type LogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Log to aggregate.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Logs
    **/
    _count?: true | LogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogMaxAggregateInputType
  }

  export type GetLogAggregateType<T extends LogAggregateArgs> = {
        [P in keyof T & keyof AggregateLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLog[P]>
      : GetScalarType<T[P], AggregateLog[P]>
  }




  export type LogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
    orderBy?: LogOrderByWithAggregationInput | LogOrderByWithAggregationInput[]
    by: LogScalarFieldEnum[] | LogScalarFieldEnum
    having?: LogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogCountAggregateInputType | true
    _avg?: LogAvgAggregateInputType
    _sum?: LogSumAggregateInputType
    _min?: LogMinAggregateInputType
    _max?: LogMaxAggregateInputType
  }

  export type LogGroupByOutputType = {
    id: number
    userId: number | null
    level: $Enums.LogLevel
    message: string
    metadata: JsonValue | null
    createdAt: Date
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  type GetLogGroupByPayload<T extends LogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogGroupByOutputType[P]>
            : GetScalarType<T[P], LogGroupByOutputType[P]>
        }
      >
    >


  export type LogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    level?: boolean
    message?: boolean
    metadata?: boolean
    createdAt?: boolean
    user?: boolean | Log$userArgs<ExtArgs>
  }, ExtArgs["result"]["log"]>


  export type LogSelectScalar = {
    id?: boolean
    userId?: boolean
    level?: boolean
    message?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type LogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Log$userArgs<ExtArgs>
  }

  export type $LogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Log"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number | null
      level: $Enums.LogLevel
      message: string
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["log"]>
    composites: {}
  }

  type LogGetPayload<S extends boolean | null | undefined | LogDefaultArgs> = $Result.GetResult<Prisma.$LogPayload, S>

  type LogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LogCountAggregateInputType | true
    }

  export interface LogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Log'], meta: { name: 'Log' } }
    /**
     * Find zero or one Log that matches the filter.
     * @param {LogFindUniqueArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LogFindUniqueArgs>(args: SelectSubset<T, LogFindUniqueArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Log that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LogFindUniqueOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LogFindUniqueOrThrowArgs>(args: SelectSubset<T, LogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Log that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LogFindFirstArgs>(args?: SelectSubset<T, LogFindFirstArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Log that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LogFindFirstOrThrowArgs>(args?: SelectSubset<T, LogFindFirstOrThrowArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logs
     * const logs = await prisma.log.findMany()
     * 
     * // Get first 10 Logs
     * const logs = await prisma.log.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logWithIdOnly = await prisma.log.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LogFindManyArgs>(args?: SelectSubset<T, LogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Log.
     * @param {LogCreateArgs} args - Arguments to create a Log.
     * @example
     * // Create one Log
     * const Log = await prisma.log.create({
     *   data: {
     *     // ... data to create a Log
     *   }
     * })
     * 
     */
    create<T extends LogCreateArgs>(args: SelectSubset<T, LogCreateArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Logs.
     * @param {LogCreateManyArgs} args - Arguments to create many Logs.
     * @example
     * // Create many Logs
     * const log = await prisma.log.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LogCreateManyArgs>(args?: SelectSubset<T, LogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Log.
     * @param {LogDeleteArgs} args - Arguments to delete one Log.
     * @example
     * // Delete one Log
     * const Log = await prisma.log.delete({
     *   where: {
     *     // ... filter to delete one Log
     *   }
     * })
     * 
     */
    delete<T extends LogDeleteArgs>(args: SelectSubset<T, LogDeleteArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Log.
     * @param {LogUpdateArgs} args - Arguments to update one Log.
     * @example
     * // Update one Log
     * const log = await prisma.log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LogUpdateArgs>(args: SelectSubset<T, LogUpdateArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Logs.
     * @param {LogDeleteManyArgs} args - Arguments to filter Logs to delete.
     * @example
     * // Delete a few Logs
     * const { count } = await prisma.log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LogDeleteManyArgs>(args?: SelectSubset<T, LogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logs
     * const log = await prisma.log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LogUpdateManyArgs>(args: SelectSubset<T, LogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Log.
     * @param {LogUpsertArgs} args - Arguments to update or create a Log.
     * @example
     * // Update or create a Log
     * const log = await prisma.log.upsert({
     *   create: {
     *     // ... data to create a Log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Log we want to update
     *   }
     * })
     */
    upsert<T extends LogUpsertArgs>(args: SelectSubset<T, LogUpsertArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogCountArgs} args - Arguments to filter Logs to count.
     * @example
     * // Count the number of Logs
     * const count = await prisma.log.count({
     *   where: {
     *     // ... the filter for the Logs we want to count
     *   }
     * })
    **/
    count<T extends LogCountArgs>(
      args?: Subset<T, LogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogAggregateArgs>(args: Subset<T, LogAggregateArgs>): Prisma.PrismaPromise<GetLogAggregateType<T>>

    /**
     * Group by Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogGroupByArgs['orderBy'] }
        : { orderBy?: LogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Log model
   */
  readonly fields: LogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Log$userArgs<ExtArgs> = {}>(args?: Subset<T, Log$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Log model
   */ 
  interface LogFieldRefs {
    readonly id: FieldRef<"Log", 'Int'>
    readonly userId: FieldRef<"Log", 'Int'>
    readonly level: FieldRef<"Log", 'LogLevel'>
    readonly message: FieldRef<"Log", 'String'>
    readonly metadata: FieldRef<"Log", 'Json'>
    readonly createdAt: FieldRef<"Log", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Log findUnique
   */
  export type LogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log findUniqueOrThrow
   */
  export type LogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log findFirst
   */
  export type LogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log findFirstOrThrow
   */
  export type LogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log findMany
   */
  export type LogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log create
   */
  export type LogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The data needed to create a Log.
     */
    data: XOR<LogCreateInput, LogUncheckedCreateInput>
  }

  /**
   * Log createMany
   */
  export type LogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Logs.
     */
    data: LogCreateManyInput | LogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Log update
   */
  export type LogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The data needed to update a Log.
     */
    data: XOR<LogUpdateInput, LogUncheckedUpdateInput>
    /**
     * Choose, which Log to update.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log updateMany
   */
  export type LogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Logs.
     */
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyInput>
    /**
     * Filter which Logs to update
     */
    where?: LogWhereInput
  }

  /**
   * Log upsert
   */
  export type LogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The filter to search for the Log to update in case it exists.
     */
    where: LogWhereUniqueInput
    /**
     * In case the Log found by the `where` argument doesn't exist, create a new Log with this data.
     */
    create: XOR<LogCreateInput, LogUncheckedCreateInput>
    /**
     * In case the Log was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogUpdateInput, LogUncheckedUpdateInput>
  }

  /**
   * Log delete
   */
  export type LogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter which Log to delete.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log deleteMany
   */
  export type LogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Logs to delete
     */
    where?: LogWhereInput
  }

  /**
   * Log.user
   */
  export type Log$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Log without action
   */
  export type LogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
  }


  /**
   * Model GlossaryTerm
   */

  export type AggregateGlossaryTerm = {
    _count: GlossaryTermCountAggregateOutputType | null
    _avg: GlossaryTermAvgAggregateOutputType | null
    _sum: GlossaryTermSumAggregateOutputType | null
    _min: GlossaryTermMinAggregateOutputType | null
    _max: GlossaryTermMaxAggregateOutputType | null
  }

  export type GlossaryTermAvgAggregateOutputType = {
    id: number | null
  }

  export type GlossaryTermSumAggregateOutputType = {
    id: number | null
  }

  export type GlossaryTermMinAggregateOutputType = {
    id: number | null
    term: string | null
    definition: string | null
    status: $Enums.GlossaryStatus | null
    createdAt: Date | null
  }

  export type GlossaryTermMaxAggregateOutputType = {
    id: number | null
    term: string | null
    definition: string | null
    status: $Enums.GlossaryStatus | null
    createdAt: Date | null
  }

  export type GlossaryTermCountAggregateOutputType = {
    id: number
    term: number
    definition: number
    status: number
    createdAt: number
    _all: number
  }


  export type GlossaryTermAvgAggregateInputType = {
    id?: true
  }

  export type GlossaryTermSumAggregateInputType = {
    id?: true
  }

  export type GlossaryTermMinAggregateInputType = {
    id?: true
    term?: true
    definition?: true
    status?: true
    createdAt?: true
  }

  export type GlossaryTermMaxAggregateInputType = {
    id?: true
    term?: true
    definition?: true
    status?: true
    createdAt?: true
  }

  export type GlossaryTermCountAggregateInputType = {
    id?: true
    term?: true
    definition?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type GlossaryTermAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GlossaryTerm to aggregate.
     */
    where?: GlossaryTermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlossaryTerms to fetch.
     */
    orderBy?: GlossaryTermOrderByWithRelationInput | GlossaryTermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GlossaryTermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlossaryTerms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlossaryTerms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GlossaryTerms
    **/
    _count?: true | GlossaryTermCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GlossaryTermAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GlossaryTermSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GlossaryTermMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GlossaryTermMaxAggregateInputType
  }

  export type GetGlossaryTermAggregateType<T extends GlossaryTermAggregateArgs> = {
        [P in keyof T & keyof AggregateGlossaryTerm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGlossaryTerm[P]>
      : GetScalarType<T[P], AggregateGlossaryTerm[P]>
  }




  export type GlossaryTermGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GlossaryTermWhereInput
    orderBy?: GlossaryTermOrderByWithAggregationInput | GlossaryTermOrderByWithAggregationInput[]
    by: GlossaryTermScalarFieldEnum[] | GlossaryTermScalarFieldEnum
    having?: GlossaryTermScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GlossaryTermCountAggregateInputType | true
    _avg?: GlossaryTermAvgAggregateInputType
    _sum?: GlossaryTermSumAggregateInputType
    _min?: GlossaryTermMinAggregateInputType
    _max?: GlossaryTermMaxAggregateInputType
  }

  export type GlossaryTermGroupByOutputType = {
    id: number
    term: string
    definition: string
    status: $Enums.GlossaryStatus
    createdAt: Date
    _count: GlossaryTermCountAggregateOutputType | null
    _avg: GlossaryTermAvgAggregateOutputType | null
    _sum: GlossaryTermSumAggregateOutputType | null
    _min: GlossaryTermMinAggregateOutputType | null
    _max: GlossaryTermMaxAggregateOutputType | null
  }

  type GetGlossaryTermGroupByPayload<T extends GlossaryTermGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GlossaryTermGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GlossaryTermGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GlossaryTermGroupByOutputType[P]>
            : GetScalarType<T[P], GlossaryTermGroupByOutputType[P]>
        }
      >
    >


  export type GlossaryTermSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    term?: boolean
    definition?: boolean
    status?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["glossaryTerm"]>


  export type GlossaryTermSelectScalar = {
    id?: boolean
    term?: boolean
    definition?: boolean
    status?: boolean
    createdAt?: boolean
  }


  export type $GlossaryTermPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GlossaryTerm"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      term: string
      definition: string
      status: $Enums.GlossaryStatus
      createdAt: Date
    }, ExtArgs["result"]["glossaryTerm"]>
    composites: {}
  }

  type GlossaryTermGetPayload<S extends boolean | null | undefined | GlossaryTermDefaultArgs> = $Result.GetResult<Prisma.$GlossaryTermPayload, S>

  type GlossaryTermCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GlossaryTermFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GlossaryTermCountAggregateInputType | true
    }

  export interface GlossaryTermDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GlossaryTerm'], meta: { name: 'GlossaryTerm' } }
    /**
     * Find zero or one GlossaryTerm that matches the filter.
     * @param {GlossaryTermFindUniqueArgs} args - Arguments to find a GlossaryTerm
     * @example
     * // Get one GlossaryTerm
     * const glossaryTerm = await prisma.glossaryTerm.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GlossaryTermFindUniqueArgs>(args: SelectSubset<T, GlossaryTermFindUniqueArgs<ExtArgs>>): Prisma__GlossaryTermClient<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GlossaryTerm that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GlossaryTermFindUniqueOrThrowArgs} args - Arguments to find a GlossaryTerm
     * @example
     * // Get one GlossaryTerm
     * const glossaryTerm = await prisma.glossaryTerm.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GlossaryTermFindUniqueOrThrowArgs>(args: SelectSubset<T, GlossaryTermFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GlossaryTermClient<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GlossaryTerm that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryTermFindFirstArgs} args - Arguments to find a GlossaryTerm
     * @example
     * // Get one GlossaryTerm
     * const glossaryTerm = await prisma.glossaryTerm.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GlossaryTermFindFirstArgs>(args?: SelectSubset<T, GlossaryTermFindFirstArgs<ExtArgs>>): Prisma__GlossaryTermClient<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GlossaryTerm that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryTermFindFirstOrThrowArgs} args - Arguments to find a GlossaryTerm
     * @example
     * // Get one GlossaryTerm
     * const glossaryTerm = await prisma.glossaryTerm.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GlossaryTermFindFirstOrThrowArgs>(args?: SelectSubset<T, GlossaryTermFindFirstOrThrowArgs<ExtArgs>>): Prisma__GlossaryTermClient<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GlossaryTerms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryTermFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GlossaryTerms
     * const glossaryTerms = await prisma.glossaryTerm.findMany()
     * 
     * // Get first 10 GlossaryTerms
     * const glossaryTerms = await prisma.glossaryTerm.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const glossaryTermWithIdOnly = await prisma.glossaryTerm.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GlossaryTermFindManyArgs>(args?: SelectSubset<T, GlossaryTermFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GlossaryTerm.
     * @param {GlossaryTermCreateArgs} args - Arguments to create a GlossaryTerm.
     * @example
     * // Create one GlossaryTerm
     * const GlossaryTerm = await prisma.glossaryTerm.create({
     *   data: {
     *     // ... data to create a GlossaryTerm
     *   }
     * })
     * 
     */
    create<T extends GlossaryTermCreateArgs>(args: SelectSubset<T, GlossaryTermCreateArgs<ExtArgs>>): Prisma__GlossaryTermClient<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GlossaryTerms.
     * @param {GlossaryTermCreateManyArgs} args - Arguments to create many GlossaryTerms.
     * @example
     * // Create many GlossaryTerms
     * const glossaryTerm = await prisma.glossaryTerm.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GlossaryTermCreateManyArgs>(args?: SelectSubset<T, GlossaryTermCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GlossaryTerm.
     * @param {GlossaryTermDeleteArgs} args - Arguments to delete one GlossaryTerm.
     * @example
     * // Delete one GlossaryTerm
     * const GlossaryTerm = await prisma.glossaryTerm.delete({
     *   where: {
     *     // ... filter to delete one GlossaryTerm
     *   }
     * })
     * 
     */
    delete<T extends GlossaryTermDeleteArgs>(args: SelectSubset<T, GlossaryTermDeleteArgs<ExtArgs>>): Prisma__GlossaryTermClient<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GlossaryTerm.
     * @param {GlossaryTermUpdateArgs} args - Arguments to update one GlossaryTerm.
     * @example
     * // Update one GlossaryTerm
     * const glossaryTerm = await prisma.glossaryTerm.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GlossaryTermUpdateArgs>(args: SelectSubset<T, GlossaryTermUpdateArgs<ExtArgs>>): Prisma__GlossaryTermClient<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GlossaryTerms.
     * @param {GlossaryTermDeleteManyArgs} args - Arguments to filter GlossaryTerms to delete.
     * @example
     * // Delete a few GlossaryTerms
     * const { count } = await prisma.glossaryTerm.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GlossaryTermDeleteManyArgs>(args?: SelectSubset<T, GlossaryTermDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GlossaryTerms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryTermUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GlossaryTerms
     * const glossaryTerm = await prisma.glossaryTerm.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GlossaryTermUpdateManyArgs>(args: SelectSubset<T, GlossaryTermUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GlossaryTerm.
     * @param {GlossaryTermUpsertArgs} args - Arguments to update or create a GlossaryTerm.
     * @example
     * // Update or create a GlossaryTerm
     * const glossaryTerm = await prisma.glossaryTerm.upsert({
     *   create: {
     *     // ... data to create a GlossaryTerm
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GlossaryTerm we want to update
     *   }
     * })
     */
    upsert<T extends GlossaryTermUpsertArgs>(args: SelectSubset<T, GlossaryTermUpsertArgs<ExtArgs>>): Prisma__GlossaryTermClient<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GlossaryTerms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryTermCountArgs} args - Arguments to filter GlossaryTerms to count.
     * @example
     * // Count the number of GlossaryTerms
     * const count = await prisma.glossaryTerm.count({
     *   where: {
     *     // ... the filter for the GlossaryTerms we want to count
     *   }
     * })
    **/
    count<T extends GlossaryTermCountArgs>(
      args?: Subset<T, GlossaryTermCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GlossaryTermCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GlossaryTerm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryTermAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GlossaryTermAggregateArgs>(args: Subset<T, GlossaryTermAggregateArgs>): Prisma.PrismaPromise<GetGlossaryTermAggregateType<T>>

    /**
     * Group by GlossaryTerm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryTermGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GlossaryTermGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GlossaryTermGroupByArgs['orderBy'] }
        : { orderBy?: GlossaryTermGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GlossaryTermGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGlossaryTermGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GlossaryTerm model
   */
  readonly fields: GlossaryTermFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GlossaryTerm.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GlossaryTermClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GlossaryTerm model
   */ 
  interface GlossaryTermFieldRefs {
    readonly id: FieldRef<"GlossaryTerm", 'Int'>
    readonly term: FieldRef<"GlossaryTerm", 'String'>
    readonly definition: FieldRef<"GlossaryTerm", 'String'>
    readonly status: FieldRef<"GlossaryTerm", 'GlossaryStatus'>
    readonly createdAt: FieldRef<"GlossaryTerm", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GlossaryTerm findUnique
   */
  export type GlossaryTermFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * Filter, which GlossaryTerm to fetch.
     */
    where: GlossaryTermWhereUniqueInput
  }

  /**
   * GlossaryTerm findUniqueOrThrow
   */
  export type GlossaryTermFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * Filter, which GlossaryTerm to fetch.
     */
    where: GlossaryTermWhereUniqueInput
  }

  /**
   * GlossaryTerm findFirst
   */
  export type GlossaryTermFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * Filter, which GlossaryTerm to fetch.
     */
    where?: GlossaryTermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlossaryTerms to fetch.
     */
    orderBy?: GlossaryTermOrderByWithRelationInput | GlossaryTermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GlossaryTerms.
     */
    cursor?: GlossaryTermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlossaryTerms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlossaryTerms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GlossaryTerms.
     */
    distinct?: GlossaryTermScalarFieldEnum | GlossaryTermScalarFieldEnum[]
  }

  /**
   * GlossaryTerm findFirstOrThrow
   */
  export type GlossaryTermFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * Filter, which GlossaryTerm to fetch.
     */
    where?: GlossaryTermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlossaryTerms to fetch.
     */
    orderBy?: GlossaryTermOrderByWithRelationInput | GlossaryTermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GlossaryTerms.
     */
    cursor?: GlossaryTermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlossaryTerms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlossaryTerms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GlossaryTerms.
     */
    distinct?: GlossaryTermScalarFieldEnum | GlossaryTermScalarFieldEnum[]
  }

  /**
   * GlossaryTerm findMany
   */
  export type GlossaryTermFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * Filter, which GlossaryTerms to fetch.
     */
    where?: GlossaryTermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlossaryTerms to fetch.
     */
    orderBy?: GlossaryTermOrderByWithRelationInput | GlossaryTermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GlossaryTerms.
     */
    cursor?: GlossaryTermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlossaryTerms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlossaryTerms.
     */
    skip?: number
    distinct?: GlossaryTermScalarFieldEnum | GlossaryTermScalarFieldEnum[]
  }

  /**
   * GlossaryTerm create
   */
  export type GlossaryTermCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * The data needed to create a GlossaryTerm.
     */
    data: XOR<GlossaryTermCreateInput, GlossaryTermUncheckedCreateInput>
  }

  /**
   * GlossaryTerm createMany
   */
  export type GlossaryTermCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GlossaryTerms.
     */
    data: GlossaryTermCreateManyInput | GlossaryTermCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GlossaryTerm update
   */
  export type GlossaryTermUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * The data needed to update a GlossaryTerm.
     */
    data: XOR<GlossaryTermUpdateInput, GlossaryTermUncheckedUpdateInput>
    /**
     * Choose, which GlossaryTerm to update.
     */
    where: GlossaryTermWhereUniqueInput
  }

  /**
   * GlossaryTerm updateMany
   */
  export type GlossaryTermUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GlossaryTerms.
     */
    data: XOR<GlossaryTermUpdateManyMutationInput, GlossaryTermUncheckedUpdateManyInput>
    /**
     * Filter which GlossaryTerms to update
     */
    where?: GlossaryTermWhereInput
  }

  /**
   * GlossaryTerm upsert
   */
  export type GlossaryTermUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * The filter to search for the GlossaryTerm to update in case it exists.
     */
    where: GlossaryTermWhereUniqueInput
    /**
     * In case the GlossaryTerm found by the `where` argument doesn't exist, create a new GlossaryTerm with this data.
     */
    create: XOR<GlossaryTermCreateInput, GlossaryTermUncheckedCreateInput>
    /**
     * In case the GlossaryTerm was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GlossaryTermUpdateInput, GlossaryTermUncheckedUpdateInput>
  }

  /**
   * GlossaryTerm delete
   */
  export type GlossaryTermDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * Filter which GlossaryTerm to delete.
     */
    where: GlossaryTermWhereUniqueInput
  }

  /**
   * GlossaryTerm deleteMany
   */
  export type GlossaryTermDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GlossaryTerms to delete
     */
    where?: GlossaryTermWhereInput
  }

  /**
   * GlossaryTerm without action
   */
  export type GlossaryTermDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
  }


  /**
   * Model ComponentTag
   */

  export type AggregateComponentTag = {
    _count: ComponentTagCountAggregateOutputType | null
    _avg: ComponentTagAvgAggregateOutputType | null
    _sum: ComponentTagSumAggregateOutputType | null
    _min: ComponentTagMinAggregateOutputType | null
    _max: ComponentTagMaxAggregateOutputType | null
  }

  export type ComponentTagAvgAggregateOutputType = {
    id: number | null
    componentId: number | null
  }

  export type ComponentTagSumAggregateOutputType = {
    id: number | null
    componentId: number | null
  }

  export type ComponentTagMinAggregateOutputType = {
    id: number | null
    componentId: number | null
    tag: string | null
  }

  export type ComponentTagMaxAggregateOutputType = {
    id: number | null
    componentId: number | null
    tag: string | null
  }

  export type ComponentTagCountAggregateOutputType = {
    id: number
    componentId: number
    tag: number
    _all: number
  }


  export type ComponentTagAvgAggregateInputType = {
    id?: true
    componentId?: true
  }

  export type ComponentTagSumAggregateInputType = {
    id?: true
    componentId?: true
  }

  export type ComponentTagMinAggregateInputType = {
    id?: true
    componentId?: true
    tag?: true
  }

  export type ComponentTagMaxAggregateInputType = {
    id?: true
    componentId?: true
    tag?: true
  }

  export type ComponentTagCountAggregateInputType = {
    id?: true
    componentId?: true
    tag?: true
    _all?: true
  }

  export type ComponentTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComponentTag to aggregate.
     */
    where?: ComponentTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentTags to fetch.
     */
    orderBy?: ComponentTagOrderByWithRelationInput | ComponentTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComponentTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ComponentTags
    **/
    _count?: true | ComponentTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComponentTagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComponentTagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComponentTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComponentTagMaxAggregateInputType
  }

  export type GetComponentTagAggregateType<T extends ComponentTagAggregateArgs> = {
        [P in keyof T & keyof AggregateComponentTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComponentTag[P]>
      : GetScalarType<T[P], AggregateComponentTag[P]>
  }




  export type ComponentTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentTagWhereInput
    orderBy?: ComponentTagOrderByWithAggregationInput | ComponentTagOrderByWithAggregationInput[]
    by: ComponentTagScalarFieldEnum[] | ComponentTagScalarFieldEnum
    having?: ComponentTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComponentTagCountAggregateInputType | true
    _avg?: ComponentTagAvgAggregateInputType
    _sum?: ComponentTagSumAggregateInputType
    _min?: ComponentTagMinAggregateInputType
    _max?: ComponentTagMaxAggregateInputType
  }

  export type ComponentTagGroupByOutputType = {
    id: number
    componentId: number
    tag: string
    _count: ComponentTagCountAggregateOutputType | null
    _avg: ComponentTagAvgAggregateOutputType | null
    _sum: ComponentTagSumAggregateOutputType | null
    _min: ComponentTagMinAggregateOutputType | null
    _max: ComponentTagMaxAggregateOutputType | null
  }

  type GetComponentTagGroupByPayload<T extends ComponentTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComponentTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComponentTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComponentTagGroupByOutputType[P]>
            : GetScalarType<T[P], ComponentTagGroupByOutputType[P]>
        }
      >
    >


  export type ComponentTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    componentId?: boolean
    tag?: boolean
    component?: boolean | ComponentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["componentTag"]>


  export type ComponentTagSelectScalar = {
    id?: boolean
    componentId?: boolean
    tag?: boolean
  }

  export type ComponentTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    component?: boolean | ComponentDefaultArgs<ExtArgs>
  }

  export type $ComponentTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ComponentTag"
    objects: {
      component: Prisma.$ComponentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      componentId: number
      tag: string
    }, ExtArgs["result"]["componentTag"]>
    composites: {}
  }

  type ComponentTagGetPayload<S extends boolean | null | undefined | ComponentTagDefaultArgs> = $Result.GetResult<Prisma.$ComponentTagPayload, S>

  type ComponentTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ComponentTagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ComponentTagCountAggregateInputType | true
    }

  export interface ComponentTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ComponentTag'], meta: { name: 'ComponentTag' } }
    /**
     * Find zero or one ComponentTag that matches the filter.
     * @param {ComponentTagFindUniqueArgs} args - Arguments to find a ComponentTag
     * @example
     * // Get one ComponentTag
     * const componentTag = await prisma.componentTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComponentTagFindUniqueArgs>(args: SelectSubset<T, ComponentTagFindUniqueArgs<ExtArgs>>): Prisma__ComponentTagClient<$Result.GetResult<Prisma.$ComponentTagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ComponentTag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ComponentTagFindUniqueOrThrowArgs} args - Arguments to find a ComponentTag
     * @example
     * // Get one ComponentTag
     * const componentTag = await prisma.componentTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComponentTagFindUniqueOrThrowArgs>(args: SelectSubset<T, ComponentTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComponentTagClient<$Result.GetResult<Prisma.$ComponentTagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ComponentTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTagFindFirstArgs} args - Arguments to find a ComponentTag
     * @example
     * // Get one ComponentTag
     * const componentTag = await prisma.componentTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComponentTagFindFirstArgs>(args?: SelectSubset<T, ComponentTagFindFirstArgs<ExtArgs>>): Prisma__ComponentTagClient<$Result.GetResult<Prisma.$ComponentTagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ComponentTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTagFindFirstOrThrowArgs} args - Arguments to find a ComponentTag
     * @example
     * // Get one ComponentTag
     * const componentTag = await prisma.componentTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComponentTagFindFirstOrThrowArgs>(args?: SelectSubset<T, ComponentTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComponentTagClient<$Result.GetResult<Prisma.$ComponentTagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ComponentTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ComponentTags
     * const componentTags = await prisma.componentTag.findMany()
     * 
     * // Get first 10 ComponentTags
     * const componentTags = await prisma.componentTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const componentTagWithIdOnly = await prisma.componentTag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComponentTagFindManyArgs>(args?: SelectSubset<T, ComponentTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentTagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ComponentTag.
     * @param {ComponentTagCreateArgs} args - Arguments to create a ComponentTag.
     * @example
     * // Create one ComponentTag
     * const ComponentTag = await prisma.componentTag.create({
     *   data: {
     *     // ... data to create a ComponentTag
     *   }
     * })
     * 
     */
    create<T extends ComponentTagCreateArgs>(args: SelectSubset<T, ComponentTagCreateArgs<ExtArgs>>): Prisma__ComponentTagClient<$Result.GetResult<Prisma.$ComponentTagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ComponentTags.
     * @param {ComponentTagCreateManyArgs} args - Arguments to create many ComponentTags.
     * @example
     * // Create many ComponentTags
     * const componentTag = await prisma.componentTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComponentTagCreateManyArgs>(args?: SelectSubset<T, ComponentTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ComponentTag.
     * @param {ComponentTagDeleteArgs} args - Arguments to delete one ComponentTag.
     * @example
     * // Delete one ComponentTag
     * const ComponentTag = await prisma.componentTag.delete({
     *   where: {
     *     // ... filter to delete one ComponentTag
     *   }
     * })
     * 
     */
    delete<T extends ComponentTagDeleteArgs>(args: SelectSubset<T, ComponentTagDeleteArgs<ExtArgs>>): Prisma__ComponentTagClient<$Result.GetResult<Prisma.$ComponentTagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ComponentTag.
     * @param {ComponentTagUpdateArgs} args - Arguments to update one ComponentTag.
     * @example
     * // Update one ComponentTag
     * const componentTag = await prisma.componentTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComponentTagUpdateArgs>(args: SelectSubset<T, ComponentTagUpdateArgs<ExtArgs>>): Prisma__ComponentTagClient<$Result.GetResult<Prisma.$ComponentTagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ComponentTags.
     * @param {ComponentTagDeleteManyArgs} args - Arguments to filter ComponentTags to delete.
     * @example
     * // Delete a few ComponentTags
     * const { count } = await prisma.componentTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComponentTagDeleteManyArgs>(args?: SelectSubset<T, ComponentTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComponentTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ComponentTags
     * const componentTag = await prisma.componentTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComponentTagUpdateManyArgs>(args: SelectSubset<T, ComponentTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ComponentTag.
     * @param {ComponentTagUpsertArgs} args - Arguments to update or create a ComponentTag.
     * @example
     * // Update or create a ComponentTag
     * const componentTag = await prisma.componentTag.upsert({
     *   create: {
     *     // ... data to create a ComponentTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ComponentTag we want to update
     *   }
     * })
     */
    upsert<T extends ComponentTagUpsertArgs>(args: SelectSubset<T, ComponentTagUpsertArgs<ExtArgs>>): Prisma__ComponentTagClient<$Result.GetResult<Prisma.$ComponentTagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ComponentTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTagCountArgs} args - Arguments to filter ComponentTags to count.
     * @example
     * // Count the number of ComponentTags
     * const count = await prisma.componentTag.count({
     *   where: {
     *     // ... the filter for the ComponentTags we want to count
     *   }
     * })
    **/
    count<T extends ComponentTagCountArgs>(
      args?: Subset<T, ComponentTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComponentTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ComponentTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComponentTagAggregateArgs>(args: Subset<T, ComponentTagAggregateArgs>): Prisma.PrismaPromise<GetComponentTagAggregateType<T>>

    /**
     * Group by ComponentTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComponentTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComponentTagGroupByArgs['orderBy'] }
        : { orderBy?: ComponentTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComponentTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComponentTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ComponentTag model
   */
  readonly fields: ComponentTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ComponentTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComponentTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    component<T extends ComponentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ComponentDefaultArgs<ExtArgs>>): Prisma__ComponentClient<$Result.GetResult<Prisma.$ComponentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ComponentTag model
   */ 
  interface ComponentTagFieldRefs {
    readonly id: FieldRef<"ComponentTag", 'Int'>
    readonly componentId: FieldRef<"ComponentTag", 'Int'>
    readonly tag: FieldRef<"ComponentTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ComponentTag findUnique
   */
  export type ComponentTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTag
     */
    select?: ComponentTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTagInclude<ExtArgs> | null
    /**
     * Filter, which ComponentTag to fetch.
     */
    where: ComponentTagWhereUniqueInput
  }

  /**
   * ComponentTag findUniqueOrThrow
   */
  export type ComponentTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTag
     */
    select?: ComponentTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTagInclude<ExtArgs> | null
    /**
     * Filter, which ComponentTag to fetch.
     */
    where: ComponentTagWhereUniqueInput
  }

  /**
   * ComponentTag findFirst
   */
  export type ComponentTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTag
     */
    select?: ComponentTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTagInclude<ExtArgs> | null
    /**
     * Filter, which ComponentTag to fetch.
     */
    where?: ComponentTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentTags to fetch.
     */
    orderBy?: ComponentTagOrderByWithRelationInput | ComponentTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentTags.
     */
    cursor?: ComponentTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentTags.
     */
    distinct?: ComponentTagScalarFieldEnum | ComponentTagScalarFieldEnum[]
  }

  /**
   * ComponentTag findFirstOrThrow
   */
  export type ComponentTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTag
     */
    select?: ComponentTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTagInclude<ExtArgs> | null
    /**
     * Filter, which ComponentTag to fetch.
     */
    where?: ComponentTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentTags to fetch.
     */
    orderBy?: ComponentTagOrderByWithRelationInput | ComponentTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentTags.
     */
    cursor?: ComponentTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentTags.
     */
    distinct?: ComponentTagScalarFieldEnum | ComponentTagScalarFieldEnum[]
  }

  /**
   * ComponentTag findMany
   */
  export type ComponentTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTag
     */
    select?: ComponentTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTagInclude<ExtArgs> | null
    /**
     * Filter, which ComponentTags to fetch.
     */
    where?: ComponentTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentTags to fetch.
     */
    orderBy?: ComponentTagOrderByWithRelationInput | ComponentTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ComponentTags.
     */
    cursor?: ComponentTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentTags.
     */
    skip?: number
    distinct?: ComponentTagScalarFieldEnum | ComponentTagScalarFieldEnum[]
  }

  /**
   * ComponentTag create
   */
  export type ComponentTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTag
     */
    select?: ComponentTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTagInclude<ExtArgs> | null
    /**
     * The data needed to create a ComponentTag.
     */
    data: XOR<ComponentTagCreateInput, ComponentTagUncheckedCreateInput>
  }

  /**
   * ComponentTag createMany
   */
  export type ComponentTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ComponentTags.
     */
    data: ComponentTagCreateManyInput | ComponentTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ComponentTag update
   */
  export type ComponentTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTag
     */
    select?: ComponentTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTagInclude<ExtArgs> | null
    /**
     * The data needed to update a ComponentTag.
     */
    data: XOR<ComponentTagUpdateInput, ComponentTagUncheckedUpdateInput>
    /**
     * Choose, which ComponentTag to update.
     */
    where: ComponentTagWhereUniqueInput
  }

  /**
   * ComponentTag updateMany
   */
  export type ComponentTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ComponentTags.
     */
    data: XOR<ComponentTagUpdateManyMutationInput, ComponentTagUncheckedUpdateManyInput>
    /**
     * Filter which ComponentTags to update
     */
    where?: ComponentTagWhereInput
  }

  /**
   * ComponentTag upsert
   */
  export type ComponentTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTag
     */
    select?: ComponentTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTagInclude<ExtArgs> | null
    /**
     * The filter to search for the ComponentTag to update in case it exists.
     */
    where: ComponentTagWhereUniqueInput
    /**
     * In case the ComponentTag found by the `where` argument doesn't exist, create a new ComponentTag with this data.
     */
    create: XOR<ComponentTagCreateInput, ComponentTagUncheckedCreateInput>
    /**
     * In case the ComponentTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComponentTagUpdateInput, ComponentTagUncheckedUpdateInput>
  }

  /**
   * ComponentTag delete
   */
  export type ComponentTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTag
     */
    select?: ComponentTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTagInclude<ExtArgs> | null
    /**
     * Filter which ComponentTag to delete.
     */
    where: ComponentTagWhereUniqueInput
  }

  /**
   * ComponentTag deleteMany
   */
  export type ComponentTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComponentTags to delete
     */
    where?: ComponentTagWhereInput
  }

  /**
   * ComponentTag without action
   */
  export type ComponentTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTag
     */
    select?: ComponentTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTagInclude<ExtArgs> | null
  }


  /**
   * Model RelationshipTag
   */

  export type AggregateRelationshipTag = {
    _count: RelationshipTagCountAggregateOutputType | null
    _avg: RelationshipTagAvgAggregateOutputType | null
    _sum: RelationshipTagSumAggregateOutputType | null
    _min: RelationshipTagMinAggregateOutputType | null
    _max: RelationshipTagMaxAggregateOutputType | null
  }

  export type RelationshipTagAvgAggregateOutputType = {
    id: number | null
    sourceId: number | null
    targetId: number | null
  }

  export type RelationshipTagSumAggregateOutputType = {
    id: number | null
    sourceId: number | null
    targetId: number | null
  }

  export type RelationshipTagMinAggregateOutputType = {
    id: number | null
    sourceId: number | null
    targetId: number | null
    tag: string | null
  }

  export type RelationshipTagMaxAggregateOutputType = {
    id: number | null
    sourceId: number | null
    targetId: number | null
    tag: string | null
  }

  export type RelationshipTagCountAggregateOutputType = {
    id: number
    sourceId: number
    targetId: number
    tag: number
    _all: number
  }


  export type RelationshipTagAvgAggregateInputType = {
    id?: true
    sourceId?: true
    targetId?: true
  }

  export type RelationshipTagSumAggregateInputType = {
    id?: true
    sourceId?: true
    targetId?: true
  }

  export type RelationshipTagMinAggregateInputType = {
    id?: true
    sourceId?: true
    targetId?: true
    tag?: true
  }

  export type RelationshipTagMaxAggregateInputType = {
    id?: true
    sourceId?: true
    targetId?: true
    tag?: true
  }

  export type RelationshipTagCountAggregateInputType = {
    id?: true
    sourceId?: true
    targetId?: true
    tag?: true
    _all?: true
  }

  export type RelationshipTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RelationshipTag to aggregate.
     */
    where?: RelationshipTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelationshipTags to fetch.
     */
    orderBy?: RelationshipTagOrderByWithRelationInput | RelationshipTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RelationshipTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelationshipTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelationshipTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RelationshipTags
    **/
    _count?: true | RelationshipTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RelationshipTagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RelationshipTagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RelationshipTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RelationshipTagMaxAggregateInputType
  }

  export type GetRelationshipTagAggregateType<T extends RelationshipTagAggregateArgs> = {
        [P in keyof T & keyof AggregateRelationshipTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRelationshipTag[P]>
      : GetScalarType<T[P], AggregateRelationshipTag[P]>
  }




  export type RelationshipTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelationshipTagWhereInput
    orderBy?: RelationshipTagOrderByWithAggregationInput | RelationshipTagOrderByWithAggregationInput[]
    by: RelationshipTagScalarFieldEnum[] | RelationshipTagScalarFieldEnum
    having?: RelationshipTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RelationshipTagCountAggregateInputType | true
    _avg?: RelationshipTagAvgAggregateInputType
    _sum?: RelationshipTagSumAggregateInputType
    _min?: RelationshipTagMinAggregateInputType
    _max?: RelationshipTagMaxAggregateInputType
  }

  export type RelationshipTagGroupByOutputType = {
    id: number
    sourceId: number
    targetId: number
    tag: string
    _count: RelationshipTagCountAggregateOutputType | null
    _avg: RelationshipTagAvgAggregateOutputType | null
    _sum: RelationshipTagSumAggregateOutputType | null
    _min: RelationshipTagMinAggregateOutputType | null
    _max: RelationshipTagMaxAggregateOutputType | null
  }

  type GetRelationshipTagGroupByPayload<T extends RelationshipTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RelationshipTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RelationshipTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RelationshipTagGroupByOutputType[P]>
            : GetScalarType<T[P], RelationshipTagGroupByOutputType[P]>
        }
      >
    >


  export type RelationshipTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sourceId?: boolean
    targetId?: boolean
    tag?: boolean
  }, ExtArgs["result"]["relationshipTag"]>


  export type RelationshipTagSelectScalar = {
    id?: boolean
    sourceId?: boolean
    targetId?: boolean
    tag?: boolean
  }


  export type $RelationshipTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RelationshipTag"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sourceId: number
      targetId: number
      tag: string
    }, ExtArgs["result"]["relationshipTag"]>
    composites: {}
  }

  type RelationshipTagGetPayload<S extends boolean | null | undefined | RelationshipTagDefaultArgs> = $Result.GetResult<Prisma.$RelationshipTagPayload, S>

  type RelationshipTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RelationshipTagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RelationshipTagCountAggregateInputType | true
    }

  export interface RelationshipTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RelationshipTag'], meta: { name: 'RelationshipTag' } }
    /**
     * Find zero or one RelationshipTag that matches the filter.
     * @param {RelationshipTagFindUniqueArgs} args - Arguments to find a RelationshipTag
     * @example
     * // Get one RelationshipTag
     * const relationshipTag = await prisma.relationshipTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RelationshipTagFindUniqueArgs>(args: SelectSubset<T, RelationshipTagFindUniqueArgs<ExtArgs>>): Prisma__RelationshipTagClient<$Result.GetResult<Prisma.$RelationshipTagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RelationshipTag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RelationshipTagFindUniqueOrThrowArgs} args - Arguments to find a RelationshipTag
     * @example
     * // Get one RelationshipTag
     * const relationshipTag = await prisma.relationshipTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RelationshipTagFindUniqueOrThrowArgs>(args: SelectSubset<T, RelationshipTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RelationshipTagClient<$Result.GetResult<Prisma.$RelationshipTagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RelationshipTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipTagFindFirstArgs} args - Arguments to find a RelationshipTag
     * @example
     * // Get one RelationshipTag
     * const relationshipTag = await prisma.relationshipTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RelationshipTagFindFirstArgs>(args?: SelectSubset<T, RelationshipTagFindFirstArgs<ExtArgs>>): Prisma__RelationshipTagClient<$Result.GetResult<Prisma.$RelationshipTagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RelationshipTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipTagFindFirstOrThrowArgs} args - Arguments to find a RelationshipTag
     * @example
     * // Get one RelationshipTag
     * const relationshipTag = await prisma.relationshipTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RelationshipTagFindFirstOrThrowArgs>(args?: SelectSubset<T, RelationshipTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__RelationshipTagClient<$Result.GetResult<Prisma.$RelationshipTagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RelationshipTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RelationshipTags
     * const relationshipTags = await prisma.relationshipTag.findMany()
     * 
     * // Get first 10 RelationshipTags
     * const relationshipTags = await prisma.relationshipTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const relationshipTagWithIdOnly = await prisma.relationshipTag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RelationshipTagFindManyArgs>(args?: SelectSubset<T, RelationshipTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelationshipTagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RelationshipTag.
     * @param {RelationshipTagCreateArgs} args - Arguments to create a RelationshipTag.
     * @example
     * // Create one RelationshipTag
     * const RelationshipTag = await prisma.relationshipTag.create({
     *   data: {
     *     // ... data to create a RelationshipTag
     *   }
     * })
     * 
     */
    create<T extends RelationshipTagCreateArgs>(args: SelectSubset<T, RelationshipTagCreateArgs<ExtArgs>>): Prisma__RelationshipTagClient<$Result.GetResult<Prisma.$RelationshipTagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RelationshipTags.
     * @param {RelationshipTagCreateManyArgs} args - Arguments to create many RelationshipTags.
     * @example
     * // Create many RelationshipTags
     * const relationshipTag = await prisma.relationshipTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RelationshipTagCreateManyArgs>(args?: SelectSubset<T, RelationshipTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RelationshipTag.
     * @param {RelationshipTagDeleteArgs} args - Arguments to delete one RelationshipTag.
     * @example
     * // Delete one RelationshipTag
     * const RelationshipTag = await prisma.relationshipTag.delete({
     *   where: {
     *     // ... filter to delete one RelationshipTag
     *   }
     * })
     * 
     */
    delete<T extends RelationshipTagDeleteArgs>(args: SelectSubset<T, RelationshipTagDeleteArgs<ExtArgs>>): Prisma__RelationshipTagClient<$Result.GetResult<Prisma.$RelationshipTagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RelationshipTag.
     * @param {RelationshipTagUpdateArgs} args - Arguments to update one RelationshipTag.
     * @example
     * // Update one RelationshipTag
     * const relationshipTag = await prisma.relationshipTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RelationshipTagUpdateArgs>(args: SelectSubset<T, RelationshipTagUpdateArgs<ExtArgs>>): Prisma__RelationshipTagClient<$Result.GetResult<Prisma.$RelationshipTagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RelationshipTags.
     * @param {RelationshipTagDeleteManyArgs} args - Arguments to filter RelationshipTags to delete.
     * @example
     * // Delete a few RelationshipTags
     * const { count } = await prisma.relationshipTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RelationshipTagDeleteManyArgs>(args?: SelectSubset<T, RelationshipTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RelationshipTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RelationshipTags
     * const relationshipTag = await prisma.relationshipTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RelationshipTagUpdateManyArgs>(args: SelectSubset<T, RelationshipTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RelationshipTag.
     * @param {RelationshipTagUpsertArgs} args - Arguments to update or create a RelationshipTag.
     * @example
     * // Update or create a RelationshipTag
     * const relationshipTag = await prisma.relationshipTag.upsert({
     *   create: {
     *     // ... data to create a RelationshipTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RelationshipTag we want to update
     *   }
     * })
     */
    upsert<T extends RelationshipTagUpsertArgs>(args: SelectSubset<T, RelationshipTagUpsertArgs<ExtArgs>>): Prisma__RelationshipTagClient<$Result.GetResult<Prisma.$RelationshipTagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RelationshipTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipTagCountArgs} args - Arguments to filter RelationshipTags to count.
     * @example
     * // Count the number of RelationshipTags
     * const count = await prisma.relationshipTag.count({
     *   where: {
     *     // ... the filter for the RelationshipTags we want to count
     *   }
     * })
    **/
    count<T extends RelationshipTagCountArgs>(
      args?: Subset<T, RelationshipTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RelationshipTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RelationshipTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RelationshipTagAggregateArgs>(args: Subset<T, RelationshipTagAggregateArgs>): Prisma.PrismaPromise<GetRelationshipTagAggregateType<T>>

    /**
     * Group by RelationshipTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RelationshipTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RelationshipTagGroupByArgs['orderBy'] }
        : { orderBy?: RelationshipTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RelationshipTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRelationshipTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RelationshipTag model
   */
  readonly fields: RelationshipTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RelationshipTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RelationshipTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RelationshipTag model
   */ 
  interface RelationshipTagFieldRefs {
    readonly id: FieldRef<"RelationshipTag", 'Int'>
    readonly sourceId: FieldRef<"RelationshipTag", 'Int'>
    readonly targetId: FieldRef<"RelationshipTag", 'Int'>
    readonly tag: FieldRef<"RelationshipTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RelationshipTag findUnique
   */
  export type RelationshipTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipTag
     */
    select?: RelationshipTagSelect<ExtArgs> | null
    /**
     * Filter, which RelationshipTag to fetch.
     */
    where: RelationshipTagWhereUniqueInput
  }

  /**
   * RelationshipTag findUniqueOrThrow
   */
  export type RelationshipTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipTag
     */
    select?: RelationshipTagSelect<ExtArgs> | null
    /**
     * Filter, which RelationshipTag to fetch.
     */
    where: RelationshipTagWhereUniqueInput
  }

  /**
   * RelationshipTag findFirst
   */
  export type RelationshipTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipTag
     */
    select?: RelationshipTagSelect<ExtArgs> | null
    /**
     * Filter, which RelationshipTag to fetch.
     */
    where?: RelationshipTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelationshipTags to fetch.
     */
    orderBy?: RelationshipTagOrderByWithRelationInput | RelationshipTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RelationshipTags.
     */
    cursor?: RelationshipTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelationshipTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelationshipTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RelationshipTags.
     */
    distinct?: RelationshipTagScalarFieldEnum | RelationshipTagScalarFieldEnum[]
  }

  /**
   * RelationshipTag findFirstOrThrow
   */
  export type RelationshipTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipTag
     */
    select?: RelationshipTagSelect<ExtArgs> | null
    /**
     * Filter, which RelationshipTag to fetch.
     */
    where?: RelationshipTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelationshipTags to fetch.
     */
    orderBy?: RelationshipTagOrderByWithRelationInput | RelationshipTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RelationshipTags.
     */
    cursor?: RelationshipTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelationshipTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelationshipTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RelationshipTags.
     */
    distinct?: RelationshipTagScalarFieldEnum | RelationshipTagScalarFieldEnum[]
  }

  /**
   * RelationshipTag findMany
   */
  export type RelationshipTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipTag
     */
    select?: RelationshipTagSelect<ExtArgs> | null
    /**
     * Filter, which RelationshipTags to fetch.
     */
    where?: RelationshipTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelationshipTags to fetch.
     */
    orderBy?: RelationshipTagOrderByWithRelationInput | RelationshipTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RelationshipTags.
     */
    cursor?: RelationshipTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelationshipTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelationshipTags.
     */
    skip?: number
    distinct?: RelationshipTagScalarFieldEnum | RelationshipTagScalarFieldEnum[]
  }

  /**
   * RelationshipTag create
   */
  export type RelationshipTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipTag
     */
    select?: RelationshipTagSelect<ExtArgs> | null
    /**
     * The data needed to create a RelationshipTag.
     */
    data: XOR<RelationshipTagCreateInput, RelationshipTagUncheckedCreateInput>
  }

  /**
   * RelationshipTag createMany
   */
  export type RelationshipTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RelationshipTags.
     */
    data: RelationshipTagCreateManyInput | RelationshipTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RelationshipTag update
   */
  export type RelationshipTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipTag
     */
    select?: RelationshipTagSelect<ExtArgs> | null
    /**
     * The data needed to update a RelationshipTag.
     */
    data: XOR<RelationshipTagUpdateInput, RelationshipTagUncheckedUpdateInput>
    /**
     * Choose, which RelationshipTag to update.
     */
    where: RelationshipTagWhereUniqueInput
  }

  /**
   * RelationshipTag updateMany
   */
  export type RelationshipTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RelationshipTags.
     */
    data: XOR<RelationshipTagUpdateManyMutationInput, RelationshipTagUncheckedUpdateManyInput>
    /**
     * Filter which RelationshipTags to update
     */
    where?: RelationshipTagWhereInput
  }

  /**
   * RelationshipTag upsert
   */
  export type RelationshipTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipTag
     */
    select?: RelationshipTagSelect<ExtArgs> | null
    /**
     * The filter to search for the RelationshipTag to update in case it exists.
     */
    where: RelationshipTagWhereUniqueInput
    /**
     * In case the RelationshipTag found by the `where` argument doesn't exist, create a new RelationshipTag with this data.
     */
    create: XOR<RelationshipTagCreateInput, RelationshipTagUncheckedCreateInput>
    /**
     * In case the RelationshipTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RelationshipTagUpdateInput, RelationshipTagUncheckedUpdateInput>
  }

  /**
   * RelationshipTag delete
   */
  export type RelationshipTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipTag
     */
    select?: RelationshipTagSelect<ExtArgs> | null
    /**
     * Filter which RelationshipTag to delete.
     */
    where: RelationshipTagWhereUniqueInput
  }

  /**
   * RelationshipTag deleteMany
   */
  export type RelationshipTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RelationshipTags to delete
     */
    where?: RelationshipTagWhereInput
  }

  /**
   * RelationshipTag without action
   */
  export type RelationshipTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipTag
     */
    select?: RelationshipTagSelect<ExtArgs> | null
  }


  /**
   * Model ADRTag
   */

  export type AggregateADRTag = {
    _count: ADRTagCountAggregateOutputType | null
    _avg: ADRTagAvgAggregateOutputType | null
    _sum: ADRTagSumAggregateOutputType | null
    _min: ADRTagMinAggregateOutputType | null
    _max: ADRTagMaxAggregateOutputType | null
  }

  export type ADRTagAvgAggregateOutputType = {
    id: number | null
    adrId: number | null
  }

  export type ADRTagSumAggregateOutputType = {
    id: number | null
    adrId: number | null
  }

  export type ADRTagMinAggregateOutputType = {
    id: number | null
    adrId: number | null
    tag: string | null
  }

  export type ADRTagMaxAggregateOutputType = {
    id: number | null
    adrId: number | null
    tag: string | null
  }

  export type ADRTagCountAggregateOutputType = {
    id: number
    adrId: number
    tag: number
    _all: number
  }


  export type ADRTagAvgAggregateInputType = {
    id?: true
    adrId?: true
  }

  export type ADRTagSumAggregateInputType = {
    id?: true
    adrId?: true
  }

  export type ADRTagMinAggregateInputType = {
    id?: true
    adrId?: true
    tag?: true
  }

  export type ADRTagMaxAggregateInputType = {
    id?: true
    adrId?: true
    tag?: true
  }

  export type ADRTagCountAggregateInputType = {
    id?: true
    adrId?: true
    tag?: true
    _all?: true
  }

  export type ADRTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ADRTag to aggregate.
     */
    where?: ADRTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADRTags to fetch.
     */
    orderBy?: ADRTagOrderByWithRelationInput | ADRTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ADRTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADRTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADRTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ADRTags
    **/
    _count?: true | ADRTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ADRTagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ADRTagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ADRTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ADRTagMaxAggregateInputType
  }

  export type GetADRTagAggregateType<T extends ADRTagAggregateArgs> = {
        [P in keyof T & keyof AggregateADRTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateADRTag[P]>
      : GetScalarType<T[P], AggregateADRTag[P]>
  }




  export type ADRTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ADRTagWhereInput
    orderBy?: ADRTagOrderByWithAggregationInput | ADRTagOrderByWithAggregationInput[]
    by: ADRTagScalarFieldEnum[] | ADRTagScalarFieldEnum
    having?: ADRTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ADRTagCountAggregateInputType | true
    _avg?: ADRTagAvgAggregateInputType
    _sum?: ADRTagSumAggregateInputType
    _min?: ADRTagMinAggregateInputType
    _max?: ADRTagMaxAggregateInputType
  }

  export type ADRTagGroupByOutputType = {
    id: number
    adrId: number
    tag: string
    _count: ADRTagCountAggregateOutputType | null
    _avg: ADRTagAvgAggregateOutputType | null
    _sum: ADRTagSumAggregateOutputType | null
    _min: ADRTagMinAggregateOutputType | null
    _max: ADRTagMaxAggregateOutputType | null
  }

  type GetADRTagGroupByPayload<T extends ADRTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ADRTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ADRTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ADRTagGroupByOutputType[P]>
            : GetScalarType<T[P], ADRTagGroupByOutputType[P]>
        }
      >
    >


  export type ADRTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adrId?: boolean
    tag?: boolean
    adr?: boolean | ADRDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aDRTag"]>


  export type ADRTagSelectScalar = {
    id?: boolean
    adrId?: boolean
    tag?: boolean
  }

  export type ADRTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adr?: boolean | ADRDefaultArgs<ExtArgs>
  }

  export type $ADRTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ADRTag"
    objects: {
      adr: Prisma.$ADRPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      adrId: number
      tag: string
    }, ExtArgs["result"]["aDRTag"]>
    composites: {}
  }

  type ADRTagGetPayload<S extends boolean | null | undefined | ADRTagDefaultArgs> = $Result.GetResult<Prisma.$ADRTagPayload, S>

  type ADRTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ADRTagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ADRTagCountAggregateInputType | true
    }

  export interface ADRTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ADRTag'], meta: { name: 'ADRTag' } }
    /**
     * Find zero or one ADRTag that matches the filter.
     * @param {ADRTagFindUniqueArgs} args - Arguments to find a ADRTag
     * @example
     * // Get one ADRTag
     * const aDRTag = await prisma.aDRTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ADRTagFindUniqueArgs>(args: SelectSubset<T, ADRTagFindUniqueArgs<ExtArgs>>): Prisma__ADRTagClient<$Result.GetResult<Prisma.$ADRTagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ADRTag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ADRTagFindUniqueOrThrowArgs} args - Arguments to find a ADRTag
     * @example
     * // Get one ADRTag
     * const aDRTag = await prisma.aDRTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ADRTagFindUniqueOrThrowArgs>(args: SelectSubset<T, ADRTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ADRTagClient<$Result.GetResult<Prisma.$ADRTagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ADRTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADRTagFindFirstArgs} args - Arguments to find a ADRTag
     * @example
     * // Get one ADRTag
     * const aDRTag = await prisma.aDRTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ADRTagFindFirstArgs>(args?: SelectSubset<T, ADRTagFindFirstArgs<ExtArgs>>): Prisma__ADRTagClient<$Result.GetResult<Prisma.$ADRTagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ADRTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADRTagFindFirstOrThrowArgs} args - Arguments to find a ADRTag
     * @example
     * // Get one ADRTag
     * const aDRTag = await prisma.aDRTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ADRTagFindFirstOrThrowArgs>(args?: SelectSubset<T, ADRTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__ADRTagClient<$Result.GetResult<Prisma.$ADRTagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ADRTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADRTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ADRTags
     * const aDRTags = await prisma.aDRTag.findMany()
     * 
     * // Get first 10 ADRTags
     * const aDRTags = await prisma.aDRTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aDRTagWithIdOnly = await prisma.aDRTag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ADRTagFindManyArgs>(args?: SelectSubset<T, ADRTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ADRTagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ADRTag.
     * @param {ADRTagCreateArgs} args - Arguments to create a ADRTag.
     * @example
     * // Create one ADRTag
     * const ADRTag = await prisma.aDRTag.create({
     *   data: {
     *     // ... data to create a ADRTag
     *   }
     * })
     * 
     */
    create<T extends ADRTagCreateArgs>(args: SelectSubset<T, ADRTagCreateArgs<ExtArgs>>): Prisma__ADRTagClient<$Result.GetResult<Prisma.$ADRTagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ADRTags.
     * @param {ADRTagCreateManyArgs} args - Arguments to create many ADRTags.
     * @example
     * // Create many ADRTags
     * const aDRTag = await prisma.aDRTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ADRTagCreateManyArgs>(args?: SelectSubset<T, ADRTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ADRTag.
     * @param {ADRTagDeleteArgs} args - Arguments to delete one ADRTag.
     * @example
     * // Delete one ADRTag
     * const ADRTag = await prisma.aDRTag.delete({
     *   where: {
     *     // ... filter to delete one ADRTag
     *   }
     * })
     * 
     */
    delete<T extends ADRTagDeleteArgs>(args: SelectSubset<T, ADRTagDeleteArgs<ExtArgs>>): Prisma__ADRTagClient<$Result.GetResult<Prisma.$ADRTagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ADRTag.
     * @param {ADRTagUpdateArgs} args - Arguments to update one ADRTag.
     * @example
     * // Update one ADRTag
     * const aDRTag = await prisma.aDRTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ADRTagUpdateArgs>(args: SelectSubset<T, ADRTagUpdateArgs<ExtArgs>>): Prisma__ADRTagClient<$Result.GetResult<Prisma.$ADRTagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ADRTags.
     * @param {ADRTagDeleteManyArgs} args - Arguments to filter ADRTags to delete.
     * @example
     * // Delete a few ADRTags
     * const { count } = await prisma.aDRTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ADRTagDeleteManyArgs>(args?: SelectSubset<T, ADRTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ADRTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADRTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ADRTags
     * const aDRTag = await prisma.aDRTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ADRTagUpdateManyArgs>(args: SelectSubset<T, ADRTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ADRTag.
     * @param {ADRTagUpsertArgs} args - Arguments to update or create a ADRTag.
     * @example
     * // Update or create a ADRTag
     * const aDRTag = await prisma.aDRTag.upsert({
     *   create: {
     *     // ... data to create a ADRTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ADRTag we want to update
     *   }
     * })
     */
    upsert<T extends ADRTagUpsertArgs>(args: SelectSubset<T, ADRTagUpsertArgs<ExtArgs>>): Prisma__ADRTagClient<$Result.GetResult<Prisma.$ADRTagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ADRTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADRTagCountArgs} args - Arguments to filter ADRTags to count.
     * @example
     * // Count the number of ADRTags
     * const count = await prisma.aDRTag.count({
     *   where: {
     *     // ... the filter for the ADRTags we want to count
     *   }
     * })
    **/
    count<T extends ADRTagCountArgs>(
      args?: Subset<T, ADRTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ADRTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ADRTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADRTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ADRTagAggregateArgs>(args: Subset<T, ADRTagAggregateArgs>): Prisma.PrismaPromise<GetADRTagAggregateType<T>>

    /**
     * Group by ADRTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ADRTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ADRTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ADRTagGroupByArgs['orderBy'] }
        : { orderBy?: ADRTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ADRTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetADRTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ADRTag model
   */
  readonly fields: ADRTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ADRTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ADRTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    adr<T extends ADRDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ADRDefaultArgs<ExtArgs>>): Prisma__ADRClient<$Result.GetResult<Prisma.$ADRPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ADRTag model
   */ 
  interface ADRTagFieldRefs {
    readonly id: FieldRef<"ADRTag", 'Int'>
    readonly adrId: FieldRef<"ADRTag", 'Int'>
    readonly tag: FieldRef<"ADRTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ADRTag findUnique
   */
  export type ADRTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADRTag
     */
    select?: ADRTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRTagInclude<ExtArgs> | null
    /**
     * Filter, which ADRTag to fetch.
     */
    where: ADRTagWhereUniqueInput
  }

  /**
   * ADRTag findUniqueOrThrow
   */
  export type ADRTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADRTag
     */
    select?: ADRTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRTagInclude<ExtArgs> | null
    /**
     * Filter, which ADRTag to fetch.
     */
    where: ADRTagWhereUniqueInput
  }

  /**
   * ADRTag findFirst
   */
  export type ADRTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADRTag
     */
    select?: ADRTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRTagInclude<ExtArgs> | null
    /**
     * Filter, which ADRTag to fetch.
     */
    where?: ADRTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADRTags to fetch.
     */
    orderBy?: ADRTagOrderByWithRelationInput | ADRTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ADRTags.
     */
    cursor?: ADRTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADRTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADRTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ADRTags.
     */
    distinct?: ADRTagScalarFieldEnum | ADRTagScalarFieldEnum[]
  }

  /**
   * ADRTag findFirstOrThrow
   */
  export type ADRTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADRTag
     */
    select?: ADRTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRTagInclude<ExtArgs> | null
    /**
     * Filter, which ADRTag to fetch.
     */
    where?: ADRTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADRTags to fetch.
     */
    orderBy?: ADRTagOrderByWithRelationInput | ADRTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ADRTags.
     */
    cursor?: ADRTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADRTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADRTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ADRTags.
     */
    distinct?: ADRTagScalarFieldEnum | ADRTagScalarFieldEnum[]
  }

  /**
   * ADRTag findMany
   */
  export type ADRTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADRTag
     */
    select?: ADRTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRTagInclude<ExtArgs> | null
    /**
     * Filter, which ADRTags to fetch.
     */
    where?: ADRTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ADRTags to fetch.
     */
    orderBy?: ADRTagOrderByWithRelationInput | ADRTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ADRTags.
     */
    cursor?: ADRTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ADRTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ADRTags.
     */
    skip?: number
    distinct?: ADRTagScalarFieldEnum | ADRTagScalarFieldEnum[]
  }

  /**
   * ADRTag create
   */
  export type ADRTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADRTag
     */
    select?: ADRTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRTagInclude<ExtArgs> | null
    /**
     * The data needed to create a ADRTag.
     */
    data: XOR<ADRTagCreateInput, ADRTagUncheckedCreateInput>
  }

  /**
   * ADRTag createMany
   */
  export type ADRTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ADRTags.
     */
    data: ADRTagCreateManyInput | ADRTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ADRTag update
   */
  export type ADRTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADRTag
     */
    select?: ADRTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRTagInclude<ExtArgs> | null
    /**
     * The data needed to update a ADRTag.
     */
    data: XOR<ADRTagUpdateInput, ADRTagUncheckedUpdateInput>
    /**
     * Choose, which ADRTag to update.
     */
    where: ADRTagWhereUniqueInput
  }

  /**
   * ADRTag updateMany
   */
  export type ADRTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ADRTags.
     */
    data: XOR<ADRTagUpdateManyMutationInput, ADRTagUncheckedUpdateManyInput>
    /**
     * Filter which ADRTags to update
     */
    where?: ADRTagWhereInput
  }

  /**
   * ADRTag upsert
   */
  export type ADRTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADRTag
     */
    select?: ADRTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRTagInclude<ExtArgs> | null
    /**
     * The filter to search for the ADRTag to update in case it exists.
     */
    where: ADRTagWhereUniqueInput
    /**
     * In case the ADRTag found by the `where` argument doesn't exist, create a new ADRTag with this data.
     */
    create: XOR<ADRTagCreateInput, ADRTagUncheckedCreateInput>
    /**
     * In case the ADRTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ADRTagUpdateInput, ADRTagUncheckedUpdateInput>
  }

  /**
   * ADRTag delete
   */
  export type ADRTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADRTag
     */
    select?: ADRTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRTagInclude<ExtArgs> | null
    /**
     * Filter which ADRTag to delete.
     */
    where: ADRTagWhereUniqueInput
  }

  /**
   * ADRTag deleteMany
   */
  export type ADRTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ADRTags to delete
     */
    where?: ADRTagWhereInput
  }

  /**
   * ADRTag without action
   */
  export type ADRTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ADRTag
     */
    select?: ADRTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ADRTagInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    passwordHash: 'passwordHash',
    email: 'email',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const Team_MemberScalarFieldEnum: {
    teamId: 'teamId',
    userId: 'userId',
    joinedAt: 'joinedAt'
  };

  export type Team_MemberScalarFieldEnum = (typeof Team_MemberScalarFieldEnum)[keyof typeof Team_MemberScalarFieldEnum]


  export const EnvironmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt'
  };

  export type EnvironmentScalarFieldEnum = (typeof EnvironmentScalarFieldEnum)[keyof typeof EnvironmentScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    image: 'image',
    createdAt: 'createdAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const ComponentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    status: 'status',
    categoryId: 'categoryId',
    teamId: 'teamId',
    createdAt: 'createdAt'
  };

  export type ComponentScalarFieldEnum = (typeof ComponentScalarFieldEnum)[keyof typeof ComponentScalarFieldEnum]


  export const ComponentInstanceScalarFieldEnum: {
    id: 'id',
    componentId: 'componentId',
    environmentId: 'environmentId',
    hostname: 'hostname',
    specs: 'specs',
    createdAt: 'createdAt'
  };

  export type ComponentInstanceScalarFieldEnum = (typeof ComponentInstanceScalarFieldEnum)[keyof typeof ComponentInstanceScalarFieldEnum]


  export const ADRScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type ADRScalarFieldEnum = (typeof ADRScalarFieldEnum)[keyof typeof ADRScalarFieldEnum]


  export const ADR_ParticipantScalarFieldEnum: {
    id: 'id',
    adrId: 'adrId',
    userId: 'userId',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type ADR_ParticipantScalarFieldEnum = (typeof ADR_ParticipantScalarFieldEnum)[keyof typeof ADR_ParticipantScalarFieldEnum]


  export const ADR_ComponentInstanceScalarFieldEnum: {
    adrId: 'adrId',
    instanceId: 'instanceId',
    impactLevel: 'impactLevel'
  };

  export type ADR_ComponentInstanceScalarFieldEnum = (typeof ADR_ComponentInstanceScalarFieldEnum)[keyof typeof ADR_ComponentInstanceScalarFieldEnum]


  export const ADR_ComponentScalarFieldEnum: {
    adrId: 'adrId',
    componentId: 'componentId'
  };

  export type ADR_ComponentScalarFieldEnum = (typeof ADR_ComponentScalarFieldEnum)[keyof typeof ADR_ComponentScalarFieldEnum]


  export const RoadmapItemScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    componentId: 'componentId',
    typeId: 'typeId',
    status: 'status',
    dueDate: 'dueDate',
    createdAt: 'createdAt'
  };

  export type RoadmapItemScalarFieldEnum = (typeof RoadmapItemScalarFieldEnum)[keyof typeof RoadmapItemScalarFieldEnum]


  export const RoadmapTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    colorHex: 'colorHex',
    createdAt: 'createdAt'
  };

  export type RoadmapTypeScalarFieldEnum = (typeof RoadmapTypeScalarFieldEnum)[keyof typeof RoadmapTypeScalarFieldEnum]


  export const LogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    level: 'level',
    message: 'message',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type LogScalarFieldEnum = (typeof LogScalarFieldEnum)[keyof typeof LogScalarFieldEnum]


  export const GlossaryTermScalarFieldEnum: {
    id: 'id',
    term: 'term',
    definition: 'definition',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type GlossaryTermScalarFieldEnum = (typeof GlossaryTermScalarFieldEnum)[keyof typeof GlossaryTermScalarFieldEnum]


  export const ComponentTagScalarFieldEnum: {
    id: 'id',
    componentId: 'componentId',
    tag: 'tag'
  };

  export type ComponentTagScalarFieldEnum = (typeof ComponentTagScalarFieldEnum)[keyof typeof ComponentTagScalarFieldEnum]


  export const RelationshipTagScalarFieldEnum: {
    id: 'id',
    sourceId: 'sourceId',
    targetId: 'targetId',
    tag: 'tag'
  };

  export type RelationshipTagScalarFieldEnum = (typeof RelationshipTagScalarFieldEnum)[keyof typeof RelationshipTagScalarFieldEnum]


  export const ADRTagScalarFieldEnum: {
    id: 'id',
    adrId: 'adrId',
    tag: 'tag'
  };

  export type ADRTagScalarFieldEnum = (typeof ADRTagScalarFieldEnum)[keyof typeof ADRTagScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'User_role'
   */
  export type EnumUser_roleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'User_role'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Component_status'
   */
  export type EnumComponent_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Component_status'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'ADR_status'
   */
  export type EnumADR_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ADR_status'>
    


  /**
   * Reference to a field of type 'ParticipantRole'
   */
  export type EnumParticipantRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ParticipantRole'>
    


  /**
   * Reference to a field of type 'ImpactLevel'
   */
  export type EnumImpactLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ImpactLevel'>
    


  /**
   * Reference to a field of type 'RoadmapItem_status'
   */
  export type EnumRoadmapItem_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoadmapItem_status'>
    


  /**
   * Reference to a field of type 'LogLevel'
   */
  export type EnumLogLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogLevel'>
    


  /**
   * Reference to a field of type 'GlossaryStatus'
   */
  export type EnumGlossaryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GlossaryStatus'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    role?: EnumUser_roleFilter<"User"> | $Enums.User_role
    createdAt?: DateTimeFilter<"User"> | Date | string
    logs?: LogListRelationFilter
    teamMembers?: Team_MemberListRelationFilter
    adrParticipants?: ADR_ParticipantListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    logs?: LogOrderByRelationAggregateInput
    teamMembers?: Team_MemberOrderByRelationAggregateInput
    adrParticipants?: ADR_ParticipantOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    role?: EnumUser_roleFilter<"User"> | $Enums.User_role
    createdAt?: DateTimeFilter<"User"> | Date | string
    logs?: LogListRelationFilter
    teamMembers?: Team_MemberListRelationFilter
    adrParticipants?: ADR_ParticipantListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUser_roleWithAggregatesFilter<"User"> | $Enums.User_role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: IntFilter<"Team"> | number
    name?: StringFilter<"Team"> | string
    description?: StringNullableFilter<"Team"> | string | null
    createdAt?: DateTimeFilter<"Team"> | Date | string
    components?: ComponentListRelationFilter
    members?: Team_MemberListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    components?: ComponentOrderByRelationAggregateInput
    members?: Team_MemberOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    description?: StringNullableFilter<"Team"> | string | null
    createdAt?: DateTimeFilter<"Team"> | Date | string
    components?: ComponentListRelationFilter
    members?: Team_MemberListRelationFilter
  }, "id" | "name">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Team"> | number
    name?: StringWithAggregatesFilter<"Team"> | string
    description?: StringNullableWithAggregatesFilter<"Team"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
  }

  export type Team_MemberWhereInput = {
    AND?: Team_MemberWhereInput | Team_MemberWhereInput[]
    OR?: Team_MemberWhereInput[]
    NOT?: Team_MemberWhereInput | Team_MemberWhereInput[]
    teamId?: IntFilter<"Team_Member"> | number
    userId?: IntFilter<"Team_Member"> | number
    joinedAt?: DateTimeFilter<"Team_Member"> | Date | string
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type Team_MemberOrderByWithRelationInput = {
    teamId?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
    team?: TeamOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type Team_MemberWhereUniqueInput = Prisma.AtLeast<{
    teamId_userId?: Team_MemberTeamIdUserIdCompoundUniqueInput
    AND?: Team_MemberWhereInput | Team_MemberWhereInput[]
    OR?: Team_MemberWhereInput[]
    NOT?: Team_MemberWhereInput | Team_MemberWhereInput[]
    teamId?: IntFilter<"Team_Member"> | number
    userId?: IntFilter<"Team_Member"> | number
    joinedAt?: DateTimeFilter<"Team_Member"> | Date | string
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "teamId_userId">

  export type Team_MemberOrderByWithAggregationInput = {
    teamId?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
    _count?: Team_MemberCountOrderByAggregateInput
    _avg?: Team_MemberAvgOrderByAggregateInput
    _max?: Team_MemberMaxOrderByAggregateInput
    _min?: Team_MemberMinOrderByAggregateInput
    _sum?: Team_MemberSumOrderByAggregateInput
  }

  export type Team_MemberScalarWhereWithAggregatesInput = {
    AND?: Team_MemberScalarWhereWithAggregatesInput | Team_MemberScalarWhereWithAggregatesInput[]
    OR?: Team_MemberScalarWhereWithAggregatesInput[]
    NOT?: Team_MemberScalarWhereWithAggregatesInput | Team_MemberScalarWhereWithAggregatesInput[]
    teamId?: IntWithAggregatesFilter<"Team_Member"> | number
    userId?: IntWithAggregatesFilter<"Team_Member"> | number
    joinedAt?: DateTimeWithAggregatesFilter<"Team_Member"> | Date | string
  }

  export type EnvironmentWhereInput = {
    AND?: EnvironmentWhereInput | EnvironmentWhereInput[]
    OR?: EnvironmentWhereInput[]
    NOT?: EnvironmentWhereInput | EnvironmentWhereInput[]
    id?: IntFilter<"Environment"> | number
    name?: StringFilter<"Environment"> | string
    description?: StringNullableFilter<"Environment"> | string | null
    createdAt?: DateTimeFilter<"Environment"> | Date | string
    componentInstances?: ComponentInstanceListRelationFilter
  }

  export type EnvironmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    componentInstances?: ComponentInstanceOrderByRelationAggregateInput
  }

  export type EnvironmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: EnvironmentWhereInput | EnvironmentWhereInput[]
    OR?: EnvironmentWhereInput[]
    NOT?: EnvironmentWhereInput | EnvironmentWhereInput[]
    description?: StringNullableFilter<"Environment"> | string | null
    createdAt?: DateTimeFilter<"Environment"> | Date | string
    componentInstances?: ComponentInstanceListRelationFilter
  }, "id" | "name">

  export type EnvironmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: EnvironmentCountOrderByAggregateInput
    _avg?: EnvironmentAvgOrderByAggregateInput
    _max?: EnvironmentMaxOrderByAggregateInput
    _min?: EnvironmentMinOrderByAggregateInput
    _sum?: EnvironmentSumOrderByAggregateInput
  }

  export type EnvironmentScalarWhereWithAggregatesInput = {
    AND?: EnvironmentScalarWhereWithAggregatesInput | EnvironmentScalarWhereWithAggregatesInput[]
    OR?: EnvironmentScalarWhereWithAggregatesInput[]
    NOT?: EnvironmentScalarWhereWithAggregatesInput | EnvironmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Environment"> | number
    name?: StringWithAggregatesFilter<"Environment"> | string
    description?: StringNullableWithAggregatesFilter<"Environment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Environment"> | Date | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    image?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    components?: ComponentListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    components?: ComponentOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    description?: StringNullableFilter<"Category"> | string | null
    image?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    components?: ComponentListRelationFilter
  }, "id" | "name">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
    description?: StringNullableWithAggregatesFilter<"Category"> | string | null
    image?: StringNullableWithAggregatesFilter<"Category"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type ComponentWhereInput = {
    AND?: ComponentWhereInput | ComponentWhereInput[]
    OR?: ComponentWhereInput[]
    NOT?: ComponentWhereInput | ComponentWhereInput[]
    id?: IntFilter<"Component"> | number
    name?: StringFilter<"Component"> | string
    description?: StringNullableFilter<"Component"> | string | null
    status?: EnumComponent_statusFilter<"Component"> | $Enums.Component_status
    categoryId?: IntNullableFilter<"Component"> | number | null
    teamId?: IntNullableFilter<"Component"> | number | null
    createdAt?: DateTimeFilter<"Component"> | Date | string
    category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    team?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
    tags?: ComponentTagListRelationFilter
    instances?: ComponentInstanceListRelationFilter
    adrComponents?: ADR_ComponentListRelationFilter
  }

  export type ComponentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    teamId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    category?: CategoryOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
    tags?: ComponentTagOrderByRelationAggregateInput
    instances?: ComponentInstanceOrderByRelationAggregateInput
    adrComponents?: ADR_ComponentOrderByRelationAggregateInput
  }

  export type ComponentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: ComponentWhereInput | ComponentWhereInput[]
    OR?: ComponentWhereInput[]
    NOT?: ComponentWhereInput | ComponentWhereInput[]
    description?: StringNullableFilter<"Component"> | string | null
    status?: EnumComponent_statusFilter<"Component"> | $Enums.Component_status
    categoryId?: IntNullableFilter<"Component"> | number | null
    teamId?: IntNullableFilter<"Component"> | number | null
    createdAt?: DateTimeFilter<"Component"> | Date | string
    category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    team?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
    tags?: ComponentTagListRelationFilter
    instances?: ComponentInstanceListRelationFilter
    adrComponents?: ADR_ComponentListRelationFilter
  }, "id" | "name">

  export type ComponentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    teamId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ComponentCountOrderByAggregateInput
    _avg?: ComponentAvgOrderByAggregateInput
    _max?: ComponentMaxOrderByAggregateInput
    _min?: ComponentMinOrderByAggregateInput
    _sum?: ComponentSumOrderByAggregateInput
  }

  export type ComponentScalarWhereWithAggregatesInput = {
    AND?: ComponentScalarWhereWithAggregatesInput | ComponentScalarWhereWithAggregatesInput[]
    OR?: ComponentScalarWhereWithAggregatesInput[]
    NOT?: ComponentScalarWhereWithAggregatesInput | ComponentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Component"> | number
    name?: StringWithAggregatesFilter<"Component"> | string
    description?: StringNullableWithAggregatesFilter<"Component"> | string | null
    status?: EnumComponent_statusWithAggregatesFilter<"Component"> | $Enums.Component_status
    categoryId?: IntNullableWithAggregatesFilter<"Component"> | number | null
    teamId?: IntNullableWithAggregatesFilter<"Component"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Component"> | Date | string
  }

  export type ComponentInstanceWhereInput = {
    AND?: ComponentInstanceWhereInput | ComponentInstanceWhereInput[]
    OR?: ComponentInstanceWhereInput[]
    NOT?: ComponentInstanceWhereInput | ComponentInstanceWhereInput[]
    id?: IntFilter<"ComponentInstance"> | number
    componentId?: IntFilter<"ComponentInstance"> | number
    environmentId?: IntFilter<"ComponentInstance"> | number
    hostname?: StringNullableFilter<"ComponentInstance"> | string | null
    specs?: JsonNullableFilter<"ComponentInstance">
    createdAt?: DateTimeFilter<"ComponentInstance"> | Date | string
    component?: XOR<ComponentRelationFilter, ComponentWhereInput>
    environment?: XOR<EnvironmentRelationFilter, EnvironmentWhereInput>
    adrInstances?: ADR_ComponentInstanceListRelationFilter
  }

  export type ComponentInstanceOrderByWithRelationInput = {
    id?: SortOrder
    componentId?: SortOrder
    environmentId?: SortOrder
    hostname?: SortOrderInput | SortOrder
    specs?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    component?: ComponentOrderByWithRelationInput
    environment?: EnvironmentOrderByWithRelationInput
    adrInstances?: ADR_ComponentInstanceOrderByRelationAggregateInput
  }

  export type ComponentInstanceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    uniq_comp_env?: ComponentInstanceUniq_comp_envCompoundUniqueInput
    AND?: ComponentInstanceWhereInput | ComponentInstanceWhereInput[]
    OR?: ComponentInstanceWhereInput[]
    NOT?: ComponentInstanceWhereInput | ComponentInstanceWhereInput[]
    componentId?: IntFilter<"ComponentInstance"> | number
    environmentId?: IntFilter<"ComponentInstance"> | number
    hostname?: StringNullableFilter<"ComponentInstance"> | string | null
    specs?: JsonNullableFilter<"ComponentInstance">
    createdAt?: DateTimeFilter<"ComponentInstance"> | Date | string
    component?: XOR<ComponentRelationFilter, ComponentWhereInput>
    environment?: XOR<EnvironmentRelationFilter, EnvironmentWhereInput>
    adrInstances?: ADR_ComponentInstanceListRelationFilter
  }, "id" | "uniq_comp_env">

  export type ComponentInstanceOrderByWithAggregationInput = {
    id?: SortOrder
    componentId?: SortOrder
    environmentId?: SortOrder
    hostname?: SortOrderInput | SortOrder
    specs?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ComponentInstanceCountOrderByAggregateInput
    _avg?: ComponentInstanceAvgOrderByAggregateInput
    _max?: ComponentInstanceMaxOrderByAggregateInput
    _min?: ComponentInstanceMinOrderByAggregateInput
    _sum?: ComponentInstanceSumOrderByAggregateInput
  }

  export type ComponentInstanceScalarWhereWithAggregatesInput = {
    AND?: ComponentInstanceScalarWhereWithAggregatesInput | ComponentInstanceScalarWhereWithAggregatesInput[]
    OR?: ComponentInstanceScalarWhereWithAggregatesInput[]
    NOT?: ComponentInstanceScalarWhereWithAggregatesInput | ComponentInstanceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ComponentInstance"> | number
    componentId?: IntWithAggregatesFilter<"ComponentInstance"> | number
    environmentId?: IntWithAggregatesFilter<"ComponentInstance"> | number
    hostname?: StringNullableWithAggregatesFilter<"ComponentInstance"> | string | null
    specs?: JsonNullableWithAggregatesFilter<"ComponentInstance">
    createdAt?: DateTimeWithAggregatesFilter<"ComponentInstance"> | Date | string
  }

  export type ADRWhereInput = {
    AND?: ADRWhereInput | ADRWhereInput[]
    OR?: ADRWhereInput[]
    NOT?: ADRWhereInput | ADRWhereInput[]
    id?: IntFilter<"ADR"> | number
    title?: StringFilter<"ADR"> | string
    description?: StringFilter<"ADR"> | string
    status?: EnumADR_statusFilter<"ADR"> | $Enums.ADR_status
    createdAt?: DateTimeFilter<"ADR"> | Date | string
    tags?: ADRTagListRelationFilter
    participants?: ADR_ParticipantListRelationFilter
    componentInstances?: ADR_ComponentInstanceListRelationFilter
    components?: ADR_ComponentListRelationFilter
  }

  export type ADROrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    tags?: ADRTagOrderByRelationAggregateInput
    participants?: ADR_ParticipantOrderByRelationAggregateInput
    componentInstances?: ADR_ComponentInstanceOrderByRelationAggregateInput
    components?: ADR_ComponentOrderByRelationAggregateInput
  }

  export type ADRWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ADRWhereInput | ADRWhereInput[]
    OR?: ADRWhereInput[]
    NOT?: ADRWhereInput | ADRWhereInput[]
    title?: StringFilter<"ADR"> | string
    description?: StringFilter<"ADR"> | string
    status?: EnumADR_statusFilter<"ADR"> | $Enums.ADR_status
    createdAt?: DateTimeFilter<"ADR"> | Date | string
    tags?: ADRTagListRelationFilter
    participants?: ADR_ParticipantListRelationFilter
    componentInstances?: ADR_ComponentInstanceListRelationFilter
    components?: ADR_ComponentListRelationFilter
  }, "id">

  export type ADROrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: ADRCountOrderByAggregateInput
    _avg?: ADRAvgOrderByAggregateInput
    _max?: ADRMaxOrderByAggregateInput
    _min?: ADRMinOrderByAggregateInput
    _sum?: ADRSumOrderByAggregateInput
  }

  export type ADRScalarWhereWithAggregatesInput = {
    AND?: ADRScalarWhereWithAggregatesInput | ADRScalarWhereWithAggregatesInput[]
    OR?: ADRScalarWhereWithAggregatesInput[]
    NOT?: ADRScalarWhereWithAggregatesInput | ADRScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ADR"> | number
    title?: StringWithAggregatesFilter<"ADR"> | string
    description?: StringWithAggregatesFilter<"ADR"> | string
    status?: EnumADR_statusWithAggregatesFilter<"ADR"> | $Enums.ADR_status
    createdAt?: DateTimeWithAggregatesFilter<"ADR"> | Date | string
  }

  export type ADR_ParticipantWhereInput = {
    AND?: ADR_ParticipantWhereInput | ADR_ParticipantWhereInput[]
    OR?: ADR_ParticipantWhereInput[]
    NOT?: ADR_ParticipantWhereInput | ADR_ParticipantWhereInput[]
    id?: IntFilter<"ADR_Participant"> | number
    adrId?: IntFilter<"ADR_Participant"> | number
    userId?: IntFilter<"ADR_Participant"> | number
    role?: EnumParticipantRoleFilter<"ADR_Participant"> | $Enums.ParticipantRole
    createdAt?: DateTimeFilter<"ADR_Participant"> | Date | string
    adr?: XOR<ADRRelationFilter, ADRWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ADR_ParticipantOrderByWithRelationInput = {
    id?: SortOrder
    adrId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    adr?: ADROrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ADR_ParticipantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    adr_user?: ADR_ParticipantAdr_userCompoundUniqueInput
    AND?: ADR_ParticipantWhereInput | ADR_ParticipantWhereInput[]
    OR?: ADR_ParticipantWhereInput[]
    NOT?: ADR_ParticipantWhereInput | ADR_ParticipantWhereInput[]
    adrId?: IntFilter<"ADR_Participant"> | number
    userId?: IntFilter<"ADR_Participant"> | number
    role?: EnumParticipantRoleFilter<"ADR_Participant"> | $Enums.ParticipantRole
    createdAt?: DateTimeFilter<"ADR_Participant"> | Date | string
    adr?: XOR<ADRRelationFilter, ADRWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "adr_user">

  export type ADR_ParticipantOrderByWithAggregationInput = {
    id?: SortOrder
    adrId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    _count?: ADR_ParticipantCountOrderByAggregateInput
    _avg?: ADR_ParticipantAvgOrderByAggregateInput
    _max?: ADR_ParticipantMaxOrderByAggregateInput
    _min?: ADR_ParticipantMinOrderByAggregateInput
    _sum?: ADR_ParticipantSumOrderByAggregateInput
  }

  export type ADR_ParticipantScalarWhereWithAggregatesInput = {
    AND?: ADR_ParticipantScalarWhereWithAggregatesInput | ADR_ParticipantScalarWhereWithAggregatesInput[]
    OR?: ADR_ParticipantScalarWhereWithAggregatesInput[]
    NOT?: ADR_ParticipantScalarWhereWithAggregatesInput | ADR_ParticipantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ADR_Participant"> | number
    adrId?: IntWithAggregatesFilter<"ADR_Participant"> | number
    userId?: IntWithAggregatesFilter<"ADR_Participant"> | number
    role?: EnumParticipantRoleWithAggregatesFilter<"ADR_Participant"> | $Enums.ParticipantRole
    createdAt?: DateTimeWithAggregatesFilter<"ADR_Participant"> | Date | string
  }

  export type ADR_ComponentInstanceWhereInput = {
    AND?: ADR_ComponentInstanceWhereInput | ADR_ComponentInstanceWhereInput[]
    OR?: ADR_ComponentInstanceWhereInput[]
    NOT?: ADR_ComponentInstanceWhereInput | ADR_ComponentInstanceWhereInput[]
    adrId?: IntFilter<"ADR_ComponentInstance"> | number
    instanceId?: IntFilter<"ADR_ComponentInstance"> | number
    impactLevel?: EnumImpactLevelFilter<"ADR_ComponentInstance"> | $Enums.ImpactLevel
    adr?: XOR<ADRRelationFilter, ADRWhereInput>
    instance?: XOR<ComponentInstanceRelationFilter, ComponentInstanceWhereInput>
  }

  export type ADR_ComponentInstanceOrderByWithRelationInput = {
    adrId?: SortOrder
    instanceId?: SortOrder
    impactLevel?: SortOrder
    adr?: ADROrderByWithRelationInput
    instance?: ComponentInstanceOrderByWithRelationInput
  }

  export type ADR_ComponentInstanceWhereUniqueInput = Prisma.AtLeast<{
    adrId_instanceId?: ADR_ComponentInstanceAdrIdInstanceIdCompoundUniqueInput
    AND?: ADR_ComponentInstanceWhereInput | ADR_ComponentInstanceWhereInput[]
    OR?: ADR_ComponentInstanceWhereInput[]
    NOT?: ADR_ComponentInstanceWhereInput | ADR_ComponentInstanceWhereInput[]
    adrId?: IntFilter<"ADR_ComponentInstance"> | number
    instanceId?: IntFilter<"ADR_ComponentInstance"> | number
    impactLevel?: EnumImpactLevelFilter<"ADR_ComponentInstance"> | $Enums.ImpactLevel
    adr?: XOR<ADRRelationFilter, ADRWhereInput>
    instance?: XOR<ComponentInstanceRelationFilter, ComponentInstanceWhereInput>
  }, "adrId_instanceId">

  export type ADR_ComponentInstanceOrderByWithAggregationInput = {
    adrId?: SortOrder
    instanceId?: SortOrder
    impactLevel?: SortOrder
    _count?: ADR_ComponentInstanceCountOrderByAggregateInput
    _avg?: ADR_ComponentInstanceAvgOrderByAggregateInput
    _max?: ADR_ComponentInstanceMaxOrderByAggregateInput
    _min?: ADR_ComponentInstanceMinOrderByAggregateInput
    _sum?: ADR_ComponentInstanceSumOrderByAggregateInput
  }

  export type ADR_ComponentInstanceScalarWhereWithAggregatesInput = {
    AND?: ADR_ComponentInstanceScalarWhereWithAggregatesInput | ADR_ComponentInstanceScalarWhereWithAggregatesInput[]
    OR?: ADR_ComponentInstanceScalarWhereWithAggregatesInput[]
    NOT?: ADR_ComponentInstanceScalarWhereWithAggregatesInput | ADR_ComponentInstanceScalarWhereWithAggregatesInput[]
    adrId?: IntWithAggregatesFilter<"ADR_ComponentInstance"> | number
    instanceId?: IntWithAggregatesFilter<"ADR_ComponentInstance"> | number
    impactLevel?: EnumImpactLevelWithAggregatesFilter<"ADR_ComponentInstance"> | $Enums.ImpactLevel
  }

  export type ADR_ComponentWhereInput = {
    AND?: ADR_ComponentWhereInput | ADR_ComponentWhereInput[]
    OR?: ADR_ComponentWhereInput[]
    NOT?: ADR_ComponentWhereInput | ADR_ComponentWhereInput[]
    adrId?: IntFilter<"ADR_Component"> | number
    componentId?: IntFilter<"ADR_Component"> | number
    adr?: XOR<ADRRelationFilter, ADRWhereInput>
    component?: XOR<ComponentRelationFilter, ComponentWhereInput>
  }

  export type ADR_ComponentOrderByWithRelationInput = {
    adrId?: SortOrder
    componentId?: SortOrder
    adr?: ADROrderByWithRelationInput
    component?: ComponentOrderByWithRelationInput
  }

  export type ADR_ComponentWhereUniqueInput = Prisma.AtLeast<{
    adrId_componentId?: ADR_ComponentAdrIdComponentIdCompoundUniqueInput
    AND?: ADR_ComponentWhereInput | ADR_ComponentWhereInput[]
    OR?: ADR_ComponentWhereInput[]
    NOT?: ADR_ComponentWhereInput | ADR_ComponentWhereInput[]
    adrId?: IntFilter<"ADR_Component"> | number
    componentId?: IntFilter<"ADR_Component"> | number
    adr?: XOR<ADRRelationFilter, ADRWhereInput>
    component?: XOR<ComponentRelationFilter, ComponentWhereInput>
  }, "adrId_componentId">

  export type ADR_ComponentOrderByWithAggregationInput = {
    adrId?: SortOrder
    componentId?: SortOrder
    _count?: ADR_ComponentCountOrderByAggregateInput
    _avg?: ADR_ComponentAvgOrderByAggregateInput
    _max?: ADR_ComponentMaxOrderByAggregateInput
    _min?: ADR_ComponentMinOrderByAggregateInput
    _sum?: ADR_ComponentSumOrderByAggregateInput
  }

  export type ADR_ComponentScalarWhereWithAggregatesInput = {
    AND?: ADR_ComponentScalarWhereWithAggregatesInput | ADR_ComponentScalarWhereWithAggregatesInput[]
    OR?: ADR_ComponentScalarWhereWithAggregatesInput[]
    NOT?: ADR_ComponentScalarWhereWithAggregatesInput | ADR_ComponentScalarWhereWithAggregatesInput[]
    adrId?: IntWithAggregatesFilter<"ADR_Component"> | number
    componentId?: IntWithAggregatesFilter<"ADR_Component"> | number
  }

  export type RoadmapItemWhereInput = {
    AND?: RoadmapItemWhereInput | RoadmapItemWhereInput[]
    OR?: RoadmapItemWhereInput[]
    NOT?: RoadmapItemWhereInput | RoadmapItemWhereInput[]
    id?: IntFilter<"RoadmapItem"> | number
    title?: StringFilter<"RoadmapItem"> | string
    description?: StringNullableFilter<"RoadmapItem"> | string | null
    componentId?: IntNullableFilter<"RoadmapItem"> | number | null
    typeId?: IntFilter<"RoadmapItem"> | number
    status?: EnumRoadmapItem_statusFilter<"RoadmapItem"> | $Enums.RoadmapItem_status
    dueDate?: DateTimeNullableFilter<"RoadmapItem"> | Date | string | null
    createdAt?: DateTimeFilter<"RoadmapItem"> | Date | string
    type?: XOR<RoadmapTypeRelationFilter, RoadmapTypeWhereInput>
  }

  export type RoadmapItemOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    componentId?: SortOrderInput | SortOrder
    typeId?: SortOrder
    status?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    type?: RoadmapTypeOrderByWithRelationInput
  }

  export type RoadmapItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RoadmapItemWhereInput | RoadmapItemWhereInput[]
    OR?: RoadmapItemWhereInput[]
    NOT?: RoadmapItemWhereInput | RoadmapItemWhereInput[]
    title?: StringFilter<"RoadmapItem"> | string
    description?: StringNullableFilter<"RoadmapItem"> | string | null
    componentId?: IntNullableFilter<"RoadmapItem"> | number | null
    typeId?: IntFilter<"RoadmapItem"> | number
    status?: EnumRoadmapItem_statusFilter<"RoadmapItem"> | $Enums.RoadmapItem_status
    dueDate?: DateTimeNullableFilter<"RoadmapItem"> | Date | string | null
    createdAt?: DateTimeFilter<"RoadmapItem"> | Date | string
    type?: XOR<RoadmapTypeRelationFilter, RoadmapTypeWhereInput>
  }, "id">

  export type RoadmapItemOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    componentId?: SortOrderInput | SortOrder
    typeId?: SortOrder
    status?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: RoadmapItemCountOrderByAggregateInput
    _avg?: RoadmapItemAvgOrderByAggregateInput
    _max?: RoadmapItemMaxOrderByAggregateInput
    _min?: RoadmapItemMinOrderByAggregateInput
    _sum?: RoadmapItemSumOrderByAggregateInput
  }

  export type RoadmapItemScalarWhereWithAggregatesInput = {
    AND?: RoadmapItemScalarWhereWithAggregatesInput | RoadmapItemScalarWhereWithAggregatesInput[]
    OR?: RoadmapItemScalarWhereWithAggregatesInput[]
    NOT?: RoadmapItemScalarWhereWithAggregatesInput | RoadmapItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RoadmapItem"> | number
    title?: StringWithAggregatesFilter<"RoadmapItem"> | string
    description?: StringNullableWithAggregatesFilter<"RoadmapItem"> | string | null
    componentId?: IntNullableWithAggregatesFilter<"RoadmapItem"> | number | null
    typeId?: IntWithAggregatesFilter<"RoadmapItem"> | number
    status?: EnumRoadmapItem_statusWithAggregatesFilter<"RoadmapItem"> | $Enums.RoadmapItem_status
    dueDate?: DateTimeNullableWithAggregatesFilter<"RoadmapItem"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RoadmapItem"> | Date | string
  }

  export type RoadmapTypeWhereInput = {
    AND?: RoadmapTypeWhereInput | RoadmapTypeWhereInput[]
    OR?: RoadmapTypeWhereInput[]
    NOT?: RoadmapTypeWhereInput | RoadmapTypeWhereInput[]
    id?: IntFilter<"RoadmapType"> | number
    name?: StringFilter<"RoadmapType"> | string
    description?: StringNullableFilter<"RoadmapType"> | string | null
    colorHex?: StringNullableFilter<"RoadmapType"> | string | null
    createdAt?: DateTimeFilter<"RoadmapType"> | Date | string
    items?: RoadmapItemListRelationFilter
  }

  export type RoadmapTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    colorHex?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    items?: RoadmapItemOrderByRelationAggregateInput
  }

  export type RoadmapTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: RoadmapTypeWhereInput | RoadmapTypeWhereInput[]
    OR?: RoadmapTypeWhereInput[]
    NOT?: RoadmapTypeWhereInput | RoadmapTypeWhereInput[]
    description?: StringNullableFilter<"RoadmapType"> | string | null
    colorHex?: StringNullableFilter<"RoadmapType"> | string | null
    createdAt?: DateTimeFilter<"RoadmapType"> | Date | string
    items?: RoadmapItemListRelationFilter
  }, "id" | "name">

  export type RoadmapTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    colorHex?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: RoadmapTypeCountOrderByAggregateInput
    _avg?: RoadmapTypeAvgOrderByAggregateInput
    _max?: RoadmapTypeMaxOrderByAggregateInput
    _min?: RoadmapTypeMinOrderByAggregateInput
    _sum?: RoadmapTypeSumOrderByAggregateInput
  }

  export type RoadmapTypeScalarWhereWithAggregatesInput = {
    AND?: RoadmapTypeScalarWhereWithAggregatesInput | RoadmapTypeScalarWhereWithAggregatesInput[]
    OR?: RoadmapTypeScalarWhereWithAggregatesInput[]
    NOT?: RoadmapTypeScalarWhereWithAggregatesInput | RoadmapTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RoadmapType"> | number
    name?: StringWithAggregatesFilter<"RoadmapType"> | string
    description?: StringNullableWithAggregatesFilter<"RoadmapType"> | string | null
    colorHex?: StringNullableWithAggregatesFilter<"RoadmapType"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RoadmapType"> | Date | string
  }

  export type LogWhereInput = {
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    id?: IntFilter<"Log"> | number
    userId?: IntNullableFilter<"Log"> | number | null
    level?: EnumLogLevelFilter<"Log"> | $Enums.LogLevel
    message?: StringFilter<"Log"> | string
    metadata?: JsonNullableFilter<"Log">
    createdAt?: DateTimeFilter<"Log"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type LogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    level?: SortOrder
    message?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type LogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    userId?: IntNullableFilter<"Log"> | number | null
    level?: EnumLogLevelFilter<"Log"> | $Enums.LogLevel
    message?: StringFilter<"Log"> | string
    metadata?: JsonNullableFilter<"Log">
    createdAt?: DateTimeFilter<"Log"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type LogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    level?: SortOrder
    message?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: LogCountOrderByAggregateInput
    _avg?: LogAvgOrderByAggregateInput
    _max?: LogMaxOrderByAggregateInput
    _min?: LogMinOrderByAggregateInput
    _sum?: LogSumOrderByAggregateInput
  }

  export type LogScalarWhereWithAggregatesInput = {
    AND?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    OR?: LogScalarWhereWithAggregatesInput[]
    NOT?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Log"> | number
    userId?: IntNullableWithAggregatesFilter<"Log"> | number | null
    level?: EnumLogLevelWithAggregatesFilter<"Log"> | $Enums.LogLevel
    message?: StringWithAggregatesFilter<"Log"> | string
    metadata?: JsonNullableWithAggregatesFilter<"Log">
    createdAt?: DateTimeWithAggregatesFilter<"Log"> | Date | string
  }

  export type GlossaryTermWhereInput = {
    AND?: GlossaryTermWhereInput | GlossaryTermWhereInput[]
    OR?: GlossaryTermWhereInput[]
    NOT?: GlossaryTermWhereInput | GlossaryTermWhereInput[]
    id?: IntFilter<"GlossaryTerm"> | number
    term?: StringFilter<"GlossaryTerm"> | string
    definition?: StringFilter<"GlossaryTerm"> | string
    status?: EnumGlossaryStatusFilter<"GlossaryTerm"> | $Enums.GlossaryStatus
    createdAt?: DateTimeFilter<"GlossaryTerm"> | Date | string
  }

  export type GlossaryTermOrderByWithRelationInput = {
    id?: SortOrder
    term?: SortOrder
    definition?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type GlossaryTermWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    term?: string
    AND?: GlossaryTermWhereInput | GlossaryTermWhereInput[]
    OR?: GlossaryTermWhereInput[]
    NOT?: GlossaryTermWhereInput | GlossaryTermWhereInput[]
    definition?: StringFilter<"GlossaryTerm"> | string
    status?: EnumGlossaryStatusFilter<"GlossaryTerm"> | $Enums.GlossaryStatus
    createdAt?: DateTimeFilter<"GlossaryTerm"> | Date | string
  }, "id" | "term">

  export type GlossaryTermOrderByWithAggregationInput = {
    id?: SortOrder
    term?: SortOrder
    definition?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: GlossaryTermCountOrderByAggregateInput
    _avg?: GlossaryTermAvgOrderByAggregateInput
    _max?: GlossaryTermMaxOrderByAggregateInput
    _min?: GlossaryTermMinOrderByAggregateInput
    _sum?: GlossaryTermSumOrderByAggregateInput
  }

  export type GlossaryTermScalarWhereWithAggregatesInput = {
    AND?: GlossaryTermScalarWhereWithAggregatesInput | GlossaryTermScalarWhereWithAggregatesInput[]
    OR?: GlossaryTermScalarWhereWithAggregatesInput[]
    NOT?: GlossaryTermScalarWhereWithAggregatesInput | GlossaryTermScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GlossaryTerm"> | number
    term?: StringWithAggregatesFilter<"GlossaryTerm"> | string
    definition?: StringWithAggregatesFilter<"GlossaryTerm"> | string
    status?: EnumGlossaryStatusWithAggregatesFilter<"GlossaryTerm"> | $Enums.GlossaryStatus
    createdAt?: DateTimeWithAggregatesFilter<"GlossaryTerm"> | Date | string
  }

  export type ComponentTagWhereInput = {
    AND?: ComponentTagWhereInput | ComponentTagWhereInput[]
    OR?: ComponentTagWhereInput[]
    NOT?: ComponentTagWhereInput | ComponentTagWhereInput[]
    id?: IntFilter<"ComponentTag"> | number
    componentId?: IntFilter<"ComponentTag"> | number
    tag?: StringFilter<"ComponentTag"> | string
    component?: XOR<ComponentRelationFilter, ComponentWhereInput>
  }

  export type ComponentTagOrderByWithRelationInput = {
    id?: SortOrder
    componentId?: SortOrder
    tag?: SortOrder
    component?: ComponentOrderByWithRelationInput
  }

  export type ComponentTagWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cmp_tag?: ComponentTagCmp_tagCompoundUniqueInput
    AND?: ComponentTagWhereInput | ComponentTagWhereInput[]
    OR?: ComponentTagWhereInput[]
    NOT?: ComponentTagWhereInput | ComponentTagWhereInput[]
    componentId?: IntFilter<"ComponentTag"> | number
    tag?: StringFilter<"ComponentTag"> | string
    component?: XOR<ComponentRelationFilter, ComponentWhereInput>
  }, "id" | "cmp_tag">

  export type ComponentTagOrderByWithAggregationInput = {
    id?: SortOrder
    componentId?: SortOrder
    tag?: SortOrder
    _count?: ComponentTagCountOrderByAggregateInput
    _avg?: ComponentTagAvgOrderByAggregateInput
    _max?: ComponentTagMaxOrderByAggregateInput
    _min?: ComponentTagMinOrderByAggregateInput
    _sum?: ComponentTagSumOrderByAggregateInput
  }

  export type ComponentTagScalarWhereWithAggregatesInput = {
    AND?: ComponentTagScalarWhereWithAggregatesInput | ComponentTagScalarWhereWithAggregatesInput[]
    OR?: ComponentTagScalarWhereWithAggregatesInput[]
    NOT?: ComponentTagScalarWhereWithAggregatesInput | ComponentTagScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ComponentTag"> | number
    componentId?: IntWithAggregatesFilter<"ComponentTag"> | number
    tag?: StringWithAggregatesFilter<"ComponentTag"> | string
  }

  export type RelationshipTagWhereInput = {
    AND?: RelationshipTagWhereInput | RelationshipTagWhereInput[]
    OR?: RelationshipTagWhereInput[]
    NOT?: RelationshipTagWhereInput | RelationshipTagWhereInput[]
    id?: IntFilter<"RelationshipTag"> | number
    sourceId?: IntFilter<"RelationshipTag"> | number
    targetId?: IntFilter<"RelationshipTag"> | number
    tag?: StringFilter<"RelationshipTag"> | string
  }

  export type RelationshipTagOrderByWithRelationInput = {
    id?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
    tag?: SortOrder
  }

  export type RelationshipTagWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    rel_tag?: RelationshipTagRel_tagCompoundUniqueInput
    AND?: RelationshipTagWhereInput | RelationshipTagWhereInput[]
    OR?: RelationshipTagWhereInput[]
    NOT?: RelationshipTagWhereInput | RelationshipTagWhereInput[]
    sourceId?: IntFilter<"RelationshipTag"> | number
    targetId?: IntFilter<"RelationshipTag"> | number
    tag?: StringFilter<"RelationshipTag"> | string
  }, "id" | "rel_tag">

  export type RelationshipTagOrderByWithAggregationInput = {
    id?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
    tag?: SortOrder
    _count?: RelationshipTagCountOrderByAggregateInput
    _avg?: RelationshipTagAvgOrderByAggregateInput
    _max?: RelationshipTagMaxOrderByAggregateInput
    _min?: RelationshipTagMinOrderByAggregateInput
    _sum?: RelationshipTagSumOrderByAggregateInput
  }

  export type RelationshipTagScalarWhereWithAggregatesInput = {
    AND?: RelationshipTagScalarWhereWithAggregatesInput | RelationshipTagScalarWhereWithAggregatesInput[]
    OR?: RelationshipTagScalarWhereWithAggregatesInput[]
    NOT?: RelationshipTagScalarWhereWithAggregatesInput | RelationshipTagScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RelationshipTag"> | number
    sourceId?: IntWithAggregatesFilter<"RelationshipTag"> | number
    targetId?: IntWithAggregatesFilter<"RelationshipTag"> | number
    tag?: StringWithAggregatesFilter<"RelationshipTag"> | string
  }

  export type ADRTagWhereInput = {
    AND?: ADRTagWhereInput | ADRTagWhereInput[]
    OR?: ADRTagWhereInput[]
    NOT?: ADRTagWhereInput | ADRTagWhereInput[]
    id?: IntFilter<"ADRTag"> | number
    adrId?: IntFilter<"ADRTag"> | number
    tag?: StringFilter<"ADRTag"> | string
    adr?: XOR<ADRRelationFilter, ADRWhereInput>
  }

  export type ADRTagOrderByWithRelationInput = {
    id?: SortOrder
    adrId?: SortOrder
    tag?: SortOrder
    adr?: ADROrderByWithRelationInput
  }

  export type ADRTagWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    adr_tag?: ADRTagAdr_tagCompoundUniqueInput
    AND?: ADRTagWhereInput | ADRTagWhereInput[]
    OR?: ADRTagWhereInput[]
    NOT?: ADRTagWhereInput | ADRTagWhereInput[]
    adrId?: IntFilter<"ADRTag"> | number
    tag?: StringFilter<"ADRTag"> | string
    adr?: XOR<ADRRelationFilter, ADRWhereInput>
  }, "id" | "adr_tag">

  export type ADRTagOrderByWithAggregationInput = {
    id?: SortOrder
    adrId?: SortOrder
    tag?: SortOrder
    _count?: ADRTagCountOrderByAggregateInput
    _avg?: ADRTagAvgOrderByAggregateInput
    _max?: ADRTagMaxOrderByAggregateInput
    _min?: ADRTagMinOrderByAggregateInput
    _sum?: ADRTagSumOrderByAggregateInput
  }

  export type ADRTagScalarWhereWithAggregatesInput = {
    AND?: ADRTagScalarWhereWithAggregatesInput | ADRTagScalarWhereWithAggregatesInput[]
    OR?: ADRTagScalarWhereWithAggregatesInput[]
    NOT?: ADRTagScalarWhereWithAggregatesInput | ADRTagScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ADRTag"> | number
    adrId?: IntWithAggregatesFilter<"ADRTag"> | number
    tag?: StringWithAggregatesFilter<"ADRTag"> | string
  }

  export type UserCreateInput = {
    username: string
    passwordHash: string
    email: string
    role?: $Enums.User_role
    createdAt?: Date | string
    logs?: LogCreateNestedManyWithoutUserInput
    teamMembers?: Team_MemberCreateNestedManyWithoutUserInput
    adrParticipants?: ADR_ParticipantCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    passwordHash: string
    email: string
    role?: $Enums.User_role
    createdAt?: Date | string
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: Team_MemberUncheckedCreateNestedManyWithoutUserInput
    adrParticipants?: ADR_ParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUser_roleFieldUpdateOperationsInput | $Enums.User_role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: LogUpdateManyWithoutUserNestedInput
    teamMembers?: Team_MemberUpdateManyWithoutUserNestedInput
    adrParticipants?: ADR_ParticipantUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUser_roleFieldUpdateOperationsInput | $Enums.User_role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: Team_MemberUncheckedUpdateManyWithoutUserNestedInput
    adrParticipants?: ADR_ParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    passwordHash: string
    email: string
    role?: $Enums.User_role
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUser_roleFieldUpdateOperationsInput | $Enums.User_role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUser_roleFieldUpdateOperationsInput | $Enums.User_role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCreateInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    components?: ComponentCreateNestedManyWithoutTeamInput
    members?: Team_MemberCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    components?: ComponentUncheckedCreateNestedManyWithoutTeamInput
    members?: Team_MemberUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    components?: ComponentUpdateManyWithoutTeamNestedInput
    members?: Team_MemberUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    components?: ComponentUncheckedUpdateManyWithoutTeamNestedInput
    members?: Team_MemberUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
  }

  export type TeamUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Team_MemberCreateInput = {
    joinedAt?: Date | string
    team: TeamCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutTeamMembersInput
  }

  export type Team_MemberUncheckedCreateInput = {
    teamId: number
    userId: number
    joinedAt?: Date | string
  }

  export type Team_MemberUpdateInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutTeamMembersNestedInput
  }

  export type Team_MemberUncheckedUpdateInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Team_MemberCreateManyInput = {
    teamId: number
    userId: number
    joinedAt?: Date | string
  }

  export type Team_MemberUpdateManyMutationInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Team_MemberUncheckedUpdateManyInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnvironmentCreateInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    componentInstances?: ComponentInstanceCreateNestedManyWithoutEnvironmentInput
  }

  export type EnvironmentUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    componentInstances?: ComponentInstanceUncheckedCreateNestedManyWithoutEnvironmentInput
  }

  export type EnvironmentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    componentInstances?: ComponentInstanceUpdateManyWithoutEnvironmentNestedInput
  }

  export type EnvironmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    componentInstances?: ComponentInstanceUncheckedUpdateManyWithoutEnvironmentNestedInput
  }

  export type EnvironmentCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
  }

  export type EnvironmentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnvironmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateInput = {
    name: string
    description?: string | null
    image?: string | null
    createdAt?: Date | string
    components?: ComponentCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    image?: string | null
    createdAt?: Date | string
    components?: ComponentUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    components?: ComponentUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    components?: ComponentUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    image?: string | null
    createdAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentCreateInput = {
    name: string
    description?: string | null
    status: $Enums.Component_status
    createdAt?: Date | string
    category?: CategoryCreateNestedOneWithoutComponentsInput
    team?: TeamCreateNestedOneWithoutComponentsInput
    tags?: ComponentTagCreateNestedManyWithoutComponentInput
    instances?: ComponentInstanceCreateNestedManyWithoutComponentInput
    adrComponents?: ADR_ComponentCreateNestedManyWithoutComponentInput
  }

  export type ComponentUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    status: $Enums.Component_status
    categoryId?: number | null
    teamId?: number | null
    createdAt?: Date | string
    tags?: ComponentTagUncheckedCreateNestedManyWithoutComponentInput
    instances?: ComponentInstanceUncheckedCreateNestedManyWithoutComponentInput
    adrComponents?: ADR_ComponentUncheckedCreateNestedManyWithoutComponentInput
  }

  export type ComponentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponent_statusFieldUpdateOperationsInput | $Enums.Component_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneWithoutComponentsNestedInput
    team?: TeamUpdateOneWithoutComponentsNestedInput
    tags?: ComponentTagUpdateManyWithoutComponentNestedInput
    instances?: ComponentInstanceUpdateManyWithoutComponentNestedInput
    adrComponents?: ADR_ComponentUpdateManyWithoutComponentNestedInput
  }

  export type ComponentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponent_statusFieldUpdateOperationsInput | $Enums.Component_status
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: ComponentTagUncheckedUpdateManyWithoutComponentNestedInput
    instances?: ComponentInstanceUncheckedUpdateManyWithoutComponentNestedInput
    adrComponents?: ADR_ComponentUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type ComponentCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    status: $Enums.Component_status
    categoryId?: number | null
    teamId?: number | null
    createdAt?: Date | string
  }

  export type ComponentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponent_statusFieldUpdateOperationsInput | $Enums.Component_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponent_statusFieldUpdateOperationsInput | $Enums.Component_status
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentInstanceCreateInput = {
    hostname?: string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    component: ComponentCreateNestedOneWithoutInstancesInput
    environment: EnvironmentCreateNestedOneWithoutComponentInstancesInput
    adrInstances?: ADR_ComponentInstanceCreateNestedManyWithoutInstanceInput
  }

  export type ComponentInstanceUncheckedCreateInput = {
    id?: number
    componentId: number
    environmentId: number
    hostname?: string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    adrInstances?: ADR_ComponentInstanceUncheckedCreateNestedManyWithoutInstanceInput
  }

  export type ComponentInstanceUpdateInput = {
    hostname?: NullableStringFieldUpdateOperationsInput | string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    component?: ComponentUpdateOneRequiredWithoutInstancesNestedInput
    environment?: EnvironmentUpdateOneRequiredWithoutComponentInstancesNestedInput
    adrInstances?: ADR_ComponentInstanceUpdateManyWithoutInstanceNestedInput
  }

  export type ComponentInstanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    componentId?: IntFieldUpdateOperationsInput | number
    environmentId?: IntFieldUpdateOperationsInput | number
    hostname?: NullableStringFieldUpdateOperationsInput | string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adrInstances?: ADR_ComponentInstanceUncheckedUpdateManyWithoutInstanceNestedInput
  }

  export type ComponentInstanceCreateManyInput = {
    id?: number
    componentId: number
    environmentId: number
    hostname?: string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ComponentInstanceUpdateManyMutationInput = {
    hostname?: NullableStringFieldUpdateOperationsInput | string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentInstanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    componentId?: IntFieldUpdateOperationsInput | number
    environmentId?: IntFieldUpdateOperationsInput | number
    hostname?: NullableStringFieldUpdateOperationsInput | string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ADRCreateInput = {
    title: string
    description: string
    status: $Enums.ADR_status
    createdAt?: Date | string
    tags?: ADRTagCreateNestedManyWithoutAdrInput
    participants?: ADR_ParticipantCreateNestedManyWithoutAdrInput
    componentInstances?: ADR_ComponentInstanceCreateNestedManyWithoutAdrInput
    components?: ADR_ComponentCreateNestedManyWithoutAdrInput
  }

  export type ADRUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    status: $Enums.ADR_status
    createdAt?: Date | string
    tags?: ADRTagUncheckedCreateNestedManyWithoutAdrInput
    participants?: ADR_ParticipantUncheckedCreateNestedManyWithoutAdrInput
    componentInstances?: ADR_ComponentInstanceUncheckedCreateNestedManyWithoutAdrInput
    components?: ADR_ComponentUncheckedCreateNestedManyWithoutAdrInput
  }

  export type ADRUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumADR_statusFieldUpdateOperationsInput | $Enums.ADR_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: ADRTagUpdateManyWithoutAdrNestedInput
    participants?: ADR_ParticipantUpdateManyWithoutAdrNestedInput
    componentInstances?: ADR_ComponentInstanceUpdateManyWithoutAdrNestedInput
    components?: ADR_ComponentUpdateManyWithoutAdrNestedInput
  }

  export type ADRUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumADR_statusFieldUpdateOperationsInput | $Enums.ADR_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: ADRTagUncheckedUpdateManyWithoutAdrNestedInput
    participants?: ADR_ParticipantUncheckedUpdateManyWithoutAdrNestedInput
    componentInstances?: ADR_ComponentInstanceUncheckedUpdateManyWithoutAdrNestedInput
    components?: ADR_ComponentUncheckedUpdateManyWithoutAdrNestedInput
  }

  export type ADRCreateManyInput = {
    id?: number
    title: string
    description: string
    status: $Enums.ADR_status
    createdAt?: Date | string
  }

  export type ADRUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumADR_statusFieldUpdateOperationsInput | $Enums.ADR_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ADRUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumADR_statusFieldUpdateOperationsInput | $Enums.ADR_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ADR_ParticipantCreateInput = {
    role: $Enums.ParticipantRole
    createdAt?: Date | string
    adr: ADRCreateNestedOneWithoutParticipantsInput
    user: UserCreateNestedOneWithoutAdrParticipantsInput
  }

  export type ADR_ParticipantUncheckedCreateInput = {
    id?: number
    adrId: number
    userId: number
    role: $Enums.ParticipantRole
    createdAt?: Date | string
  }

  export type ADR_ParticipantUpdateInput = {
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adr?: ADRUpdateOneRequiredWithoutParticipantsNestedInput
    user?: UserUpdateOneRequiredWithoutAdrParticipantsNestedInput
  }

  export type ADR_ParticipantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    adrId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ADR_ParticipantCreateManyInput = {
    id?: number
    adrId: number
    userId: number
    role: $Enums.ParticipantRole
    createdAt?: Date | string
  }

  export type ADR_ParticipantUpdateManyMutationInput = {
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ADR_ParticipantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    adrId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ADR_ComponentInstanceCreateInput = {
    impactLevel?: $Enums.ImpactLevel
    adr: ADRCreateNestedOneWithoutComponentInstancesInput
    instance: ComponentInstanceCreateNestedOneWithoutAdrInstancesInput
  }

  export type ADR_ComponentInstanceUncheckedCreateInput = {
    adrId: number
    instanceId: number
    impactLevel?: $Enums.ImpactLevel
  }

  export type ADR_ComponentInstanceUpdateInput = {
    impactLevel?: EnumImpactLevelFieldUpdateOperationsInput | $Enums.ImpactLevel
    adr?: ADRUpdateOneRequiredWithoutComponentInstancesNestedInput
    instance?: ComponentInstanceUpdateOneRequiredWithoutAdrInstancesNestedInput
  }

  export type ADR_ComponentInstanceUncheckedUpdateInput = {
    adrId?: IntFieldUpdateOperationsInput | number
    instanceId?: IntFieldUpdateOperationsInput | number
    impactLevel?: EnumImpactLevelFieldUpdateOperationsInput | $Enums.ImpactLevel
  }

  export type ADR_ComponentInstanceCreateManyInput = {
    adrId: number
    instanceId: number
    impactLevel?: $Enums.ImpactLevel
  }

  export type ADR_ComponentInstanceUpdateManyMutationInput = {
    impactLevel?: EnumImpactLevelFieldUpdateOperationsInput | $Enums.ImpactLevel
  }

  export type ADR_ComponentInstanceUncheckedUpdateManyInput = {
    adrId?: IntFieldUpdateOperationsInput | number
    instanceId?: IntFieldUpdateOperationsInput | number
    impactLevel?: EnumImpactLevelFieldUpdateOperationsInput | $Enums.ImpactLevel
  }

  export type ADR_ComponentCreateInput = {
    adr: ADRCreateNestedOneWithoutComponentsInput
    component: ComponentCreateNestedOneWithoutAdrComponentsInput
  }

  export type ADR_ComponentUncheckedCreateInput = {
    adrId: number
    componentId: number
  }

  export type ADR_ComponentUpdateInput = {
    adr?: ADRUpdateOneRequiredWithoutComponentsNestedInput
    component?: ComponentUpdateOneRequiredWithoutAdrComponentsNestedInput
  }

  export type ADR_ComponentUncheckedUpdateInput = {
    adrId?: IntFieldUpdateOperationsInput | number
    componentId?: IntFieldUpdateOperationsInput | number
  }

  export type ADR_ComponentCreateManyInput = {
    adrId: number
    componentId: number
  }

  export type ADR_ComponentUpdateManyMutationInput = {

  }

  export type ADR_ComponentUncheckedUpdateManyInput = {
    adrId?: IntFieldUpdateOperationsInput | number
    componentId?: IntFieldUpdateOperationsInput | number
  }

  export type RoadmapItemCreateInput = {
    title: string
    description?: string | null
    componentId?: number | null
    status?: $Enums.RoadmapItem_status
    dueDate?: Date | string | null
    createdAt?: Date | string
    type: RoadmapTypeCreateNestedOneWithoutItemsInput
  }

  export type RoadmapItemUncheckedCreateInput = {
    id?: number
    title: string
    description?: string | null
    componentId?: number | null
    typeId: number
    status?: $Enums.RoadmapItem_status
    dueDate?: Date | string | null
    createdAt?: Date | string
  }

  export type RoadmapItemUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumRoadmapItem_statusFieldUpdateOperationsInput | $Enums.RoadmapItem_status
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: RoadmapTypeUpdateOneRequiredWithoutItemsNestedInput
  }

  export type RoadmapItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: NullableIntFieldUpdateOperationsInput | number | null
    typeId?: IntFieldUpdateOperationsInput | number
    status?: EnumRoadmapItem_statusFieldUpdateOperationsInput | $Enums.RoadmapItem_status
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoadmapItemCreateManyInput = {
    id?: number
    title: string
    description?: string | null
    componentId?: number | null
    typeId: number
    status?: $Enums.RoadmapItem_status
    dueDate?: Date | string | null
    createdAt?: Date | string
  }

  export type RoadmapItemUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumRoadmapItem_statusFieldUpdateOperationsInput | $Enums.RoadmapItem_status
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoadmapItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: NullableIntFieldUpdateOperationsInput | number | null
    typeId?: IntFieldUpdateOperationsInput | number
    status?: EnumRoadmapItem_statusFieldUpdateOperationsInput | $Enums.RoadmapItem_status
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoadmapTypeCreateInput = {
    name: string
    description?: string | null
    colorHex?: string | null
    createdAt?: Date | string
    items?: RoadmapItemCreateNestedManyWithoutTypeInput
  }

  export type RoadmapTypeUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    colorHex?: string | null
    createdAt?: Date | string
    items?: RoadmapItemUncheckedCreateNestedManyWithoutTypeInput
  }

  export type RoadmapTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: RoadmapItemUpdateManyWithoutTypeNestedInput
  }

  export type RoadmapTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: RoadmapItemUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type RoadmapTypeCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    colorHex?: string | null
    createdAt?: Date | string
  }

  export type RoadmapTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoadmapTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogCreateInput = {
    level?: $Enums.LogLevel
    message: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutLogsInput
  }

  export type LogUncheckedCreateInput = {
    id?: number
    userId?: number | null
    level?: $Enums.LogLevel
    message: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type LogUpdateInput = {
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    message?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutLogsNestedInput
  }

  export type LogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    message?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogCreateManyInput = {
    id?: number
    userId?: number | null
    level?: $Enums.LogLevel
    message: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type LogUpdateManyMutationInput = {
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    message?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    message?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GlossaryTermCreateInput = {
    term: string
    definition: string
    status?: $Enums.GlossaryStatus
    createdAt?: Date | string
  }

  export type GlossaryTermUncheckedCreateInput = {
    id?: number
    term: string
    definition: string
    status?: $Enums.GlossaryStatus
    createdAt?: Date | string
  }

  export type GlossaryTermUpdateInput = {
    term?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    status?: EnumGlossaryStatusFieldUpdateOperationsInput | $Enums.GlossaryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GlossaryTermUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    term?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    status?: EnumGlossaryStatusFieldUpdateOperationsInput | $Enums.GlossaryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GlossaryTermCreateManyInput = {
    id?: number
    term: string
    definition: string
    status?: $Enums.GlossaryStatus
    createdAt?: Date | string
  }

  export type GlossaryTermUpdateManyMutationInput = {
    term?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    status?: EnumGlossaryStatusFieldUpdateOperationsInput | $Enums.GlossaryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GlossaryTermUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    term?: StringFieldUpdateOperationsInput | string
    definition?: StringFieldUpdateOperationsInput | string
    status?: EnumGlossaryStatusFieldUpdateOperationsInput | $Enums.GlossaryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentTagCreateInput = {
    tag: string
    component: ComponentCreateNestedOneWithoutTagsInput
  }

  export type ComponentTagUncheckedCreateInput = {
    id?: number
    componentId: number
    tag: string
  }

  export type ComponentTagUpdateInput = {
    tag?: StringFieldUpdateOperationsInput | string
    component?: ComponentUpdateOneRequiredWithoutTagsNestedInput
  }

  export type ComponentTagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    componentId?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentTagCreateManyInput = {
    id?: number
    componentId: number
    tag: string
  }

  export type ComponentTagUpdateManyMutationInput = {
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentTagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    componentId?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type RelationshipTagCreateInput = {
    sourceId: number
    targetId: number
    tag: string
  }

  export type RelationshipTagUncheckedCreateInput = {
    id?: number
    sourceId: number
    targetId: number
    tag: string
  }

  export type RelationshipTagUpdateInput = {
    sourceId?: IntFieldUpdateOperationsInput | number
    targetId?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type RelationshipTagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sourceId?: IntFieldUpdateOperationsInput | number
    targetId?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type RelationshipTagCreateManyInput = {
    id?: number
    sourceId: number
    targetId: number
    tag: string
  }

  export type RelationshipTagUpdateManyMutationInput = {
    sourceId?: IntFieldUpdateOperationsInput | number
    targetId?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type RelationshipTagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sourceId?: IntFieldUpdateOperationsInput | number
    targetId?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type ADRTagCreateInput = {
    tag: string
    adr: ADRCreateNestedOneWithoutTagsInput
  }

  export type ADRTagUncheckedCreateInput = {
    id?: number
    adrId: number
    tag: string
  }

  export type ADRTagUpdateInput = {
    tag?: StringFieldUpdateOperationsInput | string
    adr?: ADRUpdateOneRequiredWithoutTagsNestedInput
  }

  export type ADRTagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    adrId?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type ADRTagCreateManyInput = {
    id?: number
    adrId: number
    tag: string
  }

  export type ADRTagUpdateManyMutationInput = {
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type ADRTagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    adrId?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUser_roleFilter<$PrismaModel = never> = {
    equals?: $Enums.User_role | EnumUser_roleFieldRefInput<$PrismaModel>
    in?: $Enums.User_role[]
    notIn?: $Enums.User_role[]
    not?: NestedEnumUser_roleFilter<$PrismaModel> | $Enums.User_role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type LogListRelationFilter = {
    every?: LogWhereInput
    some?: LogWhereInput
    none?: LogWhereInput
  }

  export type Team_MemberListRelationFilter = {
    every?: Team_MemberWhereInput
    some?: Team_MemberWhereInput
    none?: Team_MemberWhereInput
  }

  export type ADR_ParticipantListRelationFilter = {
    every?: ADR_ParticipantWhereInput
    some?: ADR_ParticipantWhereInput
    none?: ADR_ParticipantWhereInput
  }

  export type LogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Team_MemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ADR_ParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUser_roleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.User_role | EnumUser_roleFieldRefInput<$PrismaModel>
    in?: $Enums.User_role[]
    notIn?: $Enums.User_role[]
    not?: NestedEnumUser_roleWithAggregatesFilter<$PrismaModel> | $Enums.User_role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUser_roleFilter<$PrismaModel>
    _max?: NestedEnumUser_roleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ComponentListRelationFilter = {
    every?: ComponentWhereInput
    some?: ComponentWhereInput
    none?: ComponentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ComponentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type TeamRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type Team_MemberTeamIdUserIdCompoundUniqueInput = {
    teamId: number
    userId: number
  }

  export type Team_MemberCountOrderByAggregateInput = {
    teamId?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
  }

  export type Team_MemberAvgOrderByAggregateInput = {
    teamId?: SortOrder
    userId?: SortOrder
  }

  export type Team_MemberMaxOrderByAggregateInput = {
    teamId?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
  }

  export type Team_MemberMinOrderByAggregateInput = {
    teamId?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
  }

  export type Team_MemberSumOrderByAggregateInput = {
    teamId?: SortOrder
    userId?: SortOrder
  }

  export type ComponentInstanceListRelationFilter = {
    every?: ComponentInstanceWhereInput
    some?: ComponentInstanceWhereInput
    none?: ComponentInstanceWhereInput
  }

  export type ComponentInstanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EnvironmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type EnvironmentAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnvironmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type EnvironmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type EnvironmentSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumComponent_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.Component_status | EnumComponent_statusFieldRefInput<$PrismaModel>
    in?: $Enums.Component_status[]
    notIn?: $Enums.Component_status[]
    not?: NestedEnumComponent_statusFilter<$PrismaModel> | $Enums.Component_status
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CategoryNullableRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type TeamNullableRelationFilter = {
    is?: TeamWhereInput | null
    isNot?: TeamWhereInput | null
  }

  export type ComponentTagListRelationFilter = {
    every?: ComponentTagWhereInput
    some?: ComponentTagWhereInput
    none?: ComponentTagWhereInput
  }

  export type ADR_ComponentListRelationFilter = {
    every?: ADR_ComponentWhereInput
    some?: ADR_ComponentWhereInput
    none?: ADR_ComponentWhereInput
  }

  export type ComponentTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ADR_ComponentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComponentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    categoryId?: SortOrder
    teamId?: SortOrder
    createdAt?: SortOrder
  }

  export type ComponentAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    teamId?: SortOrder
  }

  export type ComponentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    categoryId?: SortOrder
    teamId?: SortOrder
    createdAt?: SortOrder
  }

  export type ComponentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    categoryId?: SortOrder
    teamId?: SortOrder
    createdAt?: SortOrder
  }

  export type ComponentSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    teamId?: SortOrder
  }

  export type EnumComponent_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Component_status | EnumComponent_statusFieldRefInput<$PrismaModel>
    in?: $Enums.Component_status[]
    notIn?: $Enums.Component_status[]
    not?: NestedEnumComponent_statusWithAggregatesFilter<$PrismaModel> | $Enums.Component_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComponent_statusFilter<$PrismaModel>
    _max?: NestedEnumComponent_statusFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ComponentRelationFilter = {
    is?: ComponentWhereInput
    isNot?: ComponentWhereInput
  }

  export type EnvironmentRelationFilter = {
    is?: EnvironmentWhereInput
    isNot?: EnvironmentWhereInput
  }

  export type ADR_ComponentInstanceListRelationFilter = {
    every?: ADR_ComponentInstanceWhereInput
    some?: ADR_ComponentInstanceWhereInput
    none?: ADR_ComponentInstanceWhereInput
  }

  export type ADR_ComponentInstanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComponentInstanceUniq_comp_envCompoundUniqueInput = {
    componentId: number
    environmentId: number
  }

  export type ComponentInstanceCountOrderByAggregateInput = {
    id?: SortOrder
    componentId?: SortOrder
    environmentId?: SortOrder
    hostname?: SortOrder
    specs?: SortOrder
    createdAt?: SortOrder
  }

  export type ComponentInstanceAvgOrderByAggregateInput = {
    id?: SortOrder
    componentId?: SortOrder
    environmentId?: SortOrder
  }

  export type ComponentInstanceMaxOrderByAggregateInput = {
    id?: SortOrder
    componentId?: SortOrder
    environmentId?: SortOrder
    hostname?: SortOrder
    createdAt?: SortOrder
  }

  export type ComponentInstanceMinOrderByAggregateInput = {
    id?: SortOrder
    componentId?: SortOrder
    environmentId?: SortOrder
    hostname?: SortOrder
    createdAt?: SortOrder
  }

  export type ComponentInstanceSumOrderByAggregateInput = {
    id?: SortOrder
    componentId?: SortOrder
    environmentId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumADR_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.ADR_status | EnumADR_statusFieldRefInput<$PrismaModel>
    in?: $Enums.ADR_status[]
    notIn?: $Enums.ADR_status[]
    not?: NestedEnumADR_statusFilter<$PrismaModel> | $Enums.ADR_status
  }

  export type ADRTagListRelationFilter = {
    every?: ADRTagWhereInput
    some?: ADRTagWhereInput
    none?: ADRTagWhereInput
  }

  export type ADRTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ADRCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type ADRAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ADRMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type ADRMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type ADRSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumADR_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ADR_status | EnumADR_statusFieldRefInput<$PrismaModel>
    in?: $Enums.ADR_status[]
    notIn?: $Enums.ADR_status[]
    not?: NestedEnumADR_statusWithAggregatesFilter<$PrismaModel> | $Enums.ADR_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumADR_statusFilter<$PrismaModel>
    _max?: NestedEnumADR_statusFilter<$PrismaModel>
  }

  export type EnumParticipantRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ParticipantRole | EnumParticipantRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ParticipantRole[]
    notIn?: $Enums.ParticipantRole[]
    not?: NestedEnumParticipantRoleFilter<$PrismaModel> | $Enums.ParticipantRole
  }

  export type ADRRelationFilter = {
    is?: ADRWhereInput
    isNot?: ADRWhereInput
  }

  export type ADR_ParticipantAdr_userCompoundUniqueInput = {
    adrId: number
    userId: number
  }

  export type ADR_ParticipantCountOrderByAggregateInput = {
    id?: SortOrder
    adrId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type ADR_ParticipantAvgOrderByAggregateInput = {
    id?: SortOrder
    adrId?: SortOrder
    userId?: SortOrder
  }

  export type ADR_ParticipantMaxOrderByAggregateInput = {
    id?: SortOrder
    adrId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type ADR_ParticipantMinOrderByAggregateInput = {
    id?: SortOrder
    adrId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type ADR_ParticipantSumOrderByAggregateInput = {
    id?: SortOrder
    adrId?: SortOrder
    userId?: SortOrder
  }

  export type EnumParticipantRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ParticipantRole | EnumParticipantRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ParticipantRole[]
    notIn?: $Enums.ParticipantRole[]
    not?: NestedEnumParticipantRoleWithAggregatesFilter<$PrismaModel> | $Enums.ParticipantRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumParticipantRoleFilter<$PrismaModel>
    _max?: NestedEnumParticipantRoleFilter<$PrismaModel>
  }

  export type EnumImpactLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.ImpactLevel | EnumImpactLevelFieldRefInput<$PrismaModel>
    in?: $Enums.ImpactLevel[]
    notIn?: $Enums.ImpactLevel[]
    not?: NestedEnumImpactLevelFilter<$PrismaModel> | $Enums.ImpactLevel
  }

  export type ComponentInstanceRelationFilter = {
    is?: ComponentInstanceWhereInput
    isNot?: ComponentInstanceWhereInput
  }

  export type ADR_ComponentInstanceAdrIdInstanceIdCompoundUniqueInput = {
    adrId: number
    instanceId: number
  }

  export type ADR_ComponentInstanceCountOrderByAggregateInput = {
    adrId?: SortOrder
    instanceId?: SortOrder
    impactLevel?: SortOrder
  }

  export type ADR_ComponentInstanceAvgOrderByAggregateInput = {
    adrId?: SortOrder
    instanceId?: SortOrder
  }

  export type ADR_ComponentInstanceMaxOrderByAggregateInput = {
    adrId?: SortOrder
    instanceId?: SortOrder
    impactLevel?: SortOrder
  }

  export type ADR_ComponentInstanceMinOrderByAggregateInput = {
    adrId?: SortOrder
    instanceId?: SortOrder
    impactLevel?: SortOrder
  }

  export type ADR_ComponentInstanceSumOrderByAggregateInput = {
    adrId?: SortOrder
    instanceId?: SortOrder
  }

  export type EnumImpactLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ImpactLevel | EnumImpactLevelFieldRefInput<$PrismaModel>
    in?: $Enums.ImpactLevel[]
    notIn?: $Enums.ImpactLevel[]
    not?: NestedEnumImpactLevelWithAggregatesFilter<$PrismaModel> | $Enums.ImpactLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumImpactLevelFilter<$PrismaModel>
    _max?: NestedEnumImpactLevelFilter<$PrismaModel>
  }

  export type ADR_ComponentAdrIdComponentIdCompoundUniqueInput = {
    adrId: number
    componentId: number
  }

  export type ADR_ComponentCountOrderByAggregateInput = {
    adrId?: SortOrder
    componentId?: SortOrder
  }

  export type ADR_ComponentAvgOrderByAggregateInput = {
    adrId?: SortOrder
    componentId?: SortOrder
  }

  export type ADR_ComponentMaxOrderByAggregateInput = {
    adrId?: SortOrder
    componentId?: SortOrder
  }

  export type ADR_ComponentMinOrderByAggregateInput = {
    adrId?: SortOrder
    componentId?: SortOrder
  }

  export type ADR_ComponentSumOrderByAggregateInput = {
    adrId?: SortOrder
    componentId?: SortOrder
  }

  export type EnumRoadmapItem_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.RoadmapItem_status | EnumRoadmapItem_statusFieldRefInput<$PrismaModel>
    in?: $Enums.RoadmapItem_status[]
    notIn?: $Enums.RoadmapItem_status[]
    not?: NestedEnumRoadmapItem_statusFilter<$PrismaModel> | $Enums.RoadmapItem_status
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type RoadmapTypeRelationFilter = {
    is?: RoadmapTypeWhereInput
    isNot?: RoadmapTypeWhereInput
  }

  export type RoadmapItemCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    componentId?: SortOrder
    typeId?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
  }

  export type RoadmapItemAvgOrderByAggregateInput = {
    id?: SortOrder
    componentId?: SortOrder
    typeId?: SortOrder
  }

  export type RoadmapItemMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    componentId?: SortOrder
    typeId?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
  }

  export type RoadmapItemMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    componentId?: SortOrder
    typeId?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
  }

  export type RoadmapItemSumOrderByAggregateInput = {
    id?: SortOrder
    componentId?: SortOrder
    typeId?: SortOrder
  }

  export type EnumRoadmapItem_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoadmapItem_status | EnumRoadmapItem_statusFieldRefInput<$PrismaModel>
    in?: $Enums.RoadmapItem_status[]
    notIn?: $Enums.RoadmapItem_status[]
    not?: NestedEnumRoadmapItem_statusWithAggregatesFilter<$PrismaModel> | $Enums.RoadmapItem_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoadmapItem_statusFilter<$PrismaModel>
    _max?: NestedEnumRoadmapItem_statusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type RoadmapItemListRelationFilter = {
    every?: RoadmapItemWhereInput
    some?: RoadmapItemWhereInput
    none?: RoadmapItemWhereInput
  }

  export type RoadmapItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoadmapTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    colorHex?: SortOrder
    createdAt?: SortOrder
  }

  export type RoadmapTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoadmapTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    colorHex?: SortOrder
    createdAt?: SortOrder
  }

  export type RoadmapTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    colorHex?: SortOrder
    createdAt?: SortOrder
  }

  export type RoadmapTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumLogLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.LogLevel | EnumLogLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LogLevel[]
    notIn?: $Enums.LogLevel[]
    not?: NestedEnumLogLevelFilter<$PrismaModel> | $Enums.LogLevel
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type LogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
    message?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type LogAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type LogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type LogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type LogSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumLogLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogLevel | EnumLogLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LogLevel[]
    notIn?: $Enums.LogLevel[]
    not?: NestedEnumLogLevelWithAggregatesFilter<$PrismaModel> | $Enums.LogLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogLevelFilter<$PrismaModel>
    _max?: NestedEnumLogLevelFilter<$PrismaModel>
  }

  export type EnumGlossaryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.GlossaryStatus | EnumGlossaryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GlossaryStatus[]
    notIn?: $Enums.GlossaryStatus[]
    not?: NestedEnumGlossaryStatusFilter<$PrismaModel> | $Enums.GlossaryStatus
  }

  export type GlossaryTermCountOrderByAggregateInput = {
    id?: SortOrder
    term?: SortOrder
    definition?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type GlossaryTermAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GlossaryTermMaxOrderByAggregateInput = {
    id?: SortOrder
    term?: SortOrder
    definition?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type GlossaryTermMinOrderByAggregateInput = {
    id?: SortOrder
    term?: SortOrder
    definition?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type GlossaryTermSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumGlossaryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GlossaryStatus | EnumGlossaryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GlossaryStatus[]
    notIn?: $Enums.GlossaryStatus[]
    not?: NestedEnumGlossaryStatusWithAggregatesFilter<$PrismaModel> | $Enums.GlossaryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGlossaryStatusFilter<$PrismaModel>
    _max?: NestedEnumGlossaryStatusFilter<$PrismaModel>
  }

  export type ComponentTagCmp_tagCompoundUniqueInput = {
    componentId: number
    tag: string
  }

  export type ComponentTagCountOrderByAggregateInput = {
    id?: SortOrder
    componentId?: SortOrder
    tag?: SortOrder
  }

  export type ComponentTagAvgOrderByAggregateInput = {
    id?: SortOrder
    componentId?: SortOrder
  }

  export type ComponentTagMaxOrderByAggregateInput = {
    id?: SortOrder
    componentId?: SortOrder
    tag?: SortOrder
  }

  export type ComponentTagMinOrderByAggregateInput = {
    id?: SortOrder
    componentId?: SortOrder
    tag?: SortOrder
  }

  export type ComponentTagSumOrderByAggregateInput = {
    id?: SortOrder
    componentId?: SortOrder
  }

  export type RelationshipTagRel_tagCompoundUniqueInput = {
    sourceId: number
    targetId: number
    tag: string
  }

  export type RelationshipTagCountOrderByAggregateInput = {
    id?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
    tag?: SortOrder
  }

  export type RelationshipTagAvgOrderByAggregateInput = {
    id?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
  }

  export type RelationshipTagMaxOrderByAggregateInput = {
    id?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
    tag?: SortOrder
  }

  export type RelationshipTagMinOrderByAggregateInput = {
    id?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
    tag?: SortOrder
  }

  export type RelationshipTagSumOrderByAggregateInput = {
    id?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
  }

  export type ADRTagAdr_tagCompoundUniqueInput = {
    adrId: number
    tag: string
  }

  export type ADRTagCountOrderByAggregateInput = {
    id?: SortOrder
    adrId?: SortOrder
    tag?: SortOrder
  }

  export type ADRTagAvgOrderByAggregateInput = {
    id?: SortOrder
    adrId?: SortOrder
  }

  export type ADRTagMaxOrderByAggregateInput = {
    id?: SortOrder
    adrId?: SortOrder
    tag?: SortOrder
  }

  export type ADRTagMinOrderByAggregateInput = {
    id?: SortOrder
    adrId?: SortOrder
    tag?: SortOrder
  }

  export type ADRTagSumOrderByAggregateInput = {
    id?: SortOrder
    adrId?: SortOrder
  }

  export type LogCreateNestedManyWithoutUserInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type Team_MemberCreateNestedManyWithoutUserInput = {
    create?: XOR<Team_MemberCreateWithoutUserInput, Team_MemberUncheckedCreateWithoutUserInput> | Team_MemberCreateWithoutUserInput[] | Team_MemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Team_MemberCreateOrConnectWithoutUserInput | Team_MemberCreateOrConnectWithoutUserInput[]
    createMany?: Team_MemberCreateManyUserInputEnvelope
    connect?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
  }

  export type ADR_ParticipantCreateNestedManyWithoutUserInput = {
    create?: XOR<ADR_ParticipantCreateWithoutUserInput, ADR_ParticipantUncheckedCreateWithoutUserInput> | ADR_ParticipantCreateWithoutUserInput[] | ADR_ParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ADR_ParticipantCreateOrConnectWithoutUserInput | ADR_ParticipantCreateOrConnectWithoutUserInput[]
    createMany?: ADR_ParticipantCreateManyUserInputEnvelope
    connect?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
  }

  export type LogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type Team_MemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Team_MemberCreateWithoutUserInput, Team_MemberUncheckedCreateWithoutUserInput> | Team_MemberCreateWithoutUserInput[] | Team_MemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Team_MemberCreateOrConnectWithoutUserInput | Team_MemberCreateOrConnectWithoutUserInput[]
    createMany?: Team_MemberCreateManyUserInputEnvelope
    connect?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
  }

  export type ADR_ParticipantUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ADR_ParticipantCreateWithoutUserInput, ADR_ParticipantUncheckedCreateWithoutUserInput> | ADR_ParticipantCreateWithoutUserInput[] | ADR_ParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ADR_ParticipantCreateOrConnectWithoutUserInput | ADR_ParticipantCreateOrConnectWithoutUserInput[]
    createMany?: ADR_ParticipantCreateManyUserInputEnvelope
    connect?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUser_roleFieldUpdateOperationsInput = {
    set?: $Enums.User_role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type LogUpdateManyWithoutUserNestedInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutUserInput | LogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutUserInput | LogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LogUpdateManyWithWhereWithoutUserInput | LogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type Team_MemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<Team_MemberCreateWithoutUserInput, Team_MemberUncheckedCreateWithoutUserInput> | Team_MemberCreateWithoutUserInput[] | Team_MemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Team_MemberCreateOrConnectWithoutUserInput | Team_MemberCreateOrConnectWithoutUserInput[]
    upsert?: Team_MemberUpsertWithWhereUniqueWithoutUserInput | Team_MemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Team_MemberCreateManyUserInputEnvelope
    set?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
    disconnect?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
    delete?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
    connect?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
    update?: Team_MemberUpdateWithWhereUniqueWithoutUserInput | Team_MemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Team_MemberUpdateManyWithWhereWithoutUserInput | Team_MemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Team_MemberScalarWhereInput | Team_MemberScalarWhereInput[]
  }

  export type ADR_ParticipantUpdateManyWithoutUserNestedInput = {
    create?: XOR<ADR_ParticipantCreateWithoutUserInput, ADR_ParticipantUncheckedCreateWithoutUserInput> | ADR_ParticipantCreateWithoutUserInput[] | ADR_ParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ADR_ParticipantCreateOrConnectWithoutUserInput | ADR_ParticipantCreateOrConnectWithoutUserInput[]
    upsert?: ADR_ParticipantUpsertWithWhereUniqueWithoutUserInput | ADR_ParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ADR_ParticipantCreateManyUserInputEnvelope
    set?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
    disconnect?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
    delete?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
    connect?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
    update?: ADR_ParticipantUpdateWithWhereUniqueWithoutUserInput | ADR_ParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ADR_ParticipantUpdateManyWithWhereWithoutUserInput | ADR_ParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ADR_ParticipantScalarWhereInput | ADR_ParticipantScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutUserInput | LogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutUserInput | LogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LogUpdateManyWithWhereWithoutUserInput | LogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type Team_MemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Team_MemberCreateWithoutUserInput, Team_MemberUncheckedCreateWithoutUserInput> | Team_MemberCreateWithoutUserInput[] | Team_MemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Team_MemberCreateOrConnectWithoutUserInput | Team_MemberCreateOrConnectWithoutUserInput[]
    upsert?: Team_MemberUpsertWithWhereUniqueWithoutUserInput | Team_MemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Team_MemberCreateManyUserInputEnvelope
    set?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
    disconnect?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
    delete?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
    connect?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
    update?: Team_MemberUpdateWithWhereUniqueWithoutUserInput | Team_MemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Team_MemberUpdateManyWithWhereWithoutUserInput | Team_MemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Team_MemberScalarWhereInput | Team_MemberScalarWhereInput[]
  }

  export type ADR_ParticipantUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ADR_ParticipantCreateWithoutUserInput, ADR_ParticipantUncheckedCreateWithoutUserInput> | ADR_ParticipantCreateWithoutUserInput[] | ADR_ParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ADR_ParticipantCreateOrConnectWithoutUserInput | ADR_ParticipantCreateOrConnectWithoutUserInput[]
    upsert?: ADR_ParticipantUpsertWithWhereUniqueWithoutUserInput | ADR_ParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ADR_ParticipantCreateManyUserInputEnvelope
    set?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
    disconnect?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
    delete?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
    connect?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
    update?: ADR_ParticipantUpdateWithWhereUniqueWithoutUserInput | ADR_ParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ADR_ParticipantUpdateManyWithWhereWithoutUserInput | ADR_ParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ADR_ParticipantScalarWhereInput | ADR_ParticipantScalarWhereInput[]
  }

  export type ComponentCreateNestedManyWithoutTeamInput = {
    create?: XOR<ComponentCreateWithoutTeamInput, ComponentUncheckedCreateWithoutTeamInput> | ComponentCreateWithoutTeamInput[] | ComponentUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ComponentCreateOrConnectWithoutTeamInput | ComponentCreateOrConnectWithoutTeamInput[]
    createMany?: ComponentCreateManyTeamInputEnvelope
    connect?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
  }

  export type Team_MemberCreateNestedManyWithoutTeamInput = {
    create?: XOR<Team_MemberCreateWithoutTeamInput, Team_MemberUncheckedCreateWithoutTeamInput> | Team_MemberCreateWithoutTeamInput[] | Team_MemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: Team_MemberCreateOrConnectWithoutTeamInput | Team_MemberCreateOrConnectWithoutTeamInput[]
    createMany?: Team_MemberCreateManyTeamInputEnvelope
    connect?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
  }

  export type ComponentUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<ComponentCreateWithoutTeamInput, ComponentUncheckedCreateWithoutTeamInput> | ComponentCreateWithoutTeamInput[] | ComponentUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ComponentCreateOrConnectWithoutTeamInput | ComponentCreateOrConnectWithoutTeamInput[]
    createMany?: ComponentCreateManyTeamInputEnvelope
    connect?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
  }

  export type Team_MemberUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<Team_MemberCreateWithoutTeamInput, Team_MemberUncheckedCreateWithoutTeamInput> | Team_MemberCreateWithoutTeamInput[] | Team_MemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: Team_MemberCreateOrConnectWithoutTeamInput | Team_MemberCreateOrConnectWithoutTeamInput[]
    createMany?: Team_MemberCreateManyTeamInputEnvelope
    connect?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ComponentUpdateManyWithoutTeamNestedInput = {
    create?: XOR<ComponentCreateWithoutTeamInput, ComponentUncheckedCreateWithoutTeamInput> | ComponentCreateWithoutTeamInput[] | ComponentUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ComponentCreateOrConnectWithoutTeamInput | ComponentCreateOrConnectWithoutTeamInput[]
    upsert?: ComponentUpsertWithWhereUniqueWithoutTeamInput | ComponentUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: ComponentCreateManyTeamInputEnvelope
    set?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
    disconnect?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
    delete?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
    connect?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
    update?: ComponentUpdateWithWhereUniqueWithoutTeamInput | ComponentUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: ComponentUpdateManyWithWhereWithoutTeamInput | ComponentUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: ComponentScalarWhereInput | ComponentScalarWhereInput[]
  }

  export type Team_MemberUpdateManyWithoutTeamNestedInput = {
    create?: XOR<Team_MemberCreateWithoutTeamInput, Team_MemberUncheckedCreateWithoutTeamInput> | Team_MemberCreateWithoutTeamInput[] | Team_MemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: Team_MemberCreateOrConnectWithoutTeamInput | Team_MemberCreateOrConnectWithoutTeamInput[]
    upsert?: Team_MemberUpsertWithWhereUniqueWithoutTeamInput | Team_MemberUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: Team_MemberCreateManyTeamInputEnvelope
    set?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
    disconnect?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
    delete?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
    connect?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
    update?: Team_MemberUpdateWithWhereUniqueWithoutTeamInput | Team_MemberUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: Team_MemberUpdateManyWithWhereWithoutTeamInput | Team_MemberUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: Team_MemberScalarWhereInput | Team_MemberScalarWhereInput[]
  }

  export type ComponentUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<ComponentCreateWithoutTeamInput, ComponentUncheckedCreateWithoutTeamInput> | ComponentCreateWithoutTeamInput[] | ComponentUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ComponentCreateOrConnectWithoutTeamInput | ComponentCreateOrConnectWithoutTeamInput[]
    upsert?: ComponentUpsertWithWhereUniqueWithoutTeamInput | ComponentUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: ComponentCreateManyTeamInputEnvelope
    set?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
    disconnect?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
    delete?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
    connect?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
    update?: ComponentUpdateWithWhereUniqueWithoutTeamInput | ComponentUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: ComponentUpdateManyWithWhereWithoutTeamInput | ComponentUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: ComponentScalarWhereInput | ComponentScalarWhereInput[]
  }

  export type Team_MemberUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<Team_MemberCreateWithoutTeamInput, Team_MemberUncheckedCreateWithoutTeamInput> | Team_MemberCreateWithoutTeamInput[] | Team_MemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: Team_MemberCreateOrConnectWithoutTeamInput | Team_MemberCreateOrConnectWithoutTeamInput[]
    upsert?: Team_MemberUpsertWithWhereUniqueWithoutTeamInput | Team_MemberUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: Team_MemberCreateManyTeamInputEnvelope
    set?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
    disconnect?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
    delete?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
    connect?: Team_MemberWhereUniqueInput | Team_MemberWhereUniqueInput[]
    update?: Team_MemberUpdateWithWhereUniqueWithoutTeamInput | Team_MemberUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: Team_MemberUpdateManyWithWhereWithoutTeamInput | Team_MemberUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: Team_MemberScalarWhereInput | Team_MemberScalarWhereInput[]
  }

  export type TeamCreateNestedOneWithoutMembersInput = {
    create?: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutMembersInput
    connect?: TeamWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTeamMembersInput = {
    create?: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamMembersInput
    connect?: UserWhereUniqueInput
  }

  export type TeamUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutMembersInput
    upsert?: TeamUpsertWithoutMembersInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutMembersInput, TeamUpdateWithoutMembersInput>, TeamUncheckedUpdateWithoutMembersInput>
  }

  export type UserUpdateOneRequiredWithoutTeamMembersNestedInput = {
    create?: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamMembersInput
    upsert?: UserUpsertWithoutTeamMembersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeamMembersInput, UserUpdateWithoutTeamMembersInput>, UserUncheckedUpdateWithoutTeamMembersInput>
  }

  export type ComponentInstanceCreateNestedManyWithoutEnvironmentInput = {
    create?: XOR<ComponentInstanceCreateWithoutEnvironmentInput, ComponentInstanceUncheckedCreateWithoutEnvironmentInput> | ComponentInstanceCreateWithoutEnvironmentInput[] | ComponentInstanceUncheckedCreateWithoutEnvironmentInput[]
    connectOrCreate?: ComponentInstanceCreateOrConnectWithoutEnvironmentInput | ComponentInstanceCreateOrConnectWithoutEnvironmentInput[]
    createMany?: ComponentInstanceCreateManyEnvironmentInputEnvelope
    connect?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
  }

  export type ComponentInstanceUncheckedCreateNestedManyWithoutEnvironmentInput = {
    create?: XOR<ComponentInstanceCreateWithoutEnvironmentInput, ComponentInstanceUncheckedCreateWithoutEnvironmentInput> | ComponentInstanceCreateWithoutEnvironmentInput[] | ComponentInstanceUncheckedCreateWithoutEnvironmentInput[]
    connectOrCreate?: ComponentInstanceCreateOrConnectWithoutEnvironmentInput | ComponentInstanceCreateOrConnectWithoutEnvironmentInput[]
    createMany?: ComponentInstanceCreateManyEnvironmentInputEnvelope
    connect?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
  }

  export type ComponentInstanceUpdateManyWithoutEnvironmentNestedInput = {
    create?: XOR<ComponentInstanceCreateWithoutEnvironmentInput, ComponentInstanceUncheckedCreateWithoutEnvironmentInput> | ComponentInstanceCreateWithoutEnvironmentInput[] | ComponentInstanceUncheckedCreateWithoutEnvironmentInput[]
    connectOrCreate?: ComponentInstanceCreateOrConnectWithoutEnvironmentInput | ComponentInstanceCreateOrConnectWithoutEnvironmentInput[]
    upsert?: ComponentInstanceUpsertWithWhereUniqueWithoutEnvironmentInput | ComponentInstanceUpsertWithWhereUniqueWithoutEnvironmentInput[]
    createMany?: ComponentInstanceCreateManyEnvironmentInputEnvelope
    set?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
    disconnect?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
    delete?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
    connect?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
    update?: ComponentInstanceUpdateWithWhereUniqueWithoutEnvironmentInput | ComponentInstanceUpdateWithWhereUniqueWithoutEnvironmentInput[]
    updateMany?: ComponentInstanceUpdateManyWithWhereWithoutEnvironmentInput | ComponentInstanceUpdateManyWithWhereWithoutEnvironmentInput[]
    deleteMany?: ComponentInstanceScalarWhereInput | ComponentInstanceScalarWhereInput[]
  }

  export type ComponentInstanceUncheckedUpdateManyWithoutEnvironmentNestedInput = {
    create?: XOR<ComponentInstanceCreateWithoutEnvironmentInput, ComponentInstanceUncheckedCreateWithoutEnvironmentInput> | ComponentInstanceCreateWithoutEnvironmentInput[] | ComponentInstanceUncheckedCreateWithoutEnvironmentInput[]
    connectOrCreate?: ComponentInstanceCreateOrConnectWithoutEnvironmentInput | ComponentInstanceCreateOrConnectWithoutEnvironmentInput[]
    upsert?: ComponentInstanceUpsertWithWhereUniqueWithoutEnvironmentInput | ComponentInstanceUpsertWithWhereUniqueWithoutEnvironmentInput[]
    createMany?: ComponentInstanceCreateManyEnvironmentInputEnvelope
    set?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
    disconnect?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
    delete?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
    connect?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
    update?: ComponentInstanceUpdateWithWhereUniqueWithoutEnvironmentInput | ComponentInstanceUpdateWithWhereUniqueWithoutEnvironmentInput[]
    updateMany?: ComponentInstanceUpdateManyWithWhereWithoutEnvironmentInput | ComponentInstanceUpdateManyWithWhereWithoutEnvironmentInput[]
    deleteMany?: ComponentInstanceScalarWhereInput | ComponentInstanceScalarWhereInput[]
  }

  export type ComponentCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ComponentCreateWithoutCategoryInput, ComponentUncheckedCreateWithoutCategoryInput> | ComponentCreateWithoutCategoryInput[] | ComponentUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ComponentCreateOrConnectWithoutCategoryInput | ComponentCreateOrConnectWithoutCategoryInput[]
    createMany?: ComponentCreateManyCategoryInputEnvelope
    connect?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
  }

  export type ComponentUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ComponentCreateWithoutCategoryInput, ComponentUncheckedCreateWithoutCategoryInput> | ComponentCreateWithoutCategoryInput[] | ComponentUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ComponentCreateOrConnectWithoutCategoryInput | ComponentCreateOrConnectWithoutCategoryInput[]
    createMany?: ComponentCreateManyCategoryInputEnvelope
    connect?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
  }

  export type ComponentUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ComponentCreateWithoutCategoryInput, ComponentUncheckedCreateWithoutCategoryInput> | ComponentCreateWithoutCategoryInput[] | ComponentUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ComponentCreateOrConnectWithoutCategoryInput | ComponentCreateOrConnectWithoutCategoryInput[]
    upsert?: ComponentUpsertWithWhereUniqueWithoutCategoryInput | ComponentUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ComponentCreateManyCategoryInputEnvelope
    set?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
    disconnect?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
    delete?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
    connect?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
    update?: ComponentUpdateWithWhereUniqueWithoutCategoryInput | ComponentUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ComponentUpdateManyWithWhereWithoutCategoryInput | ComponentUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ComponentScalarWhereInput | ComponentScalarWhereInput[]
  }

  export type ComponentUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ComponentCreateWithoutCategoryInput, ComponentUncheckedCreateWithoutCategoryInput> | ComponentCreateWithoutCategoryInput[] | ComponentUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ComponentCreateOrConnectWithoutCategoryInput | ComponentCreateOrConnectWithoutCategoryInput[]
    upsert?: ComponentUpsertWithWhereUniqueWithoutCategoryInput | ComponentUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ComponentCreateManyCategoryInputEnvelope
    set?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
    disconnect?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
    delete?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
    connect?: ComponentWhereUniqueInput | ComponentWhereUniqueInput[]
    update?: ComponentUpdateWithWhereUniqueWithoutCategoryInput | ComponentUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ComponentUpdateManyWithWhereWithoutCategoryInput | ComponentUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ComponentScalarWhereInput | ComponentScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutComponentsInput = {
    create?: XOR<CategoryCreateWithoutComponentsInput, CategoryUncheckedCreateWithoutComponentsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutComponentsInput
    connect?: CategoryWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutComponentsInput = {
    create?: XOR<TeamCreateWithoutComponentsInput, TeamUncheckedCreateWithoutComponentsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutComponentsInput
    connect?: TeamWhereUniqueInput
  }

  export type ComponentTagCreateNestedManyWithoutComponentInput = {
    create?: XOR<ComponentTagCreateWithoutComponentInput, ComponentTagUncheckedCreateWithoutComponentInput> | ComponentTagCreateWithoutComponentInput[] | ComponentTagUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentTagCreateOrConnectWithoutComponentInput | ComponentTagCreateOrConnectWithoutComponentInput[]
    createMany?: ComponentTagCreateManyComponentInputEnvelope
    connect?: ComponentTagWhereUniqueInput | ComponentTagWhereUniqueInput[]
  }

  export type ComponentInstanceCreateNestedManyWithoutComponentInput = {
    create?: XOR<ComponentInstanceCreateWithoutComponentInput, ComponentInstanceUncheckedCreateWithoutComponentInput> | ComponentInstanceCreateWithoutComponentInput[] | ComponentInstanceUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentInstanceCreateOrConnectWithoutComponentInput | ComponentInstanceCreateOrConnectWithoutComponentInput[]
    createMany?: ComponentInstanceCreateManyComponentInputEnvelope
    connect?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
  }

  export type ADR_ComponentCreateNestedManyWithoutComponentInput = {
    create?: XOR<ADR_ComponentCreateWithoutComponentInput, ADR_ComponentUncheckedCreateWithoutComponentInput> | ADR_ComponentCreateWithoutComponentInput[] | ADR_ComponentUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ADR_ComponentCreateOrConnectWithoutComponentInput | ADR_ComponentCreateOrConnectWithoutComponentInput[]
    createMany?: ADR_ComponentCreateManyComponentInputEnvelope
    connect?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
  }

  export type ComponentTagUncheckedCreateNestedManyWithoutComponentInput = {
    create?: XOR<ComponentTagCreateWithoutComponentInput, ComponentTagUncheckedCreateWithoutComponentInput> | ComponentTagCreateWithoutComponentInput[] | ComponentTagUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentTagCreateOrConnectWithoutComponentInput | ComponentTagCreateOrConnectWithoutComponentInput[]
    createMany?: ComponentTagCreateManyComponentInputEnvelope
    connect?: ComponentTagWhereUniqueInput | ComponentTagWhereUniqueInput[]
  }

  export type ComponentInstanceUncheckedCreateNestedManyWithoutComponentInput = {
    create?: XOR<ComponentInstanceCreateWithoutComponentInput, ComponentInstanceUncheckedCreateWithoutComponentInput> | ComponentInstanceCreateWithoutComponentInput[] | ComponentInstanceUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentInstanceCreateOrConnectWithoutComponentInput | ComponentInstanceCreateOrConnectWithoutComponentInput[]
    createMany?: ComponentInstanceCreateManyComponentInputEnvelope
    connect?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
  }

  export type ADR_ComponentUncheckedCreateNestedManyWithoutComponentInput = {
    create?: XOR<ADR_ComponentCreateWithoutComponentInput, ADR_ComponentUncheckedCreateWithoutComponentInput> | ADR_ComponentCreateWithoutComponentInput[] | ADR_ComponentUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ADR_ComponentCreateOrConnectWithoutComponentInput | ADR_ComponentCreateOrConnectWithoutComponentInput[]
    createMany?: ADR_ComponentCreateManyComponentInputEnvelope
    connect?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
  }

  export type EnumComponent_statusFieldUpdateOperationsInput = {
    set?: $Enums.Component_status
  }

  export type CategoryUpdateOneWithoutComponentsNestedInput = {
    create?: XOR<CategoryCreateWithoutComponentsInput, CategoryUncheckedCreateWithoutComponentsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutComponentsInput
    upsert?: CategoryUpsertWithoutComponentsInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutComponentsInput, CategoryUpdateWithoutComponentsInput>, CategoryUncheckedUpdateWithoutComponentsInput>
  }

  export type TeamUpdateOneWithoutComponentsNestedInput = {
    create?: XOR<TeamCreateWithoutComponentsInput, TeamUncheckedCreateWithoutComponentsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutComponentsInput
    upsert?: TeamUpsertWithoutComponentsInput
    disconnect?: TeamWhereInput | boolean
    delete?: TeamWhereInput | boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutComponentsInput, TeamUpdateWithoutComponentsInput>, TeamUncheckedUpdateWithoutComponentsInput>
  }

  export type ComponentTagUpdateManyWithoutComponentNestedInput = {
    create?: XOR<ComponentTagCreateWithoutComponentInput, ComponentTagUncheckedCreateWithoutComponentInput> | ComponentTagCreateWithoutComponentInput[] | ComponentTagUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentTagCreateOrConnectWithoutComponentInput | ComponentTagCreateOrConnectWithoutComponentInput[]
    upsert?: ComponentTagUpsertWithWhereUniqueWithoutComponentInput | ComponentTagUpsertWithWhereUniqueWithoutComponentInput[]
    createMany?: ComponentTagCreateManyComponentInputEnvelope
    set?: ComponentTagWhereUniqueInput | ComponentTagWhereUniqueInput[]
    disconnect?: ComponentTagWhereUniqueInput | ComponentTagWhereUniqueInput[]
    delete?: ComponentTagWhereUniqueInput | ComponentTagWhereUniqueInput[]
    connect?: ComponentTagWhereUniqueInput | ComponentTagWhereUniqueInput[]
    update?: ComponentTagUpdateWithWhereUniqueWithoutComponentInput | ComponentTagUpdateWithWhereUniqueWithoutComponentInput[]
    updateMany?: ComponentTagUpdateManyWithWhereWithoutComponentInput | ComponentTagUpdateManyWithWhereWithoutComponentInput[]
    deleteMany?: ComponentTagScalarWhereInput | ComponentTagScalarWhereInput[]
  }

  export type ComponentInstanceUpdateManyWithoutComponentNestedInput = {
    create?: XOR<ComponentInstanceCreateWithoutComponentInput, ComponentInstanceUncheckedCreateWithoutComponentInput> | ComponentInstanceCreateWithoutComponentInput[] | ComponentInstanceUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentInstanceCreateOrConnectWithoutComponentInput | ComponentInstanceCreateOrConnectWithoutComponentInput[]
    upsert?: ComponentInstanceUpsertWithWhereUniqueWithoutComponentInput | ComponentInstanceUpsertWithWhereUniqueWithoutComponentInput[]
    createMany?: ComponentInstanceCreateManyComponentInputEnvelope
    set?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
    disconnect?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
    delete?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
    connect?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
    update?: ComponentInstanceUpdateWithWhereUniqueWithoutComponentInput | ComponentInstanceUpdateWithWhereUniqueWithoutComponentInput[]
    updateMany?: ComponentInstanceUpdateManyWithWhereWithoutComponentInput | ComponentInstanceUpdateManyWithWhereWithoutComponentInput[]
    deleteMany?: ComponentInstanceScalarWhereInput | ComponentInstanceScalarWhereInput[]
  }

  export type ADR_ComponentUpdateManyWithoutComponentNestedInput = {
    create?: XOR<ADR_ComponentCreateWithoutComponentInput, ADR_ComponentUncheckedCreateWithoutComponentInput> | ADR_ComponentCreateWithoutComponentInput[] | ADR_ComponentUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ADR_ComponentCreateOrConnectWithoutComponentInput | ADR_ComponentCreateOrConnectWithoutComponentInput[]
    upsert?: ADR_ComponentUpsertWithWhereUniqueWithoutComponentInput | ADR_ComponentUpsertWithWhereUniqueWithoutComponentInput[]
    createMany?: ADR_ComponentCreateManyComponentInputEnvelope
    set?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
    disconnect?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
    delete?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
    connect?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
    update?: ADR_ComponentUpdateWithWhereUniqueWithoutComponentInput | ADR_ComponentUpdateWithWhereUniqueWithoutComponentInput[]
    updateMany?: ADR_ComponentUpdateManyWithWhereWithoutComponentInput | ADR_ComponentUpdateManyWithWhereWithoutComponentInput[]
    deleteMany?: ADR_ComponentScalarWhereInput | ADR_ComponentScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ComponentTagUncheckedUpdateManyWithoutComponentNestedInput = {
    create?: XOR<ComponentTagCreateWithoutComponentInput, ComponentTagUncheckedCreateWithoutComponentInput> | ComponentTagCreateWithoutComponentInput[] | ComponentTagUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentTagCreateOrConnectWithoutComponentInput | ComponentTagCreateOrConnectWithoutComponentInput[]
    upsert?: ComponentTagUpsertWithWhereUniqueWithoutComponentInput | ComponentTagUpsertWithWhereUniqueWithoutComponentInput[]
    createMany?: ComponentTagCreateManyComponentInputEnvelope
    set?: ComponentTagWhereUniqueInput | ComponentTagWhereUniqueInput[]
    disconnect?: ComponentTagWhereUniqueInput | ComponentTagWhereUniqueInput[]
    delete?: ComponentTagWhereUniqueInput | ComponentTagWhereUniqueInput[]
    connect?: ComponentTagWhereUniqueInput | ComponentTagWhereUniqueInput[]
    update?: ComponentTagUpdateWithWhereUniqueWithoutComponentInput | ComponentTagUpdateWithWhereUniqueWithoutComponentInput[]
    updateMany?: ComponentTagUpdateManyWithWhereWithoutComponentInput | ComponentTagUpdateManyWithWhereWithoutComponentInput[]
    deleteMany?: ComponentTagScalarWhereInput | ComponentTagScalarWhereInput[]
  }

  export type ComponentInstanceUncheckedUpdateManyWithoutComponentNestedInput = {
    create?: XOR<ComponentInstanceCreateWithoutComponentInput, ComponentInstanceUncheckedCreateWithoutComponentInput> | ComponentInstanceCreateWithoutComponentInput[] | ComponentInstanceUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentInstanceCreateOrConnectWithoutComponentInput | ComponentInstanceCreateOrConnectWithoutComponentInput[]
    upsert?: ComponentInstanceUpsertWithWhereUniqueWithoutComponentInput | ComponentInstanceUpsertWithWhereUniqueWithoutComponentInput[]
    createMany?: ComponentInstanceCreateManyComponentInputEnvelope
    set?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
    disconnect?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
    delete?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
    connect?: ComponentInstanceWhereUniqueInput | ComponentInstanceWhereUniqueInput[]
    update?: ComponentInstanceUpdateWithWhereUniqueWithoutComponentInput | ComponentInstanceUpdateWithWhereUniqueWithoutComponentInput[]
    updateMany?: ComponentInstanceUpdateManyWithWhereWithoutComponentInput | ComponentInstanceUpdateManyWithWhereWithoutComponentInput[]
    deleteMany?: ComponentInstanceScalarWhereInput | ComponentInstanceScalarWhereInput[]
  }

  export type ADR_ComponentUncheckedUpdateManyWithoutComponentNestedInput = {
    create?: XOR<ADR_ComponentCreateWithoutComponentInput, ADR_ComponentUncheckedCreateWithoutComponentInput> | ADR_ComponentCreateWithoutComponentInput[] | ADR_ComponentUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ADR_ComponentCreateOrConnectWithoutComponentInput | ADR_ComponentCreateOrConnectWithoutComponentInput[]
    upsert?: ADR_ComponentUpsertWithWhereUniqueWithoutComponentInput | ADR_ComponentUpsertWithWhereUniqueWithoutComponentInput[]
    createMany?: ADR_ComponentCreateManyComponentInputEnvelope
    set?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
    disconnect?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
    delete?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
    connect?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
    update?: ADR_ComponentUpdateWithWhereUniqueWithoutComponentInput | ADR_ComponentUpdateWithWhereUniqueWithoutComponentInput[]
    updateMany?: ADR_ComponentUpdateManyWithWhereWithoutComponentInput | ADR_ComponentUpdateManyWithWhereWithoutComponentInput[]
    deleteMany?: ADR_ComponentScalarWhereInput | ADR_ComponentScalarWhereInput[]
  }

  export type ComponentCreateNestedOneWithoutInstancesInput = {
    create?: XOR<ComponentCreateWithoutInstancesInput, ComponentUncheckedCreateWithoutInstancesInput>
    connectOrCreate?: ComponentCreateOrConnectWithoutInstancesInput
    connect?: ComponentWhereUniqueInput
  }

  export type EnvironmentCreateNestedOneWithoutComponentInstancesInput = {
    create?: XOR<EnvironmentCreateWithoutComponentInstancesInput, EnvironmentUncheckedCreateWithoutComponentInstancesInput>
    connectOrCreate?: EnvironmentCreateOrConnectWithoutComponentInstancesInput
    connect?: EnvironmentWhereUniqueInput
  }

  export type ADR_ComponentInstanceCreateNestedManyWithoutInstanceInput = {
    create?: XOR<ADR_ComponentInstanceCreateWithoutInstanceInput, ADR_ComponentInstanceUncheckedCreateWithoutInstanceInput> | ADR_ComponentInstanceCreateWithoutInstanceInput[] | ADR_ComponentInstanceUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: ADR_ComponentInstanceCreateOrConnectWithoutInstanceInput | ADR_ComponentInstanceCreateOrConnectWithoutInstanceInput[]
    createMany?: ADR_ComponentInstanceCreateManyInstanceInputEnvelope
    connect?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
  }

  export type ADR_ComponentInstanceUncheckedCreateNestedManyWithoutInstanceInput = {
    create?: XOR<ADR_ComponentInstanceCreateWithoutInstanceInput, ADR_ComponentInstanceUncheckedCreateWithoutInstanceInput> | ADR_ComponentInstanceCreateWithoutInstanceInput[] | ADR_ComponentInstanceUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: ADR_ComponentInstanceCreateOrConnectWithoutInstanceInput | ADR_ComponentInstanceCreateOrConnectWithoutInstanceInput[]
    createMany?: ADR_ComponentInstanceCreateManyInstanceInputEnvelope
    connect?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
  }

  export type ComponentUpdateOneRequiredWithoutInstancesNestedInput = {
    create?: XOR<ComponentCreateWithoutInstancesInput, ComponentUncheckedCreateWithoutInstancesInput>
    connectOrCreate?: ComponentCreateOrConnectWithoutInstancesInput
    upsert?: ComponentUpsertWithoutInstancesInput
    connect?: ComponentWhereUniqueInput
    update?: XOR<XOR<ComponentUpdateToOneWithWhereWithoutInstancesInput, ComponentUpdateWithoutInstancesInput>, ComponentUncheckedUpdateWithoutInstancesInput>
  }

  export type EnvironmentUpdateOneRequiredWithoutComponentInstancesNestedInput = {
    create?: XOR<EnvironmentCreateWithoutComponentInstancesInput, EnvironmentUncheckedCreateWithoutComponentInstancesInput>
    connectOrCreate?: EnvironmentCreateOrConnectWithoutComponentInstancesInput
    upsert?: EnvironmentUpsertWithoutComponentInstancesInput
    connect?: EnvironmentWhereUniqueInput
    update?: XOR<XOR<EnvironmentUpdateToOneWithWhereWithoutComponentInstancesInput, EnvironmentUpdateWithoutComponentInstancesInput>, EnvironmentUncheckedUpdateWithoutComponentInstancesInput>
  }

  export type ADR_ComponentInstanceUpdateManyWithoutInstanceNestedInput = {
    create?: XOR<ADR_ComponentInstanceCreateWithoutInstanceInput, ADR_ComponentInstanceUncheckedCreateWithoutInstanceInput> | ADR_ComponentInstanceCreateWithoutInstanceInput[] | ADR_ComponentInstanceUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: ADR_ComponentInstanceCreateOrConnectWithoutInstanceInput | ADR_ComponentInstanceCreateOrConnectWithoutInstanceInput[]
    upsert?: ADR_ComponentInstanceUpsertWithWhereUniqueWithoutInstanceInput | ADR_ComponentInstanceUpsertWithWhereUniqueWithoutInstanceInput[]
    createMany?: ADR_ComponentInstanceCreateManyInstanceInputEnvelope
    set?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
    disconnect?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
    delete?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
    connect?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
    update?: ADR_ComponentInstanceUpdateWithWhereUniqueWithoutInstanceInput | ADR_ComponentInstanceUpdateWithWhereUniqueWithoutInstanceInput[]
    updateMany?: ADR_ComponentInstanceUpdateManyWithWhereWithoutInstanceInput | ADR_ComponentInstanceUpdateManyWithWhereWithoutInstanceInput[]
    deleteMany?: ADR_ComponentInstanceScalarWhereInput | ADR_ComponentInstanceScalarWhereInput[]
  }

  export type ADR_ComponentInstanceUncheckedUpdateManyWithoutInstanceNestedInput = {
    create?: XOR<ADR_ComponentInstanceCreateWithoutInstanceInput, ADR_ComponentInstanceUncheckedCreateWithoutInstanceInput> | ADR_ComponentInstanceCreateWithoutInstanceInput[] | ADR_ComponentInstanceUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: ADR_ComponentInstanceCreateOrConnectWithoutInstanceInput | ADR_ComponentInstanceCreateOrConnectWithoutInstanceInput[]
    upsert?: ADR_ComponentInstanceUpsertWithWhereUniqueWithoutInstanceInput | ADR_ComponentInstanceUpsertWithWhereUniqueWithoutInstanceInput[]
    createMany?: ADR_ComponentInstanceCreateManyInstanceInputEnvelope
    set?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
    disconnect?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
    delete?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
    connect?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
    update?: ADR_ComponentInstanceUpdateWithWhereUniqueWithoutInstanceInput | ADR_ComponentInstanceUpdateWithWhereUniqueWithoutInstanceInput[]
    updateMany?: ADR_ComponentInstanceUpdateManyWithWhereWithoutInstanceInput | ADR_ComponentInstanceUpdateManyWithWhereWithoutInstanceInput[]
    deleteMany?: ADR_ComponentInstanceScalarWhereInput | ADR_ComponentInstanceScalarWhereInput[]
  }

  export type ADRTagCreateNestedManyWithoutAdrInput = {
    create?: XOR<ADRTagCreateWithoutAdrInput, ADRTagUncheckedCreateWithoutAdrInput> | ADRTagCreateWithoutAdrInput[] | ADRTagUncheckedCreateWithoutAdrInput[]
    connectOrCreate?: ADRTagCreateOrConnectWithoutAdrInput | ADRTagCreateOrConnectWithoutAdrInput[]
    createMany?: ADRTagCreateManyAdrInputEnvelope
    connect?: ADRTagWhereUniqueInput | ADRTagWhereUniqueInput[]
  }

  export type ADR_ParticipantCreateNestedManyWithoutAdrInput = {
    create?: XOR<ADR_ParticipantCreateWithoutAdrInput, ADR_ParticipantUncheckedCreateWithoutAdrInput> | ADR_ParticipantCreateWithoutAdrInput[] | ADR_ParticipantUncheckedCreateWithoutAdrInput[]
    connectOrCreate?: ADR_ParticipantCreateOrConnectWithoutAdrInput | ADR_ParticipantCreateOrConnectWithoutAdrInput[]
    createMany?: ADR_ParticipantCreateManyAdrInputEnvelope
    connect?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
  }

  export type ADR_ComponentInstanceCreateNestedManyWithoutAdrInput = {
    create?: XOR<ADR_ComponentInstanceCreateWithoutAdrInput, ADR_ComponentInstanceUncheckedCreateWithoutAdrInput> | ADR_ComponentInstanceCreateWithoutAdrInput[] | ADR_ComponentInstanceUncheckedCreateWithoutAdrInput[]
    connectOrCreate?: ADR_ComponentInstanceCreateOrConnectWithoutAdrInput | ADR_ComponentInstanceCreateOrConnectWithoutAdrInput[]
    createMany?: ADR_ComponentInstanceCreateManyAdrInputEnvelope
    connect?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
  }

  export type ADR_ComponentCreateNestedManyWithoutAdrInput = {
    create?: XOR<ADR_ComponentCreateWithoutAdrInput, ADR_ComponentUncheckedCreateWithoutAdrInput> | ADR_ComponentCreateWithoutAdrInput[] | ADR_ComponentUncheckedCreateWithoutAdrInput[]
    connectOrCreate?: ADR_ComponentCreateOrConnectWithoutAdrInput | ADR_ComponentCreateOrConnectWithoutAdrInput[]
    createMany?: ADR_ComponentCreateManyAdrInputEnvelope
    connect?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
  }

  export type ADRTagUncheckedCreateNestedManyWithoutAdrInput = {
    create?: XOR<ADRTagCreateWithoutAdrInput, ADRTagUncheckedCreateWithoutAdrInput> | ADRTagCreateWithoutAdrInput[] | ADRTagUncheckedCreateWithoutAdrInput[]
    connectOrCreate?: ADRTagCreateOrConnectWithoutAdrInput | ADRTagCreateOrConnectWithoutAdrInput[]
    createMany?: ADRTagCreateManyAdrInputEnvelope
    connect?: ADRTagWhereUniqueInput | ADRTagWhereUniqueInput[]
  }

  export type ADR_ParticipantUncheckedCreateNestedManyWithoutAdrInput = {
    create?: XOR<ADR_ParticipantCreateWithoutAdrInput, ADR_ParticipantUncheckedCreateWithoutAdrInput> | ADR_ParticipantCreateWithoutAdrInput[] | ADR_ParticipantUncheckedCreateWithoutAdrInput[]
    connectOrCreate?: ADR_ParticipantCreateOrConnectWithoutAdrInput | ADR_ParticipantCreateOrConnectWithoutAdrInput[]
    createMany?: ADR_ParticipantCreateManyAdrInputEnvelope
    connect?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
  }

  export type ADR_ComponentInstanceUncheckedCreateNestedManyWithoutAdrInput = {
    create?: XOR<ADR_ComponentInstanceCreateWithoutAdrInput, ADR_ComponentInstanceUncheckedCreateWithoutAdrInput> | ADR_ComponentInstanceCreateWithoutAdrInput[] | ADR_ComponentInstanceUncheckedCreateWithoutAdrInput[]
    connectOrCreate?: ADR_ComponentInstanceCreateOrConnectWithoutAdrInput | ADR_ComponentInstanceCreateOrConnectWithoutAdrInput[]
    createMany?: ADR_ComponentInstanceCreateManyAdrInputEnvelope
    connect?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
  }

  export type ADR_ComponentUncheckedCreateNestedManyWithoutAdrInput = {
    create?: XOR<ADR_ComponentCreateWithoutAdrInput, ADR_ComponentUncheckedCreateWithoutAdrInput> | ADR_ComponentCreateWithoutAdrInput[] | ADR_ComponentUncheckedCreateWithoutAdrInput[]
    connectOrCreate?: ADR_ComponentCreateOrConnectWithoutAdrInput | ADR_ComponentCreateOrConnectWithoutAdrInput[]
    createMany?: ADR_ComponentCreateManyAdrInputEnvelope
    connect?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
  }

  export type EnumADR_statusFieldUpdateOperationsInput = {
    set?: $Enums.ADR_status
  }

  export type ADRTagUpdateManyWithoutAdrNestedInput = {
    create?: XOR<ADRTagCreateWithoutAdrInput, ADRTagUncheckedCreateWithoutAdrInput> | ADRTagCreateWithoutAdrInput[] | ADRTagUncheckedCreateWithoutAdrInput[]
    connectOrCreate?: ADRTagCreateOrConnectWithoutAdrInput | ADRTagCreateOrConnectWithoutAdrInput[]
    upsert?: ADRTagUpsertWithWhereUniqueWithoutAdrInput | ADRTagUpsertWithWhereUniqueWithoutAdrInput[]
    createMany?: ADRTagCreateManyAdrInputEnvelope
    set?: ADRTagWhereUniqueInput | ADRTagWhereUniqueInput[]
    disconnect?: ADRTagWhereUniqueInput | ADRTagWhereUniqueInput[]
    delete?: ADRTagWhereUniqueInput | ADRTagWhereUniqueInput[]
    connect?: ADRTagWhereUniqueInput | ADRTagWhereUniqueInput[]
    update?: ADRTagUpdateWithWhereUniqueWithoutAdrInput | ADRTagUpdateWithWhereUniqueWithoutAdrInput[]
    updateMany?: ADRTagUpdateManyWithWhereWithoutAdrInput | ADRTagUpdateManyWithWhereWithoutAdrInput[]
    deleteMany?: ADRTagScalarWhereInput | ADRTagScalarWhereInput[]
  }

  export type ADR_ParticipantUpdateManyWithoutAdrNestedInput = {
    create?: XOR<ADR_ParticipantCreateWithoutAdrInput, ADR_ParticipantUncheckedCreateWithoutAdrInput> | ADR_ParticipantCreateWithoutAdrInput[] | ADR_ParticipantUncheckedCreateWithoutAdrInput[]
    connectOrCreate?: ADR_ParticipantCreateOrConnectWithoutAdrInput | ADR_ParticipantCreateOrConnectWithoutAdrInput[]
    upsert?: ADR_ParticipantUpsertWithWhereUniqueWithoutAdrInput | ADR_ParticipantUpsertWithWhereUniqueWithoutAdrInput[]
    createMany?: ADR_ParticipantCreateManyAdrInputEnvelope
    set?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
    disconnect?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
    delete?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
    connect?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
    update?: ADR_ParticipantUpdateWithWhereUniqueWithoutAdrInput | ADR_ParticipantUpdateWithWhereUniqueWithoutAdrInput[]
    updateMany?: ADR_ParticipantUpdateManyWithWhereWithoutAdrInput | ADR_ParticipantUpdateManyWithWhereWithoutAdrInput[]
    deleteMany?: ADR_ParticipantScalarWhereInput | ADR_ParticipantScalarWhereInput[]
  }

  export type ADR_ComponentInstanceUpdateManyWithoutAdrNestedInput = {
    create?: XOR<ADR_ComponentInstanceCreateWithoutAdrInput, ADR_ComponentInstanceUncheckedCreateWithoutAdrInput> | ADR_ComponentInstanceCreateWithoutAdrInput[] | ADR_ComponentInstanceUncheckedCreateWithoutAdrInput[]
    connectOrCreate?: ADR_ComponentInstanceCreateOrConnectWithoutAdrInput | ADR_ComponentInstanceCreateOrConnectWithoutAdrInput[]
    upsert?: ADR_ComponentInstanceUpsertWithWhereUniqueWithoutAdrInput | ADR_ComponentInstanceUpsertWithWhereUniqueWithoutAdrInput[]
    createMany?: ADR_ComponentInstanceCreateManyAdrInputEnvelope
    set?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
    disconnect?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
    delete?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
    connect?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
    update?: ADR_ComponentInstanceUpdateWithWhereUniqueWithoutAdrInput | ADR_ComponentInstanceUpdateWithWhereUniqueWithoutAdrInput[]
    updateMany?: ADR_ComponentInstanceUpdateManyWithWhereWithoutAdrInput | ADR_ComponentInstanceUpdateManyWithWhereWithoutAdrInput[]
    deleteMany?: ADR_ComponentInstanceScalarWhereInput | ADR_ComponentInstanceScalarWhereInput[]
  }

  export type ADR_ComponentUpdateManyWithoutAdrNestedInput = {
    create?: XOR<ADR_ComponentCreateWithoutAdrInput, ADR_ComponentUncheckedCreateWithoutAdrInput> | ADR_ComponentCreateWithoutAdrInput[] | ADR_ComponentUncheckedCreateWithoutAdrInput[]
    connectOrCreate?: ADR_ComponentCreateOrConnectWithoutAdrInput | ADR_ComponentCreateOrConnectWithoutAdrInput[]
    upsert?: ADR_ComponentUpsertWithWhereUniqueWithoutAdrInput | ADR_ComponentUpsertWithWhereUniqueWithoutAdrInput[]
    createMany?: ADR_ComponentCreateManyAdrInputEnvelope
    set?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
    disconnect?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
    delete?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
    connect?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
    update?: ADR_ComponentUpdateWithWhereUniqueWithoutAdrInput | ADR_ComponentUpdateWithWhereUniqueWithoutAdrInput[]
    updateMany?: ADR_ComponentUpdateManyWithWhereWithoutAdrInput | ADR_ComponentUpdateManyWithWhereWithoutAdrInput[]
    deleteMany?: ADR_ComponentScalarWhereInput | ADR_ComponentScalarWhereInput[]
  }

  export type ADRTagUncheckedUpdateManyWithoutAdrNestedInput = {
    create?: XOR<ADRTagCreateWithoutAdrInput, ADRTagUncheckedCreateWithoutAdrInput> | ADRTagCreateWithoutAdrInput[] | ADRTagUncheckedCreateWithoutAdrInput[]
    connectOrCreate?: ADRTagCreateOrConnectWithoutAdrInput | ADRTagCreateOrConnectWithoutAdrInput[]
    upsert?: ADRTagUpsertWithWhereUniqueWithoutAdrInput | ADRTagUpsertWithWhereUniqueWithoutAdrInput[]
    createMany?: ADRTagCreateManyAdrInputEnvelope
    set?: ADRTagWhereUniqueInput | ADRTagWhereUniqueInput[]
    disconnect?: ADRTagWhereUniqueInput | ADRTagWhereUniqueInput[]
    delete?: ADRTagWhereUniqueInput | ADRTagWhereUniqueInput[]
    connect?: ADRTagWhereUniqueInput | ADRTagWhereUniqueInput[]
    update?: ADRTagUpdateWithWhereUniqueWithoutAdrInput | ADRTagUpdateWithWhereUniqueWithoutAdrInput[]
    updateMany?: ADRTagUpdateManyWithWhereWithoutAdrInput | ADRTagUpdateManyWithWhereWithoutAdrInput[]
    deleteMany?: ADRTagScalarWhereInput | ADRTagScalarWhereInput[]
  }

  export type ADR_ParticipantUncheckedUpdateManyWithoutAdrNestedInput = {
    create?: XOR<ADR_ParticipantCreateWithoutAdrInput, ADR_ParticipantUncheckedCreateWithoutAdrInput> | ADR_ParticipantCreateWithoutAdrInput[] | ADR_ParticipantUncheckedCreateWithoutAdrInput[]
    connectOrCreate?: ADR_ParticipantCreateOrConnectWithoutAdrInput | ADR_ParticipantCreateOrConnectWithoutAdrInput[]
    upsert?: ADR_ParticipantUpsertWithWhereUniqueWithoutAdrInput | ADR_ParticipantUpsertWithWhereUniqueWithoutAdrInput[]
    createMany?: ADR_ParticipantCreateManyAdrInputEnvelope
    set?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
    disconnect?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
    delete?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
    connect?: ADR_ParticipantWhereUniqueInput | ADR_ParticipantWhereUniqueInput[]
    update?: ADR_ParticipantUpdateWithWhereUniqueWithoutAdrInput | ADR_ParticipantUpdateWithWhereUniqueWithoutAdrInput[]
    updateMany?: ADR_ParticipantUpdateManyWithWhereWithoutAdrInput | ADR_ParticipantUpdateManyWithWhereWithoutAdrInput[]
    deleteMany?: ADR_ParticipantScalarWhereInput | ADR_ParticipantScalarWhereInput[]
  }

  export type ADR_ComponentInstanceUncheckedUpdateManyWithoutAdrNestedInput = {
    create?: XOR<ADR_ComponentInstanceCreateWithoutAdrInput, ADR_ComponentInstanceUncheckedCreateWithoutAdrInput> | ADR_ComponentInstanceCreateWithoutAdrInput[] | ADR_ComponentInstanceUncheckedCreateWithoutAdrInput[]
    connectOrCreate?: ADR_ComponentInstanceCreateOrConnectWithoutAdrInput | ADR_ComponentInstanceCreateOrConnectWithoutAdrInput[]
    upsert?: ADR_ComponentInstanceUpsertWithWhereUniqueWithoutAdrInput | ADR_ComponentInstanceUpsertWithWhereUniqueWithoutAdrInput[]
    createMany?: ADR_ComponentInstanceCreateManyAdrInputEnvelope
    set?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
    disconnect?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
    delete?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
    connect?: ADR_ComponentInstanceWhereUniqueInput | ADR_ComponentInstanceWhereUniqueInput[]
    update?: ADR_ComponentInstanceUpdateWithWhereUniqueWithoutAdrInput | ADR_ComponentInstanceUpdateWithWhereUniqueWithoutAdrInput[]
    updateMany?: ADR_ComponentInstanceUpdateManyWithWhereWithoutAdrInput | ADR_ComponentInstanceUpdateManyWithWhereWithoutAdrInput[]
    deleteMany?: ADR_ComponentInstanceScalarWhereInput | ADR_ComponentInstanceScalarWhereInput[]
  }

  export type ADR_ComponentUncheckedUpdateManyWithoutAdrNestedInput = {
    create?: XOR<ADR_ComponentCreateWithoutAdrInput, ADR_ComponentUncheckedCreateWithoutAdrInput> | ADR_ComponentCreateWithoutAdrInput[] | ADR_ComponentUncheckedCreateWithoutAdrInput[]
    connectOrCreate?: ADR_ComponentCreateOrConnectWithoutAdrInput | ADR_ComponentCreateOrConnectWithoutAdrInput[]
    upsert?: ADR_ComponentUpsertWithWhereUniqueWithoutAdrInput | ADR_ComponentUpsertWithWhereUniqueWithoutAdrInput[]
    createMany?: ADR_ComponentCreateManyAdrInputEnvelope
    set?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
    disconnect?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
    delete?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
    connect?: ADR_ComponentWhereUniqueInput | ADR_ComponentWhereUniqueInput[]
    update?: ADR_ComponentUpdateWithWhereUniqueWithoutAdrInput | ADR_ComponentUpdateWithWhereUniqueWithoutAdrInput[]
    updateMany?: ADR_ComponentUpdateManyWithWhereWithoutAdrInput | ADR_ComponentUpdateManyWithWhereWithoutAdrInput[]
    deleteMany?: ADR_ComponentScalarWhereInput | ADR_ComponentScalarWhereInput[]
  }

  export type ADRCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<ADRCreateWithoutParticipantsInput, ADRUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: ADRCreateOrConnectWithoutParticipantsInput
    connect?: ADRWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAdrParticipantsInput = {
    create?: XOR<UserCreateWithoutAdrParticipantsInput, UserUncheckedCreateWithoutAdrParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdrParticipantsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumParticipantRoleFieldUpdateOperationsInput = {
    set?: $Enums.ParticipantRole
  }

  export type ADRUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<ADRCreateWithoutParticipantsInput, ADRUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: ADRCreateOrConnectWithoutParticipantsInput
    upsert?: ADRUpsertWithoutParticipantsInput
    connect?: ADRWhereUniqueInput
    update?: XOR<XOR<ADRUpdateToOneWithWhereWithoutParticipantsInput, ADRUpdateWithoutParticipantsInput>, ADRUncheckedUpdateWithoutParticipantsInput>
  }

  export type UserUpdateOneRequiredWithoutAdrParticipantsNestedInput = {
    create?: XOR<UserCreateWithoutAdrParticipantsInput, UserUncheckedCreateWithoutAdrParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdrParticipantsInput
    upsert?: UserUpsertWithoutAdrParticipantsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdrParticipantsInput, UserUpdateWithoutAdrParticipantsInput>, UserUncheckedUpdateWithoutAdrParticipantsInput>
  }

  export type ADRCreateNestedOneWithoutComponentInstancesInput = {
    create?: XOR<ADRCreateWithoutComponentInstancesInput, ADRUncheckedCreateWithoutComponentInstancesInput>
    connectOrCreate?: ADRCreateOrConnectWithoutComponentInstancesInput
    connect?: ADRWhereUniqueInput
  }

  export type ComponentInstanceCreateNestedOneWithoutAdrInstancesInput = {
    create?: XOR<ComponentInstanceCreateWithoutAdrInstancesInput, ComponentInstanceUncheckedCreateWithoutAdrInstancesInput>
    connectOrCreate?: ComponentInstanceCreateOrConnectWithoutAdrInstancesInput
    connect?: ComponentInstanceWhereUniqueInput
  }

  export type EnumImpactLevelFieldUpdateOperationsInput = {
    set?: $Enums.ImpactLevel
  }

  export type ADRUpdateOneRequiredWithoutComponentInstancesNestedInput = {
    create?: XOR<ADRCreateWithoutComponentInstancesInput, ADRUncheckedCreateWithoutComponentInstancesInput>
    connectOrCreate?: ADRCreateOrConnectWithoutComponentInstancesInput
    upsert?: ADRUpsertWithoutComponentInstancesInput
    connect?: ADRWhereUniqueInput
    update?: XOR<XOR<ADRUpdateToOneWithWhereWithoutComponentInstancesInput, ADRUpdateWithoutComponentInstancesInput>, ADRUncheckedUpdateWithoutComponentInstancesInput>
  }

  export type ComponentInstanceUpdateOneRequiredWithoutAdrInstancesNestedInput = {
    create?: XOR<ComponentInstanceCreateWithoutAdrInstancesInput, ComponentInstanceUncheckedCreateWithoutAdrInstancesInput>
    connectOrCreate?: ComponentInstanceCreateOrConnectWithoutAdrInstancesInput
    upsert?: ComponentInstanceUpsertWithoutAdrInstancesInput
    connect?: ComponentInstanceWhereUniqueInput
    update?: XOR<XOR<ComponentInstanceUpdateToOneWithWhereWithoutAdrInstancesInput, ComponentInstanceUpdateWithoutAdrInstancesInput>, ComponentInstanceUncheckedUpdateWithoutAdrInstancesInput>
  }

  export type ADRCreateNestedOneWithoutComponentsInput = {
    create?: XOR<ADRCreateWithoutComponentsInput, ADRUncheckedCreateWithoutComponentsInput>
    connectOrCreate?: ADRCreateOrConnectWithoutComponentsInput
    connect?: ADRWhereUniqueInput
  }

  export type ComponentCreateNestedOneWithoutAdrComponentsInput = {
    create?: XOR<ComponentCreateWithoutAdrComponentsInput, ComponentUncheckedCreateWithoutAdrComponentsInput>
    connectOrCreate?: ComponentCreateOrConnectWithoutAdrComponentsInput
    connect?: ComponentWhereUniqueInput
  }

  export type ADRUpdateOneRequiredWithoutComponentsNestedInput = {
    create?: XOR<ADRCreateWithoutComponentsInput, ADRUncheckedCreateWithoutComponentsInput>
    connectOrCreate?: ADRCreateOrConnectWithoutComponentsInput
    upsert?: ADRUpsertWithoutComponentsInput
    connect?: ADRWhereUniqueInput
    update?: XOR<XOR<ADRUpdateToOneWithWhereWithoutComponentsInput, ADRUpdateWithoutComponentsInput>, ADRUncheckedUpdateWithoutComponentsInput>
  }

  export type ComponentUpdateOneRequiredWithoutAdrComponentsNestedInput = {
    create?: XOR<ComponentCreateWithoutAdrComponentsInput, ComponentUncheckedCreateWithoutAdrComponentsInput>
    connectOrCreate?: ComponentCreateOrConnectWithoutAdrComponentsInput
    upsert?: ComponentUpsertWithoutAdrComponentsInput
    connect?: ComponentWhereUniqueInput
    update?: XOR<XOR<ComponentUpdateToOneWithWhereWithoutAdrComponentsInput, ComponentUpdateWithoutAdrComponentsInput>, ComponentUncheckedUpdateWithoutAdrComponentsInput>
  }

  export type RoadmapTypeCreateNestedOneWithoutItemsInput = {
    create?: XOR<RoadmapTypeCreateWithoutItemsInput, RoadmapTypeUncheckedCreateWithoutItemsInput>
    connectOrCreate?: RoadmapTypeCreateOrConnectWithoutItemsInput
    connect?: RoadmapTypeWhereUniqueInput
  }

  export type EnumRoadmapItem_statusFieldUpdateOperationsInput = {
    set?: $Enums.RoadmapItem_status
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type RoadmapTypeUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<RoadmapTypeCreateWithoutItemsInput, RoadmapTypeUncheckedCreateWithoutItemsInput>
    connectOrCreate?: RoadmapTypeCreateOrConnectWithoutItemsInput
    upsert?: RoadmapTypeUpsertWithoutItemsInput
    connect?: RoadmapTypeWhereUniqueInput
    update?: XOR<XOR<RoadmapTypeUpdateToOneWithWhereWithoutItemsInput, RoadmapTypeUpdateWithoutItemsInput>, RoadmapTypeUncheckedUpdateWithoutItemsInput>
  }

  export type RoadmapItemCreateNestedManyWithoutTypeInput = {
    create?: XOR<RoadmapItemCreateWithoutTypeInput, RoadmapItemUncheckedCreateWithoutTypeInput> | RoadmapItemCreateWithoutTypeInput[] | RoadmapItemUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: RoadmapItemCreateOrConnectWithoutTypeInput | RoadmapItemCreateOrConnectWithoutTypeInput[]
    createMany?: RoadmapItemCreateManyTypeInputEnvelope
    connect?: RoadmapItemWhereUniqueInput | RoadmapItemWhereUniqueInput[]
  }

  export type RoadmapItemUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<RoadmapItemCreateWithoutTypeInput, RoadmapItemUncheckedCreateWithoutTypeInput> | RoadmapItemCreateWithoutTypeInput[] | RoadmapItemUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: RoadmapItemCreateOrConnectWithoutTypeInput | RoadmapItemCreateOrConnectWithoutTypeInput[]
    createMany?: RoadmapItemCreateManyTypeInputEnvelope
    connect?: RoadmapItemWhereUniqueInput | RoadmapItemWhereUniqueInput[]
  }

  export type RoadmapItemUpdateManyWithoutTypeNestedInput = {
    create?: XOR<RoadmapItemCreateWithoutTypeInput, RoadmapItemUncheckedCreateWithoutTypeInput> | RoadmapItemCreateWithoutTypeInput[] | RoadmapItemUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: RoadmapItemCreateOrConnectWithoutTypeInput | RoadmapItemCreateOrConnectWithoutTypeInput[]
    upsert?: RoadmapItemUpsertWithWhereUniqueWithoutTypeInput | RoadmapItemUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: RoadmapItemCreateManyTypeInputEnvelope
    set?: RoadmapItemWhereUniqueInput | RoadmapItemWhereUniqueInput[]
    disconnect?: RoadmapItemWhereUniqueInput | RoadmapItemWhereUniqueInput[]
    delete?: RoadmapItemWhereUniqueInput | RoadmapItemWhereUniqueInput[]
    connect?: RoadmapItemWhereUniqueInput | RoadmapItemWhereUniqueInput[]
    update?: RoadmapItemUpdateWithWhereUniqueWithoutTypeInput | RoadmapItemUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: RoadmapItemUpdateManyWithWhereWithoutTypeInput | RoadmapItemUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: RoadmapItemScalarWhereInput | RoadmapItemScalarWhereInput[]
  }

  export type RoadmapItemUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<RoadmapItemCreateWithoutTypeInput, RoadmapItemUncheckedCreateWithoutTypeInput> | RoadmapItemCreateWithoutTypeInput[] | RoadmapItemUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: RoadmapItemCreateOrConnectWithoutTypeInput | RoadmapItemCreateOrConnectWithoutTypeInput[]
    upsert?: RoadmapItemUpsertWithWhereUniqueWithoutTypeInput | RoadmapItemUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: RoadmapItemCreateManyTypeInputEnvelope
    set?: RoadmapItemWhereUniqueInput | RoadmapItemWhereUniqueInput[]
    disconnect?: RoadmapItemWhereUniqueInput | RoadmapItemWhereUniqueInput[]
    delete?: RoadmapItemWhereUniqueInput | RoadmapItemWhereUniqueInput[]
    connect?: RoadmapItemWhereUniqueInput | RoadmapItemWhereUniqueInput[]
    update?: RoadmapItemUpdateWithWhereUniqueWithoutTypeInput | RoadmapItemUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: RoadmapItemUpdateManyWithWhereWithoutTypeInput | RoadmapItemUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: RoadmapItemScalarWhereInput | RoadmapItemScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLogsInput = {
    create?: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumLogLevelFieldUpdateOperationsInput = {
    set?: $Enums.LogLevel
  }

  export type UserUpdateOneWithoutLogsNestedInput = {
    create?: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogsInput
    upsert?: UserUpsertWithoutLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLogsInput, UserUpdateWithoutLogsInput>, UserUncheckedUpdateWithoutLogsInput>
  }

  export type EnumGlossaryStatusFieldUpdateOperationsInput = {
    set?: $Enums.GlossaryStatus
  }

  export type ComponentCreateNestedOneWithoutTagsInput = {
    create?: XOR<ComponentCreateWithoutTagsInput, ComponentUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ComponentCreateOrConnectWithoutTagsInput
    connect?: ComponentWhereUniqueInput
  }

  export type ComponentUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<ComponentCreateWithoutTagsInput, ComponentUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ComponentCreateOrConnectWithoutTagsInput
    upsert?: ComponentUpsertWithoutTagsInput
    connect?: ComponentWhereUniqueInput
    update?: XOR<XOR<ComponentUpdateToOneWithWhereWithoutTagsInput, ComponentUpdateWithoutTagsInput>, ComponentUncheckedUpdateWithoutTagsInput>
  }

  export type ADRCreateNestedOneWithoutTagsInput = {
    create?: XOR<ADRCreateWithoutTagsInput, ADRUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ADRCreateOrConnectWithoutTagsInput
    connect?: ADRWhereUniqueInput
  }

  export type ADRUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<ADRCreateWithoutTagsInput, ADRUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ADRCreateOrConnectWithoutTagsInput
    upsert?: ADRUpsertWithoutTagsInput
    connect?: ADRWhereUniqueInput
    update?: XOR<XOR<ADRUpdateToOneWithWhereWithoutTagsInput, ADRUpdateWithoutTagsInput>, ADRUncheckedUpdateWithoutTagsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUser_roleFilter<$PrismaModel = never> = {
    equals?: $Enums.User_role | EnumUser_roleFieldRefInput<$PrismaModel>
    in?: $Enums.User_role[]
    notIn?: $Enums.User_role[]
    not?: NestedEnumUser_roleFilter<$PrismaModel> | $Enums.User_role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumUser_roleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.User_role | EnumUser_roleFieldRefInput<$PrismaModel>
    in?: $Enums.User_role[]
    notIn?: $Enums.User_role[]
    not?: NestedEnumUser_roleWithAggregatesFilter<$PrismaModel> | $Enums.User_role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUser_roleFilter<$PrismaModel>
    _max?: NestedEnumUser_roleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumComponent_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.Component_status | EnumComponent_statusFieldRefInput<$PrismaModel>
    in?: $Enums.Component_status[]
    notIn?: $Enums.Component_status[]
    not?: NestedEnumComponent_statusFilter<$PrismaModel> | $Enums.Component_status
  }

  export type NestedEnumComponent_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Component_status | EnumComponent_statusFieldRefInput<$PrismaModel>
    in?: $Enums.Component_status[]
    notIn?: $Enums.Component_status[]
    not?: NestedEnumComponent_statusWithAggregatesFilter<$PrismaModel> | $Enums.Component_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComponent_statusFilter<$PrismaModel>
    _max?: NestedEnumComponent_statusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumADR_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.ADR_status | EnumADR_statusFieldRefInput<$PrismaModel>
    in?: $Enums.ADR_status[]
    notIn?: $Enums.ADR_status[]
    not?: NestedEnumADR_statusFilter<$PrismaModel> | $Enums.ADR_status
  }

  export type NestedEnumADR_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ADR_status | EnumADR_statusFieldRefInput<$PrismaModel>
    in?: $Enums.ADR_status[]
    notIn?: $Enums.ADR_status[]
    not?: NestedEnumADR_statusWithAggregatesFilter<$PrismaModel> | $Enums.ADR_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumADR_statusFilter<$PrismaModel>
    _max?: NestedEnumADR_statusFilter<$PrismaModel>
  }

  export type NestedEnumParticipantRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ParticipantRole | EnumParticipantRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ParticipantRole[]
    notIn?: $Enums.ParticipantRole[]
    not?: NestedEnumParticipantRoleFilter<$PrismaModel> | $Enums.ParticipantRole
  }

  export type NestedEnumParticipantRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ParticipantRole | EnumParticipantRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ParticipantRole[]
    notIn?: $Enums.ParticipantRole[]
    not?: NestedEnumParticipantRoleWithAggregatesFilter<$PrismaModel> | $Enums.ParticipantRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumParticipantRoleFilter<$PrismaModel>
    _max?: NestedEnumParticipantRoleFilter<$PrismaModel>
  }

  export type NestedEnumImpactLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.ImpactLevel | EnumImpactLevelFieldRefInput<$PrismaModel>
    in?: $Enums.ImpactLevel[]
    notIn?: $Enums.ImpactLevel[]
    not?: NestedEnumImpactLevelFilter<$PrismaModel> | $Enums.ImpactLevel
  }

  export type NestedEnumImpactLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ImpactLevel | EnumImpactLevelFieldRefInput<$PrismaModel>
    in?: $Enums.ImpactLevel[]
    notIn?: $Enums.ImpactLevel[]
    not?: NestedEnumImpactLevelWithAggregatesFilter<$PrismaModel> | $Enums.ImpactLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumImpactLevelFilter<$PrismaModel>
    _max?: NestedEnumImpactLevelFilter<$PrismaModel>
  }

  export type NestedEnumRoadmapItem_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.RoadmapItem_status | EnumRoadmapItem_statusFieldRefInput<$PrismaModel>
    in?: $Enums.RoadmapItem_status[]
    notIn?: $Enums.RoadmapItem_status[]
    not?: NestedEnumRoadmapItem_statusFilter<$PrismaModel> | $Enums.RoadmapItem_status
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumRoadmapItem_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoadmapItem_status | EnumRoadmapItem_statusFieldRefInput<$PrismaModel>
    in?: $Enums.RoadmapItem_status[]
    notIn?: $Enums.RoadmapItem_status[]
    not?: NestedEnumRoadmapItem_statusWithAggregatesFilter<$PrismaModel> | $Enums.RoadmapItem_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoadmapItem_statusFilter<$PrismaModel>
    _max?: NestedEnumRoadmapItem_statusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumLogLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.LogLevel | EnumLogLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LogLevel[]
    notIn?: $Enums.LogLevel[]
    not?: NestedEnumLogLevelFilter<$PrismaModel> | $Enums.LogLevel
  }

  export type NestedEnumLogLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogLevel | EnumLogLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LogLevel[]
    notIn?: $Enums.LogLevel[]
    not?: NestedEnumLogLevelWithAggregatesFilter<$PrismaModel> | $Enums.LogLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogLevelFilter<$PrismaModel>
    _max?: NestedEnumLogLevelFilter<$PrismaModel>
  }

  export type NestedEnumGlossaryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.GlossaryStatus | EnumGlossaryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GlossaryStatus[]
    notIn?: $Enums.GlossaryStatus[]
    not?: NestedEnumGlossaryStatusFilter<$PrismaModel> | $Enums.GlossaryStatus
  }

  export type NestedEnumGlossaryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GlossaryStatus | EnumGlossaryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GlossaryStatus[]
    notIn?: $Enums.GlossaryStatus[]
    not?: NestedEnumGlossaryStatusWithAggregatesFilter<$PrismaModel> | $Enums.GlossaryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGlossaryStatusFilter<$PrismaModel>
    _max?: NestedEnumGlossaryStatusFilter<$PrismaModel>
  }

  export type LogCreateWithoutUserInput = {
    level?: $Enums.LogLevel
    message: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type LogUncheckedCreateWithoutUserInput = {
    id?: number
    level?: $Enums.LogLevel
    message: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type LogCreateOrConnectWithoutUserInput = {
    where: LogWhereUniqueInput
    create: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput>
  }

  export type LogCreateManyUserInputEnvelope = {
    data: LogCreateManyUserInput | LogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type Team_MemberCreateWithoutUserInput = {
    joinedAt?: Date | string
    team: TeamCreateNestedOneWithoutMembersInput
  }

  export type Team_MemberUncheckedCreateWithoutUserInput = {
    teamId: number
    joinedAt?: Date | string
  }

  export type Team_MemberCreateOrConnectWithoutUserInput = {
    where: Team_MemberWhereUniqueInput
    create: XOR<Team_MemberCreateWithoutUserInput, Team_MemberUncheckedCreateWithoutUserInput>
  }

  export type Team_MemberCreateManyUserInputEnvelope = {
    data: Team_MemberCreateManyUserInput | Team_MemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ADR_ParticipantCreateWithoutUserInput = {
    role: $Enums.ParticipantRole
    createdAt?: Date | string
    adr: ADRCreateNestedOneWithoutParticipantsInput
  }

  export type ADR_ParticipantUncheckedCreateWithoutUserInput = {
    id?: number
    adrId: number
    role: $Enums.ParticipantRole
    createdAt?: Date | string
  }

  export type ADR_ParticipantCreateOrConnectWithoutUserInput = {
    where: ADR_ParticipantWhereUniqueInput
    create: XOR<ADR_ParticipantCreateWithoutUserInput, ADR_ParticipantUncheckedCreateWithoutUserInput>
  }

  export type ADR_ParticipantCreateManyUserInputEnvelope = {
    data: ADR_ParticipantCreateManyUserInput | ADR_ParticipantCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LogUpsertWithWhereUniqueWithoutUserInput = {
    where: LogWhereUniqueInput
    update: XOR<LogUpdateWithoutUserInput, LogUncheckedUpdateWithoutUserInput>
    create: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput>
  }

  export type LogUpdateWithWhereUniqueWithoutUserInput = {
    where: LogWhereUniqueInput
    data: XOR<LogUpdateWithoutUserInput, LogUncheckedUpdateWithoutUserInput>
  }

  export type LogUpdateManyWithWhereWithoutUserInput = {
    where: LogScalarWhereInput
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyWithoutUserInput>
  }

  export type LogScalarWhereInput = {
    AND?: LogScalarWhereInput | LogScalarWhereInput[]
    OR?: LogScalarWhereInput[]
    NOT?: LogScalarWhereInput | LogScalarWhereInput[]
    id?: IntFilter<"Log"> | number
    userId?: IntNullableFilter<"Log"> | number | null
    level?: EnumLogLevelFilter<"Log"> | $Enums.LogLevel
    message?: StringFilter<"Log"> | string
    metadata?: JsonNullableFilter<"Log">
    createdAt?: DateTimeFilter<"Log"> | Date | string
  }

  export type Team_MemberUpsertWithWhereUniqueWithoutUserInput = {
    where: Team_MemberWhereUniqueInput
    update: XOR<Team_MemberUpdateWithoutUserInput, Team_MemberUncheckedUpdateWithoutUserInput>
    create: XOR<Team_MemberCreateWithoutUserInput, Team_MemberUncheckedCreateWithoutUserInput>
  }

  export type Team_MemberUpdateWithWhereUniqueWithoutUserInput = {
    where: Team_MemberWhereUniqueInput
    data: XOR<Team_MemberUpdateWithoutUserInput, Team_MemberUncheckedUpdateWithoutUserInput>
  }

  export type Team_MemberUpdateManyWithWhereWithoutUserInput = {
    where: Team_MemberScalarWhereInput
    data: XOR<Team_MemberUpdateManyMutationInput, Team_MemberUncheckedUpdateManyWithoutUserInput>
  }

  export type Team_MemberScalarWhereInput = {
    AND?: Team_MemberScalarWhereInput | Team_MemberScalarWhereInput[]
    OR?: Team_MemberScalarWhereInput[]
    NOT?: Team_MemberScalarWhereInput | Team_MemberScalarWhereInput[]
    teamId?: IntFilter<"Team_Member"> | number
    userId?: IntFilter<"Team_Member"> | number
    joinedAt?: DateTimeFilter<"Team_Member"> | Date | string
  }

  export type ADR_ParticipantUpsertWithWhereUniqueWithoutUserInput = {
    where: ADR_ParticipantWhereUniqueInput
    update: XOR<ADR_ParticipantUpdateWithoutUserInput, ADR_ParticipantUncheckedUpdateWithoutUserInput>
    create: XOR<ADR_ParticipantCreateWithoutUserInput, ADR_ParticipantUncheckedCreateWithoutUserInput>
  }

  export type ADR_ParticipantUpdateWithWhereUniqueWithoutUserInput = {
    where: ADR_ParticipantWhereUniqueInput
    data: XOR<ADR_ParticipantUpdateWithoutUserInput, ADR_ParticipantUncheckedUpdateWithoutUserInput>
  }

  export type ADR_ParticipantUpdateManyWithWhereWithoutUserInput = {
    where: ADR_ParticipantScalarWhereInput
    data: XOR<ADR_ParticipantUpdateManyMutationInput, ADR_ParticipantUncheckedUpdateManyWithoutUserInput>
  }

  export type ADR_ParticipantScalarWhereInput = {
    AND?: ADR_ParticipantScalarWhereInput | ADR_ParticipantScalarWhereInput[]
    OR?: ADR_ParticipantScalarWhereInput[]
    NOT?: ADR_ParticipantScalarWhereInput | ADR_ParticipantScalarWhereInput[]
    id?: IntFilter<"ADR_Participant"> | number
    adrId?: IntFilter<"ADR_Participant"> | number
    userId?: IntFilter<"ADR_Participant"> | number
    role?: EnumParticipantRoleFilter<"ADR_Participant"> | $Enums.ParticipantRole
    createdAt?: DateTimeFilter<"ADR_Participant"> | Date | string
  }

  export type ComponentCreateWithoutTeamInput = {
    name: string
    description?: string | null
    status: $Enums.Component_status
    createdAt?: Date | string
    category?: CategoryCreateNestedOneWithoutComponentsInput
    tags?: ComponentTagCreateNestedManyWithoutComponentInput
    instances?: ComponentInstanceCreateNestedManyWithoutComponentInput
    adrComponents?: ADR_ComponentCreateNestedManyWithoutComponentInput
  }

  export type ComponentUncheckedCreateWithoutTeamInput = {
    id?: number
    name: string
    description?: string | null
    status: $Enums.Component_status
    categoryId?: number | null
    createdAt?: Date | string
    tags?: ComponentTagUncheckedCreateNestedManyWithoutComponentInput
    instances?: ComponentInstanceUncheckedCreateNestedManyWithoutComponentInput
    adrComponents?: ADR_ComponentUncheckedCreateNestedManyWithoutComponentInput
  }

  export type ComponentCreateOrConnectWithoutTeamInput = {
    where: ComponentWhereUniqueInput
    create: XOR<ComponentCreateWithoutTeamInput, ComponentUncheckedCreateWithoutTeamInput>
  }

  export type ComponentCreateManyTeamInputEnvelope = {
    data: ComponentCreateManyTeamInput | ComponentCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type Team_MemberCreateWithoutTeamInput = {
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutTeamMembersInput
  }

  export type Team_MemberUncheckedCreateWithoutTeamInput = {
    userId: number
    joinedAt?: Date | string
  }

  export type Team_MemberCreateOrConnectWithoutTeamInput = {
    where: Team_MemberWhereUniqueInput
    create: XOR<Team_MemberCreateWithoutTeamInput, Team_MemberUncheckedCreateWithoutTeamInput>
  }

  export type Team_MemberCreateManyTeamInputEnvelope = {
    data: Team_MemberCreateManyTeamInput | Team_MemberCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type ComponentUpsertWithWhereUniqueWithoutTeamInput = {
    where: ComponentWhereUniqueInput
    update: XOR<ComponentUpdateWithoutTeamInput, ComponentUncheckedUpdateWithoutTeamInput>
    create: XOR<ComponentCreateWithoutTeamInput, ComponentUncheckedCreateWithoutTeamInput>
  }

  export type ComponentUpdateWithWhereUniqueWithoutTeamInput = {
    where: ComponentWhereUniqueInput
    data: XOR<ComponentUpdateWithoutTeamInput, ComponentUncheckedUpdateWithoutTeamInput>
  }

  export type ComponentUpdateManyWithWhereWithoutTeamInput = {
    where: ComponentScalarWhereInput
    data: XOR<ComponentUpdateManyMutationInput, ComponentUncheckedUpdateManyWithoutTeamInput>
  }

  export type ComponentScalarWhereInput = {
    AND?: ComponentScalarWhereInput | ComponentScalarWhereInput[]
    OR?: ComponentScalarWhereInput[]
    NOT?: ComponentScalarWhereInput | ComponentScalarWhereInput[]
    id?: IntFilter<"Component"> | number
    name?: StringFilter<"Component"> | string
    description?: StringNullableFilter<"Component"> | string | null
    status?: EnumComponent_statusFilter<"Component"> | $Enums.Component_status
    categoryId?: IntNullableFilter<"Component"> | number | null
    teamId?: IntNullableFilter<"Component"> | number | null
    createdAt?: DateTimeFilter<"Component"> | Date | string
  }

  export type Team_MemberUpsertWithWhereUniqueWithoutTeamInput = {
    where: Team_MemberWhereUniqueInput
    update: XOR<Team_MemberUpdateWithoutTeamInput, Team_MemberUncheckedUpdateWithoutTeamInput>
    create: XOR<Team_MemberCreateWithoutTeamInput, Team_MemberUncheckedCreateWithoutTeamInput>
  }

  export type Team_MemberUpdateWithWhereUniqueWithoutTeamInput = {
    where: Team_MemberWhereUniqueInput
    data: XOR<Team_MemberUpdateWithoutTeamInput, Team_MemberUncheckedUpdateWithoutTeamInput>
  }

  export type Team_MemberUpdateManyWithWhereWithoutTeamInput = {
    where: Team_MemberScalarWhereInput
    data: XOR<Team_MemberUpdateManyMutationInput, Team_MemberUncheckedUpdateManyWithoutTeamInput>
  }

  export type TeamCreateWithoutMembersInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    components?: ComponentCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutMembersInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    components?: ComponentUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutMembersInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
  }

  export type UserCreateWithoutTeamMembersInput = {
    username: string
    passwordHash: string
    email: string
    role?: $Enums.User_role
    createdAt?: Date | string
    logs?: LogCreateNestedManyWithoutUserInput
    adrParticipants?: ADR_ParticipantCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTeamMembersInput = {
    id?: number
    username: string
    passwordHash: string
    email: string
    role?: $Enums.User_role
    createdAt?: Date | string
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    adrParticipants?: ADR_ParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeamMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
  }

  export type TeamUpsertWithoutMembersInput = {
    update: XOR<TeamUpdateWithoutMembersInput, TeamUncheckedUpdateWithoutMembersInput>
    create: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutMembersInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutMembersInput, TeamUncheckedUpdateWithoutMembersInput>
  }

  export type TeamUpdateWithoutMembersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    components?: ComponentUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    components?: ComponentUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type UserUpsertWithoutTeamMembersInput = {
    update: XOR<UserUpdateWithoutTeamMembersInput, UserUncheckedUpdateWithoutTeamMembersInput>
    create: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeamMembersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeamMembersInput, UserUncheckedUpdateWithoutTeamMembersInput>
  }

  export type UserUpdateWithoutTeamMembersInput = {
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUser_roleFieldUpdateOperationsInput | $Enums.User_role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: LogUpdateManyWithoutUserNestedInput
    adrParticipants?: ADR_ParticipantUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUser_roleFieldUpdateOperationsInput | $Enums.User_role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    adrParticipants?: ADR_ParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ComponentInstanceCreateWithoutEnvironmentInput = {
    hostname?: string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    component: ComponentCreateNestedOneWithoutInstancesInput
    adrInstances?: ADR_ComponentInstanceCreateNestedManyWithoutInstanceInput
  }

  export type ComponentInstanceUncheckedCreateWithoutEnvironmentInput = {
    id?: number
    componentId: number
    hostname?: string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    adrInstances?: ADR_ComponentInstanceUncheckedCreateNestedManyWithoutInstanceInput
  }

  export type ComponentInstanceCreateOrConnectWithoutEnvironmentInput = {
    where: ComponentInstanceWhereUniqueInput
    create: XOR<ComponentInstanceCreateWithoutEnvironmentInput, ComponentInstanceUncheckedCreateWithoutEnvironmentInput>
  }

  export type ComponentInstanceCreateManyEnvironmentInputEnvelope = {
    data: ComponentInstanceCreateManyEnvironmentInput | ComponentInstanceCreateManyEnvironmentInput[]
    skipDuplicates?: boolean
  }

  export type ComponentInstanceUpsertWithWhereUniqueWithoutEnvironmentInput = {
    where: ComponentInstanceWhereUniqueInput
    update: XOR<ComponentInstanceUpdateWithoutEnvironmentInput, ComponentInstanceUncheckedUpdateWithoutEnvironmentInput>
    create: XOR<ComponentInstanceCreateWithoutEnvironmentInput, ComponentInstanceUncheckedCreateWithoutEnvironmentInput>
  }

  export type ComponentInstanceUpdateWithWhereUniqueWithoutEnvironmentInput = {
    where: ComponentInstanceWhereUniqueInput
    data: XOR<ComponentInstanceUpdateWithoutEnvironmentInput, ComponentInstanceUncheckedUpdateWithoutEnvironmentInput>
  }

  export type ComponentInstanceUpdateManyWithWhereWithoutEnvironmentInput = {
    where: ComponentInstanceScalarWhereInput
    data: XOR<ComponentInstanceUpdateManyMutationInput, ComponentInstanceUncheckedUpdateManyWithoutEnvironmentInput>
  }

  export type ComponentInstanceScalarWhereInput = {
    AND?: ComponentInstanceScalarWhereInput | ComponentInstanceScalarWhereInput[]
    OR?: ComponentInstanceScalarWhereInput[]
    NOT?: ComponentInstanceScalarWhereInput | ComponentInstanceScalarWhereInput[]
    id?: IntFilter<"ComponentInstance"> | number
    componentId?: IntFilter<"ComponentInstance"> | number
    environmentId?: IntFilter<"ComponentInstance"> | number
    hostname?: StringNullableFilter<"ComponentInstance"> | string | null
    specs?: JsonNullableFilter<"ComponentInstance">
    createdAt?: DateTimeFilter<"ComponentInstance"> | Date | string
  }

  export type ComponentCreateWithoutCategoryInput = {
    name: string
    description?: string | null
    status: $Enums.Component_status
    createdAt?: Date | string
    team?: TeamCreateNestedOneWithoutComponentsInput
    tags?: ComponentTagCreateNestedManyWithoutComponentInput
    instances?: ComponentInstanceCreateNestedManyWithoutComponentInput
    adrComponents?: ADR_ComponentCreateNestedManyWithoutComponentInput
  }

  export type ComponentUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    description?: string | null
    status: $Enums.Component_status
    teamId?: number | null
    createdAt?: Date | string
    tags?: ComponentTagUncheckedCreateNestedManyWithoutComponentInput
    instances?: ComponentInstanceUncheckedCreateNestedManyWithoutComponentInput
    adrComponents?: ADR_ComponentUncheckedCreateNestedManyWithoutComponentInput
  }

  export type ComponentCreateOrConnectWithoutCategoryInput = {
    where: ComponentWhereUniqueInput
    create: XOR<ComponentCreateWithoutCategoryInput, ComponentUncheckedCreateWithoutCategoryInput>
  }

  export type ComponentCreateManyCategoryInputEnvelope = {
    data: ComponentCreateManyCategoryInput | ComponentCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ComponentUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ComponentWhereUniqueInput
    update: XOR<ComponentUpdateWithoutCategoryInput, ComponentUncheckedUpdateWithoutCategoryInput>
    create: XOR<ComponentCreateWithoutCategoryInput, ComponentUncheckedCreateWithoutCategoryInput>
  }

  export type ComponentUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ComponentWhereUniqueInput
    data: XOR<ComponentUpdateWithoutCategoryInput, ComponentUncheckedUpdateWithoutCategoryInput>
  }

  export type ComponentUpdateManyWithWhereWithoutCategoryInput = {
    where: ComponentScalarWhereInput
    data: XOR<ComponentUpdateManyMutationInput, ComponentUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CategoryCreateWithoutComponentsInput = {
    name: string
    description?: string | null
    image?: string | null
    createdAt?: Date | string
  }

  export type CategoryUncheckedCreateWithoutComponentsInput = {
    id?: number
    name: string
    description?: string | null
    image?: string | null
    createdAt?: Date | string
  }

  export type CategoryCreateOrConnectWithoutComponentsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutComponentsInput, CategoryUncheckedCreateWithoutComponentsInput>
  }

  export type TeamCreateWithoutComponentsInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    members?: Team_MemberCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutComponentsInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    members?: Team_MemberUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutComponentsInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutComponentsInput, TeamUncheckedCreateWithoutComponentsInput>
  }

  export type ComponentTagCreateWithoutComponentInput = {
    tag: string
  }

  export type ComponentTagUncheckedCreateWithoutComponentInput = {
    id?: number
    tag: string
  }

  export type ComponentTagCreateOrConnectWithoutComponentInput = {
    where: ComponentTagWhereUniqueInput
    create: XOR<ComponentTagCreateWithoutComponentInput, ComponentTagUncheckedCreateWithoutComponentInput>
  }

  export type ComponentTagCreateManyComponentInputEnvelope = {
    data: ComponentTagCreateManyComponentInput | ComponentTagCreateManyComponentInput[]
    skipDuplicates?: boolean
  }

  export type ComponentInstanceCreateWithoutComponentInput = {
    hostname?: string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    environment: EnvironmentCreateNestedOneWithoutComponentInstancesInput
    adrInstances?: ADR_ComponentInstanceCreateNestedManyWithoutInstanceInput
  }

  export type ComponentInstanceUncheckedCreateWithoutComponentInput = {
    id?: number
    environmentId: number
    hostname?: string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    adrInstances?: ADR_ComponentInstanceUncheckedCreateNestedManyWithoutInstanceInput
  }

  export type ComponentInstanceCreateOrConnectWithoutComponentInput = {
    where: ComponentInstanceWhereUniqueInput
    create: XOR<ComponentInstanceCreateWithoutComponentInput, ComponentInstanceUncheckedCreateWithoutComponentInput>
  }

  export type ComponentInstanceCreateManyComponentInputEnvelope = {
    data: ComponentInstanceCreateManyComponentInput | ComponentInstanceCreateManyComponentInput[]
    skipDuplicates?: boolean
  }

  export type ADR_ComponentCreateWithoutComponentInput = {
    adr: ADRCreateNestedOneWithoutComponentsInput
  }

  export type ADR_ComponentUncheckedCreateWithoutComponentInput = {
    adrId: number
  }

  export type ADR_ComponentCreateOrConnectWithoutComponentInput = {
    where: ADR_ComponentWhereUniqueInput
    create: XOR<ADR_ComponentCreateWithoutComponentInput, ADR_ComponentUncheckedCreateWithoutComponentInput>
  }

  export type ADR_ComponentCreateManyComponentInputEnvelope = {
    data: ADR_ComponentCreateManyComponentInput | ADR_ComponentCreateManyComponentInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutComponentsInput = {
    update: XOR<CategoryUpdateWithoutComponentsInput, CategoryUncheckedUpdateWithoutComponentsInput>
    create: XOR<CategoryCreateWithoutComponentsInput, CategoryUncheckedCreateWithoutComponentsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutComponentsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutComponentsInput, CategoryUncheckedUpdateWithoutComponentsInput>
  }

  export type CategoryUpdateWithoutComponentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateWithoutComponentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUpsertWithoutComponentsInput = {
    update: XOR<TeamUpdateWithoutComponentsInput, TeamUncheckedUpdateWithoutComponentsInput>
    create: XOR<TeamCreateWithoutComponentsInput, TeamUncheckedCreateWithoutComponentsInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutComponentsInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutComponentsInput, TeamUncheckedUpdateWithoutComponentsInput>
  }

  export type TeamUpdateWithoutComponentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: Team_MemberUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutComponentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: Team_MemberUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type ComponentTagUpsertWithWhereUniqueWithoutComponentInput = {
    where: ComponentTagWhereUniqueInput
    update: XOR<ComponentTagUpdateWithoutComponentInput, ComponentTagUncheckedUpdateWithoutComponentInput>
    create: XOR<ComponentTagCreateWithoutComponentInput, ComponentTagUncheckedCreateWithoutComponentInput>
  }

  export type ComponentTagUpdateWithWhereUniqueWithoutComponentInput = {
    where: ComponentTagWhereUniqueInput
    data: XOR<ComponentTagUpdateWithoutComponentInput, ComponentTagUncheckedUpdateWithoutComponentInput>
  }

  export type ComponentTagUpdateManyWithWhereWithoutComponentInput = {
    where: ComponentTagScalarWhereInput
    data: XOR<ComponentTagUpdateManyMutationInput, ComponentTagUncheckedUpdateManyWithoutComponentInput>
  }

  export type ComponentTagScalarWhereInput = {
    AND?: ComponentTagScalarWhereInput | ComponentTagScalarWhereInput[]
    OR?: ComponentTagScalarWhereInput[]
    NOT?: ComponentTagScalarWhereInput | ComponentTagScalarWhereInput[]
    id?: IntFilter<"ComponentTag"> | number
    componentId?: IntFilter<"ComponentTag"> | number
    tag?: StringFilter<"ComponentTag"> | string
  }

  export type ComponentInstanceUpsertWithWhereUniqueWithoutComponentInput = {
    where: ComponentInstanceWhereUniqueInput
    update: XOR<ComponentInstanceUpdateWithoutComponentInput, ComponentInstanceUncheckedUpdateWithoutComponentInput>
    create: XOR<ComponentInstanceCreateWithoutComponentInput, ComponentInstanceUncheckedCreateWithoutComponentInput>
  }

  export type ComponentInstanceUpdateWithWhereUniqueWithoutComponentInput = {
    where: ComponentInstanceWhereUniqueInput
    data: XOR<ComponentInstanceUpdateWithoutComponentInput, ComponentInstanceUncheckedUpdateWithoutComponentInput>
  }

  export type ComponentInstanceUpdateManyWithWhereWithoutComponentInput = {
    where: ComponentInstanceScalarWhereInput
    data: XOR<ComponentInstanceUpdateManyMutationInput, ComponentInstanceUncheckedUpdateManyWithoutComponentInput>
  }

  export type ADR_ComponentUpsertWithWhereUniqueWithoutComponentInput = {
    where: ADR_ComponentWhereUniqueInput
    update: XOR<ADR_ComponentUpdateWithoutComponentInput, ADR_ComponentUncheckedUpdateWithoutComponentInput>
    create: XOR<ADR_ComponentCreateWithoutComponentInput, ADR_ComponentUncheckedCreateWithoutComponentInput>
  }

  export type ADR_ComponentUpdateWithWhereUniqueWithoutComponentInput = {
    where: ADR_ComponentWhereUniqueInput
    data: XOR<ADR_ComponentUpdateWithoutComponentInput, ADR_ComponentUncheckedUpdateWithoutComponentInput>
  }

  export type ADR_ComponentUpdateManyWithWhereWithoutComponentInput = {
    where: ADR_ComponentScalarWhereInput
    data: XOR<ADR_ComponentUpdateManyMutationInput, ADR_ComponentUncheckedUpdateManyWithoutComponentInput>
  }

  export type ADR_ComponentScalarWhereInput = {
    AND?: ADR_ComponentScalarWhereInput | ADR_ComponentScalarWhereInput[]
    OR?: ADR_ComponentScalarWhereInput[]
    NOT?: ADR_ComponentScalarWhereInput | ADR_ComponentScalarWhereInput[]
    adrId?: IntFilter<"ADR_Component"> | number
    componentId?: IntFilter<"ADR_Component"> | number
  }

  export type ComponentCreateWithoutInstancesInput = {
    name: string
    description?: string | null
    status: $Enums.Component_status
    createdAt?: Date | string
    category?: CategoryCreateNestedOneWithoutComponentsInput
    team?: TeamCreateNestedOneWithoutComponentsInput
    tags?: ComponentTagCreateNestedManyWithoutComponentInput
    adrComponents?: ADR_ComponentCreateNestedManyWithoutComponentInput
  }

  export type ComponentUncheckedCreateWithoutInstancesInput = {
    id?: number
    name: string
    description?: string | null
    status: $Enums.Component_status
    categoryId?: number | null
    teamId?: number | null
    createdAt?: Date | string
    tags?: ComponentTagUncheckedCreateNestedManyWithoutComponentInput
    adrComponents?: ADR_ComponentUncheckedCreateNestedManyWithoutComponentInput
  }

  export type ComponentCreateOrConnectWithoutInstancesInput = {
    where: ComponentWhereUniqueInput
    create: XOR<ComponentCreateWithoutInstancesInput, ComponentUncheckedCreateWithoutInstancesInput>
  }

  export type EnvironmentCreateWithoutComponentInstancesInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
  }

  export type EnvironmentUncheckedCreateWithoutComponentInstancesInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
  }

  export type EnvironmentCreateOrConnectWithoutComponentInstancesInput = {
    where: EnvironmentWhereUniqueInput
    create: XOR<EnvironmentCreateWithoutComponentInstancesInput, EnvironmentUncheckedCreateWithoutComponentInstancesInput>
  }

  export type ADR_ComponentInstanceCreateWithoutInstanceInput = {
    impactLevel?: $Enums.ImpactLevel
    adr: ADRCreateNestedOneWithoutComponentInstancesInput
  }

  export type ADR_ComponentInstanceUncheckedCreateWithoutInstanceInput = {
    adrId: number
    impactLevel?: $Enums.ImpactLevel
  }

  export type ADR_ComponentInstanceCreateOrConnectWithoutInstanceInput = {
    where: ADR_ComponentInstanceWhereUniqueInput
    create: XOR<ADR_ComponentInstanceCreateWithoutInstanceInput, ADR_ComponentInstanceUncheckedCreateWithoutInstanceInput>
  }

  export type ADR_ComponentInstanceCreateManyInstanceInputEnvelope = {
    data: ADR_ComponentInstanceCreateManyInstanceInput | ADR_ComponentInstanceCreateManyInstanceInput[]
    skipDuplicates?: boolean
  }

  export type ComponentUpsertWithoutInstancesInput = {
    update: XOR<ComponentUpdateWithoutInstancesInput, ComponentUncheckedUpdateWithoutInstancesInput>
    create: XOR<ComponentCreateWithoutInstancesInput, ComponentUncheckedCreateWithoutInstancesInput>
    where?: ComponentWhereInput
  }

  export type ComponentUpdateToOneWithWhereWithoutInstancesInput = {
    where?: ComponentWhereInput
    data: XOR<ComponentUpdateWithoutInstancesInput, ComponentUncheckedUpdateWithoutInstancesInput>
  }

  export type ComponentUpdateWithoutInstancesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponent_statusFieldUpdateOperationsInput | $Enums.Component_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneWithoutComponentsNestedInput
    team?: TeamUpdateOneWithoutComponentsNestedInput
    tags?: ComponentTagUpdateManyWithoutComponentNestedInput
    adrComponents?: ADR_ComponentUpdateManyWithoutComponentNestedInput
  }

  export type ComponentUncheckedUpdateWithoutInstancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponent_statusFieldUpdateOperationsInput | $Enums.Component_status
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: ComponentTagUncheckedUpdateManyWithoutComponentNestedInput
    adrComponents?: ADR_ComponentUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type EnvironmentUpsertWithoutComponentInstancesInput = {
    update: XOR<EnvironmentUpdateWithoutComponentInstancesInput, EnvironmentUncheckedUpdateWithoutComponentInstancesInput>
    create: XOR<EnvironmentCreateWithoutComponentInstancesInput, EnvironmentUncheckedCreateWithoutComponentInstancesInput>
    where?: EnvironmentWhereInput
  }

  export type EnvironmentUpdateToOneWithWhereWithoutComponentInstancesInput = {
    where?: EnvironmentWhereInput
    data: XOR<EnvironmentUpdateWithoutComponentInstancesInput, EnvironmentUncheckedUpdateWithoutComponentInstancesInput>
  }

  export type EnvironmentUpdateWithoutComponentInstancesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnvironmentUncheckedUpdateWithoutComponentInstancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ADR_ComponentInstanceUpsertWithWhereUniqueWithoutInstanceInput = {
    where: ADR_ComponentInstanceWhereUniqueInput
    update: XOR<ADR_ComponentInstanceUpdateWithoutInstanceInput, ADR_ComponentInstanceUncheckedUpdateWithoutInstanceInput>
    create: XOR<ADR_ComponentInstanceCreateWithoutInstanceInput, ADR_ComponentInstanceUncheckedCreateWithoutInstanceInput>
  }

  export type ADR_ComponentInstanceUpdateWithWhereUniqueWithoutInstanceInput = {
    where: ADR_ComponentInstanceWhereUniqueInput
    data: XOR<ADR_ComponentInstanceUpdateWithoutInstanceInput, ADR_ComponentInstanceUncheckedUpdateWithoutInstanceInput>
  }

  export type ADR_ComponentInstanceUpdateManyWithWhereWithoutInstanceInput = {
    where: ADR_ComponentInstanceScalarWhereInput
    data: XOR<ADR_ComponentInstanceUpdateManyMutationInput, ADR_ComponentInstanceUncheckedUpdateManyWithoutInstanceInput>
  }

  export type ADR_ComponentInstanceScalarWhereInput = {
    AND?: ADR_ComponentInstanceScalarWhereInput | ADR_ComponentInstanceScalarWhereInput[]
    OR?: ADR_ComponentInstanceScalarWhereInput[]
    NOT?: ADR_ComponentInstanceScalarWhereInput | ADR_ComponentInstanceScalarWhereInput[]
    adrId?: IntFilter<"ADR_ComponentInstance"> | number
    instanceId?: IntFilter<"ADR_ComponentInstance"> | number
    impactLevel?: EnumImpactLevelFilter<"ADR_ComponentInstance"> | $Enums.ImpactLevel
  }

  export type ADRTagCreateWithoutAdrInput = {
    tag: string
  }

  export type ADRTagUncheckedCreateWithoutAdrInput = {
    id?: number
    tag: string
  }

  export type ADRTagCreateOrConnectWithoutAdrInput = {
    where: ADRTagWhereUniqueInput
    create: XOR<ADRTagCreateWithoutAdrInput, ADRTagUncheckedCreateWithoutAdrInput>
  }

  export type ADRTagCreateManyAdrInputEnvelope = {
    data: ADRTagCreateManyAdrInput | ADRTagCreateManyAdrInput[]
    skipDuplicates?: boolean
  }

  export type ADR_ParticipantCreateWithoutAdrInput = {
    role: $Enums.ParticipantRole
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAdrParticipantsInput
  }

  export type ADR_ParticipantUncheckedCreateWithoutAdrInput = {
    id?: number
    userId: number
    role: $Enums.ParticipantRole
    createdAt?: Date | string
  }

  export type ADR_ParticipantCreateOrConnectWithoutAdrInput = {
    where: ADR_ParticipantWhereUniqueInput
    create: XOR<ADR_ParticipantCreateWithoutAdrInput, ADR_ParticipantUncheckedCreateWithoutAdrInput>
  }

  export type ADR_ParticipantCreateManyAdrInputEnvelope = {
    data: ADR_ParticipantCreateManyAdrInput | ADR_ParticipantCreateManyAdrInput[]
    skipDuplicates?: boolean
  }

  export type ADR_ComponentInstanceCreateWithoutAdrInput = {
    impactLevel?: $Enums.ImpactLevel
    instance: ComponentInstanceCreateNestedOneWithoutAdrInstancesInput
  }

  export type ADR_ComponentInstanceUncheckedCreateWithoutAdrInput = {
    instanceId: number
    impactLevel?: $Enums.ImpactLevel
  }

  export type ADR_ComponentInstanceCreateOrConnectWithoutAdrInput = {
    where: ADR_ComponentInstanceWhereUniqueInput
    create: XOR<ADR_ComponentInstanceCreateWithoutAdrInput, ADR_ComponentInstanceUncheckedCreateWithoutAdrInput>
  }

  export type ADR_ComponentInstanceCreateManyAdrInputEnvelope = {
    data: ADR_ComponentInstanceCreateManyAdrInput | ADR_ComponentInstanceCreateManyAdrInput[]
    skipDuplicates?: boolean
  }

  export type ADR_ComponentCreateWithoutAdrInput = {
    component: ComponentCreateNestedOneWithoutAdrComponentsInput
  }

  export type ADR_ComponentUncheckedCreateWithoutAdrInput = {
    componentId: number
  }

  export type ADR_ComponentCreateOrConnectWithoutAdrInput = {
    where: ADR_ComponentWhereUniqueInput
    create: XOR<ADR_ComponentCreateWithoutAdrInput, ADR_ComponentUncheckedCreateWithoutAdrInput>
  }

  export type ADR_ComponentCreateManyAdrInputEnvelope = {
    data: ADR_ComponentCreateManyAdrInput | ADR_ComponentCreateManyAdrInput[]
    skipDuplicates?: boolean
  }

  export type ADRTagUpsertWithWhereUniqueWithoutAdrInput = {
    where: ADRTagWhereUniqueInput
    update: XOR<ADRTagUpdateWithoutAdrInput, ADRTagUncheckedUpdateWithoutAdrInput>
    create: XOR<ADRTagCreateWithoutAdrInput, ADRTagUncheckedCreateWithoutAdrInput>
  }

  export type ADRTagUpdateWithWhereUniqueWithoutAdrInput = {
    where: ADRTagWhereUniqueInput
    data: XOR<ADRTagUpdateWithoutAdrInput, ADRTagUncheckedUpdateWithoutAdrInput>
  }

  export type ADRTagUpdateManyWithWhereWithoutAdrInput = {
    where: ADRTagScalarWhereInput
    data: XOR<ADRTagUpdateManyMutationInput, ADRTagUncheckedUpdateManyWithoutAdrInput>
  }

  export type ADRTagScalarWhereInput = {
    AND?: ADRTagScalarWhereInput | ADRTagScalarWhereInput[]
    OR?: ADRTagScalarWhereInput[]
    NOT?: ADRTagScalarWhereInput | ADRTagScalarWhereInput[]
    id?: IntFilter<"ADRTag"> | number
    adrId?: IntFilter<"ADRTag"> | number
    tag?: StringFilter<"ADRTag"> | string
  }

  export type ADR_ParticipantUpsertWithWhereUniqueWithoutAdrInput = {
    where: ADR_ParticipantWhereUniqueInput
    update: XOR<ADR_ParticipantUpdateWithoutAdrInput, ADR_ParticipantUncheckedUpdateWithoutAdrInput>
    create: XOR<ADR_ParticipantCreateWithoutAdrInput, ADR_ParticipantUncheckedCreateWithoutAdrInput>
  }

  export type ADR_ParticipantUpdateWithWhereUniqueWithoutAdrInput = {
    where: ADR_ParticipantWhereUniqueInput
    data: XOR<ADR_ParticipantUpdateWithoutAdrInput, ADR_ParticipantUncheckedUpdateWithoutAdrInput>
  }

  export type ADR_ParticipantUpdateManyWithWhereWithoutAdrInput = {
    where: ADR_ParticipantScalarWhereInput
    data: XOR<ADR_ParticipantUpdateManyMutationInput, ADR_ParticipantUncheckedUpdateManyWithoutAdrInput>
  }

  export type ADR_ComponentInstanceUpsertWithWhereUniqueWithoutAdrInput = {
    where: ADR_ComponentInstanceWhereUniqueInput
    update: XOR<ADR_ComponentInstanceUpdateWithoutAdrInput, ADR_ComponentInstanceUncheckedUpdateWithoutAdrInput>
    create: XOR<ADR_ComponentInstanceCreateWithoutAdrInput, ADR_ComponentInstanceUncheckedCreateWithoutAdrInput>
  }

  export type ADR_ComponentInstanceUpdateWithWhereUniqueWithoutAdrInput = {
    where: ADR_ComponentInstanceWhereUniqueInput
    data: XOR<ADR_ComponentInstanceUpdateWithoutAdrInput, ADR_ComponentInstanceUncheckedUpdateWithoutAdrInput>
  }

  export type ADR_ComponentInstanceUpdateManyWithWhereWithoutAdrInput = {
    where: ADR_ComponentInstanceScalarWhereInput
    data: XOR<ADR_ComponentInstanceUpdateManyMutationInput, ADR_ComponentInstanceUncheckedUpdateManyWithoutAdrInput>
  }

  export type ADR_ComponentUpsertWithWhereUniqueWithoutAdrInput = {
    where: ADR_ComponentWhereUniqueInput
    update: XOR<ADR_ComponentUpdateWithoutAdrInput, ADR_ComponentUncheckedUpdateWithoutAdrInput>
    create: XOR<ADR_ComponentCreateWithoutAdrInput, ADR_ComponentUncheckedCreateWithoutAdrInput>
  }

  export type ADR_ComponentUpdateWithWhereUniqueWithoutAdrInput = {
    where: ADR_ComponentWhereUniqueInput
    data: XOR<ADR_ComponentUpdateWithoutAdrInput, ADR_ComponentUncheckedUpdateWithoutAdrInput>
  }

  export type ADR_ComponentUpdateManyWithWhereWithoutAdrInput = {
    where: ADR_ComponentScalarWhereInput
    data: XOR<ADR_ComponentUpdateManyMutationInput, ADR_ComponentUncheckedUpdateManyWithoutAdrInput>
  }

  export type ADRCreateWithoutParticipantsInput = {
    title: string
    description: string
    status: $Enums.ADR_status
    createdAt?: Date | string
    tags?: ADRTagCreateNestedManyWithoutAdrInput
    componentInstances?: ADR_ComponentInstanceCreateNestedManyWithoutAdrInput
    components?: ADR_ComponentCreateNestedManyWithoutAdrInput
  }

  export type ADRUncheckedCreateWithoutParticipantsInput = {
    id?: number
    title: string
    description: string
    status: $Enums.ADR_status
    createdAt?: Date | string
    tags?: ADRTagUncheckedCreateNestedManyWithoutAdrInput
    componentInstances?: ADR_ComponentInstanceUncheckedCreateNestedManyWithoutAdrInput
    components?: ADR_ComponentUncheckedCreateNestedManyWithoutAdrInput
  }

  export type ADRCreateOrConnectWithoutParticipantsInput = {
    where: ADRWhereUniqueInput
    create: XOR<ADRCreateWithoutParticipantsInput, ADRUncheckedCreateWithoutParticipantsInput>
  }

  export type UserCreateWithoutAdrParticipantsInput = {
    username: string
    passwordHash: string
    email: string
    role?: $Enums.User_role
    createdAt?: Date | string
    logs?: LogCreateNestedManyWithoutUserInput
    teamMembers?: Team_MemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdrParticipantsInput = {
    id?: number
    username: string
    passwordHash: string
    email: string
    role?: $Enums.User_role
    createdAt?: Date | string
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: Team_MemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdrParticipantsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdrParticipantsInput, UserUncheckedCreateWithoutAdrParticipantsInput>
  }

  export type ADRUpsertWithoutParticipantsInput = {
    update: XOR<ADRUpdateWithoutParticipantsInput, ADRUncheckedUpdateWithoutParticipantsInput>
    create: XOR<ADRCreateWithoutParticipantsInput, ADRUncheckedCreateWithoutParticipantsInput>
    where?: ADRWhereInput
  }

  export type ADRUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: ADRWhereInput
    data: XOR<ADRUpdateWithoutParticipantsInput, ADRUncheckedUpdateWithoutParticipantsInput>
  }

  export type ADRUpdateWithoutParticipantsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumADR_statusFieldUpdateOperationsInput | $Enums.ADR_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: ADRTagUpdateManyWithoutAdrNestedInput
    componentInstances?: ADR_ComponentInstanceUpdateManyWithoutAdrNestedInput
    components?: ADR_ComponentUpdateManyWithoutAdrNestedInput
  }

  export type ADRUncheckedUpdateWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumADR_statusFieldUpdateOperationsInput | $Enums.ADR_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: ADRTagUncheckedUpdateManyWithoutAdrNestedInput
    componentInstances?: ADR_ComponentInstanceUncheckedUpdateManyWithoutAdrNestedInput
    components?: ADR_ComponentUncheckedUpdateManyWithoutAdrNestedInput
  }

  export type UserUpsertWithoutAdrParticipantsInput = {
    update: XOR<UserUpdateWithoutAdrParticipantsInput, UserUncheckedUpdateWithoutAdrParticipantsInput>
    create: XOR<UserCreateWithoutAdrParticipantsInput, UserUncheckedCreateWithoutAdrParticipantsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdrParticipantsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdrParticipantsInput, UserUncheckedUpdateWithoutAdrParticipantsInput>
  }

  export type UserUpdateWithoutAdrParticipantsInput = {
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUser_roleFieldUpdateOperationsInput | $Enums.User_role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: LogUpdateManyWithoutUserNestedInput
    teamMembers?: Team_MemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdrParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUser_roleFieldUpdateOperationsInput | $Enums.User_role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: Team_MemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ADRCreateWithoutComponentInstancesInput = {
    title: string
    description: string
    status: $Enums.ADR_status
    createdAt?: Date | string
    tags?: ADRTagCreateNestedManyWithoutAdrInput
    participants?: ADR_ParticipantCreateNestedManyWithoutAdrInput
    components?: ADR_ComponentCreateNestedManyWithoutAdrInput
  }

  export type ADRUncheckedCreateWithoutComponentInstancesInput = {
    id?: number
    title: string
    description: string
    status: $Enums.ADR_status
    createdAt?: Date | string
    tags?: ADRTagUncheckedCreateNestedManyWithoutAdrInput
    participants?: ADR_ParticipantUncheckedCreateNestedManyWithoutAdrInput
    components?: ADR_ComponentUncheckedCreateNestedManyWithoutAdrInput
  }

  export type ADRCreateOrConnectWithoutComponentInstancesInput = {
    where: ADRWhereUniqueInput
    create: XOR<ADRCreateWithoutComponentInstancesInput, ADRUncheckedCreateWithoutComponentInstancesInput>
  }

  export type ComponentInstanceCreateWithoutAdrInstancesInput = {
    hostname?: string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    component: ComponentCreateNestedOneWithoutInstancesInput
    environment: EnvironmentCreateNestedOneWithoutComponentInstancesInput
  }

  export type ComponentInstanceUncheckedCreateWithoutAdrInstancesInput = {
    id?: number
    componentId: number
    environmentId: number
    hostname?: string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ComponentInstanceCreateOrConnectWithoutAdrInstancesInput = {
    where: ComponentInstanceWhereUniqueInput
    create: XOR<ComponentInstanceCreateWithoutAdrInstancesInput, ComponentInstanceUncheckedCreateWithoutAdrInstancesInput>
  }

  export type ADRUpsertWithoutComponentInstancesInput = {
    update: XOR<ADRUpdateWithoutComponentInstancesInput, ADRUncheckedUpdateWithoutComponentInstancesInput>
    create: XOR<ADRCreateWithoutComponentInstancesInput, ADRUncheckedCreateWithoutComponentInstancesInput>
    where?: ADRWhereInput
  }

  export type ADRUpdateToOneWithWhereWithoutComponentInstancesInput = {
    where?: ADRWhereInput
    data: XOR<ADRUpdateWithoutComponentInstancesInput, ADRUncheckedUpdateWithoutComponentInstancesInput>
  }

  export type ADRUpdateWithoutComponentInstancesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumADR_statusFieldUpdateOperationsInput | $Enums.ADR_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: ADRTagUpdateManyWithoutAdrNestedInput
    participants?: ADR_ParticipantUpdateManyWithoutAdrNestedInput
    components?: ADR_ComponentUpdateManyWithoutAdrNestedInput
  }

  export type ADRUncheckedUpdateWithoutComponentInstancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumADR_statusFieldUpdateOperationsInput | $Enums.ADR_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: ADRTagUncheckedUpdateManyWithoutAdrNestedInput
    participants?: ADR_ParticipantUncheckedUpdateManyWithoutAdrNestedInput
    components?: ADR_ComponentUncheckedUpdateManyWithoutAdrNestedInput
  }

  export type ComponentInstanceUpsertWithoutAdrInstancesInput = {
    update: XOR<ComponentInstanceUpdateWithoutAdrInstancesInput, ComponentInstanceUncheckedUpdateWithoutAdrInstancesInput>
    create: XOR<ComponentInstanceCreateWithoutAdrInstancesInput, ComponentInstanceUncheckedCreateWithoutAdrInstancesInput>
    where?: ComponentInstanceWhereInput
  }

  export type ComponentInstanceUpdateToOneWithWhereWithoutAdrInstancesInput = {
    where?: ComponentInstanceWhereInput
    data: XOR<ComponentInstanceUpdateWithoutAdrInstancesInput, ComponentInstanceUncheckedUpdateWithoutAdrInstancesInput>
  }

  export type ComponentInstanceUpdateWithoutAdrInstancesInput = {
    hostname?: NullableStringFieldUpdateOperationsInput | string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    component?: ComponentUpdateOneRequiredWithoutInstancesNestedInput
    environment?: EnvironmentUpdateOneRequiredWithoutComponentInstancesNestedInput
  }

  export type ComponentInstanceUncheckedUpdateWithoutAdrInstancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    componentId?: IntFieldUpdateOperationsInput | number
    environmentId?: IntFieldUpdateOperationsInput | number
    hostname?: NullableStringFieldUpdateOperationsInput | string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ADRCreateWithoutComponentsInput = {
    title: string
    description: string
    status: $Enums.ADR_status
    createdAt?: Date | string
    tags?: ADRTagCreateNestedManyWithoutAdrInput
    participants?: ADR_ParticipantCreateNestedManyWithoutAdrInput
    componentInstances?: ADR_ComponentInstanceCreateNestedManyWithoutAdrInput
  }

  export type ADRUncheckedCreateWithoutComponentsInput = {
    id?: number
    title: string
    description: string
    status: $Enums.ADR_status
    createdAt?: Date | string
    tags?: ADRTagUncheckedCreateNestedManyWithoutAdrInput
    participants?: ADR_ParticipantUncheckedCreateNestedManyWithoutAdrInput
    componentInstances?: ADR_ComponentInstanceUncheckedCreateNestedManyWithoutAdrInput
  }

  export type ADRCreateOrConnectWithoutComponentsInput = {
    where: ADRWhereUniqueInput
    create: XOR<ADRCreateWithoutComponentsInput, ADRUncheckedCreateWithoutComponentsInput>
  }

  export type ComponentCreateWithoutAdrComponentsInput = {
    name: string
    description?: string | null
    status: $Enums.Component_status
    createdAt?: Date | string
    category?: CategoryCreateNestedOneWithoutComponentsInput
    team?: TeamCreateNestedOneWithoutComponentsInput
    tags?: ComponentTagCreateNestedManyWithoutComponentInput
    instances?: ComponentInstanceCreateNestedManyWithoutComponentInput
  }

  export type ComponentUncheckedCreateWithoutAdrComponentsInput = {
    id?: number
    name: string
    description?: string | null
    status: $Enums.Component_status
    categoryId?: number | null
    teamId?: number | null
    createdAt?: Date | string
    tags?: ComponentTagUncheckedCreateNestedManyWithoutComponentInput
    instances?: ComponentInstanceUncheckedCreateNestedManyWithoutComponentInput
  }

  export type ComponentCreateOrConnectWithoutAdrComponentsInput = {
    where: ComponentWhereUniqueInput
    create: XOR<ComponentCreateWithoutAdrComponentsInput, ComponentUncheckedCreateWithoutAdrComponentsInput>
  }

  export type ADRUpsertWithoutComponentsInput = {
    update: XOR<ADRUpdateWithoutComponentsInput, ADRUncheckedUpdateWithoutComponentsInput>
    create: XOR<ADRCreateWithoutComponentsInput, ADRUncheckedCreateWithoutComponentsInput>
    where?: ADRWhereInput
  }

  export type ADRUpdateToOneWithWhereWithoutComponentsInput = {
    where?: ADRWhereInput
    data: XOR<ADRUpdateWithoutComponentsInput, ADRUncheckedUpdateWithoutComponentsInput>
  }

  export type ADRUpdateWithoutComponentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumADR_statusFieldUpdateOperationsInput | $Enums.ADR_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: ADRTagUpdateManyWithoutAdrNestedInput
    participants?: ADR_ParticipantUpdateManyWithoutAdrNestedInput
    componentInstances?: ADR_ComponentInstanceUpdateManyWithoutAdrNestedInput
  }

  export type ADRUncheckedUpdateWithoutComponentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumADR_statusFieldUpdateOperationsInput | $Enums.ADR_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: ADRTagUncheckedUpdateManyWithoutAdrNestedInput
    participants?: ADR_ParticipantUncheckedUpdateManyWithoutAdrNestedInput
    componentInstances?: ADR_ComponentInstanceUncheckedUpdateManyWithoutAdrNestedInput
  }

  export type ComponentUpsertWithoutAdrComponentsInput = {
    update: XOR<ComponentUpdateWithoutAdrComponentsInput, ComponentUncheckedUpdateWithoutAdrComponentsInput>
    create: XOR<ComponentCreateWithoutAdrComponentsInput, ComponentUncheckedCreateWithoutAdrComponentsInput>
    where?: ComponentWhereInput
  }

  export type ComponentUpdateToOneWithWhereWithoutAdrComponentsInput = {
    where?: ComponentWhereInput
    data: XOR<ComponentUpdateWithoutAdrComponentsInput, ComponentUncheckedUpdateWithoutAdrComponentsInput>
  }

  export type ComponentUpdateWithoutAdrComponentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponent_statusFieldUpdateOperationsInput | $Enums.Component_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneWithoutComponentsNestedInput
    team?: TeamUpdateOneWithoutComponentsNestedInput
    tags?: ComponentTagUpdateManyWithoutComponentNestedInput
    instances?: ComponentInstanceUpdateManyWithoutComponentNestedInput
  }

  export type ComponentUncheckedUpdateWithoutAdrComponentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponent_statusFieldUpdateOperationsInput | $Enums.Component_status
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: ComponentTagUncheckedUpdateManyWithoutComponentNestedInput
    instances?: ComponentInstanceUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type RoadmapTypeCreateWithoutItemsInput = {
    name: string
    description?: string | null
    colorHex?: string | null
    createdAt?: Date | string
  }

  export type RoadmapTypeUncheckedCreateWithoutItemsInput = {
    id?: number
    name: string
    description?: string | null
    colorHex?: string | null
    createdAt?: Date | string
  }

  export type RoadmapTypeCreateOrConnectWithoutItemsInput = {
    where: RoadmapTypeWhereUniqueInput
    create: XOR<RoadmapTypeCreateWithoutItemsInput, RoadmapTypeUncheckedCreateWithoutItemsInput>
  }

  export type RoadmapTypeUpsertWithoutItemsInput = {
    update: XOR<RoadmapTypeUpdateWithoutItemsInput, RoadmapTypeUncheckedUpdateWithoutItemsInput>
    create: XOR<RoadmapTypeCreateWithoutItemsInput, RoadmapTypeUncheckedCreateWithoutItemsInput>
    where?: RoadmapTypeWhereInput
  }

  export type RoadmapTypeUpdateToOneWithWhereWithoutItemsInput = {
    where?: RoadmapTypeWhereInput
    data: XOR<RoadmapTypeUpdateWithoutItemsInput, RoadmapTypeUncheckedUpdateWithoutItemsInput>
  }

  export type RoadmapTypeUpdateWithoutItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoadmapTypeUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoadmapItemCreateWithoutTypeInput = {
    title: string
    description?: string | null
    componentId?: number | null
    status?: $Enums.RoadmapItem_status
    dueDate?: Date | string | null
    createdAt?: Date | string
  }

  export type RoadmapItemUncheckedCreateWithoutTypeInput = {
    id?: number
    title: string
    description?: string | null
    componentId?: number | null
    status?: $Enums.RoadmapItem_status
    dueDate?: Date | string | null
    createdAt?: Date | string
  }

  export type RoadmapItemCreateOrConnectWithoutTypeInput = {
    where: RoadmapItemWhereUniqueInput
    create: XOR<RoadmapItemCreateWithoutTypeInput, RoadmapItemUncheckedCreateWithoutTypeInput>
  }

  export type RoadmapItemCreateManyTypeInputEnvelope = {
    data: RoadmapItemCreateManyTypeInput | RoadmapItemCreateManyTypeInput[]
    skipDuplicates?: boolean
  }

  export type RoadmapItemUpsertWithWhereUniqueWithoutTypeInput = {
    where: RoadmapItemWhereUniqueInput
    update: XOR<RoadmapItemUpdateWithoutTypeInput, RoadmapItemUncheckedUpdateWithoutTypeInput>
    create: XOR<RoadmapItemCreateWithoutTypeInput, RoadmapItemUncheckedCreateWithoutTypeInput>
  }

  export type RoadmapItemUpdateWithWhereUniqueWithoutTypeInput = {
    where: RoadmapItemWhereUniqueInput
    data: XOR<RoadmapItemUpdateWithoutTypeInput, RoadmapItemUncheckedUpdateWithoutTypeInput>
  }

  export type RoadmapItemUpdateManyWithWhereWithoutTypeInput = {
    where: RoadmapItemScalarWhereInput
    data: XOR<RoadmapItemUpdateManyMutationInput, RoadmapItemUncheckedUpdateManyWithoutTypeInput>
  }

  export type RoadmapItemScalarWhereInput = {
    AND?: RoadmapItemScalarWhereInput | RoadmapItemScalarWhereInput[]
    OR?: RoadmapItemScalarWhereInput[]
    NOT?: RoadmapItemScalarWhereInput | RoadmapItemScalarWhereInput[]
    id?: IntFilter<"RoadmapItem"> | number
    title?: StringFilter<"RoadmapItem"> | string
    description?: StringNullableFilter<"RoadmapItem"> | string | null
    componentId?: IntNullableFilter<"RoadmapItem"> | number | null
    typeId?: IntFilter<"RoadmapItem"> | number
    status?: EnumRoadmapItem_statusFilter<"RoadmapItem"> | $Enums.RoadmapItem_status
    dueDate?: DateTimeNullableFilter<"RoadmapItem"> | Date | string | null
    createdAt?: DateTimeFilter<"RoadmapItem"> | Date | string
  }

  export type UserCreateWithoutLogsInput = {
    username: string
    passwordHash: string
    email: string
    role?: $Enums.User_role
    createdAt?: Date | string
    teamMembers?: Team_MemberCreateNestedManyWithoutUserInput
    adrParticipants?: ADR_ParticipantCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLogsInput = {
    id?: number
    username: string
    passwordHash: string
    email: string
    role?: $Enums.User_role
    createdAt?: Date | string
    teamMembers?: Team_MemberUncheckedCreateNestedManyWithoutUserInput
    adrParticipants?: ADR_ParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
  }

  export type UserUpsertWithoutLogsInput = {
    update: XOR<UserUpdateWithoutLogsInput, UserUncheckedUpdateWithoutLogsInput>
    create: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLogsInput, UserUncheckedUpdateWithoutLogsInput>
  }

  export type UserUpdateWithoutLogsInput = {
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUser_roleFieldUpdateOperationsInput | $Enums.User_role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamMembers?: Team_MemberUpdateManyWithoutUserNestedInput
    adrParticipants?: ADR_ParticipantUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUser_roleFieldUpdateOperationsInput | $Enums.User_role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamMembers?: Team_MemberUncheckedUpdateManyWithoutUserNestedInput
    adrParticipants?: ADR_ParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ComponentCreateWithoutTagsInput = {
    name: string
    description?: string | null
    status: $Enums.Component_status
    createdAt?: Date | string
    category?: CategoryCreateNestedOneWithoutComponentsInput
    team?: TeamCreateNestedOneWithoutComponentsInput
    instances?: ComponentInstanceCreateNestedManyWithoutComponentInput
    adrComponents?: ADR_ComponentCreateNestedManyWithoutComponentInput
  }

  export type ComponentUncheckedCreateWithoutTagsInput = {
    id?: number
    name: string
    description?: string | null
    status: $Enums.Component_status
    categoryId?: number | null
    teamId?: number | null
    createdAt?: Date | string
    instances?: ComponentInstanceUncheckedCreateNestedManyWithoutComponentInput
    adrComponents?: ADR_ComponentUncheckedCreateNestedManyWithoutComponentInput
  }

  export type ComponentCreateOrConnectWithoutTagsInput = {
    where: ComponentWhereUniqueInput
    create: XOR<ComponentCreateWithoutTagsInput, ComponentUncheckedCreateWithoutTagsInput>
  }

  export type ComponentUpsertWithoutTagsInput = {
    update: XOR<ComponentUpdateWithoutTagsInput, ComponentUncheckedUpdateWithoutTagsInput>
    create: XOR<ComponentCreateWithoutTagsInput, ComponentUncheckedCreateWithoutTagsInput>
    where?: ComponentWhereInput
  }

  export type ComponentUpdateToOneWithWhereWithoutTagsInput = {
    where?: ComponentWhereInput
    data: XOR<ComponentUpdateWithoutTagsInput, ComponentUncheckedUpdateWithoutTagsInput>
  }

  export type ComponentUpdateWithoutTagsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponent_statusFieldUpdateOperationsInput | $Enums.Component_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneWithoutComponentsNestedInput
    team?: TeamUpdateOneWithoutComponentsNestedInput
    instances?: ComponentInstanceUpdateManyWithoutComponentNestedInput
    adrComponents?: ADR_ComponentUpdateManyWithoutComponentNestedInput
  }

  export type ComponentUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponent_statusFieldUpdateOperationsInput | $Enums.Component_status
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: ComponentInstanceUncheckedUpdateManyWithoutComponentNestedInput
    adrComponents?: ADR_ComponentUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type ADRCreateWithoutTagsInput = {
    title: string
    description: string
    status: $Enums.ADR_status
    createdAt?: Date | string
    participants?: ADR_ParticipantCreateNestedManyWithoutAdrInput
    componentInstances?: ADR_ComponentInstanceCreateNestedManyWithoutAdrInput
    components?: ADR_ComponentCreateNestedManyWithoutAdrInput
  }

  export type ADRUncheckedCreateWithoutTagsInput = {
    id?: number
    title: string
    description: string
    status: $Enums.ADR_status
    createdAt?: Date | string
    participants?: ADR_ParticipantUncheckedCreateNestedManyWithoutAdrInput
    componentInstances?: ADR_ComponentInstanceUncheckedCreateNestedManyWithoutAdrInput
    components?: ADR_ComponentUncheckedCreateNestedManyWithoutAdrInput
  }

  export type ADRCreateOrConnectWithoutTagsInput = {
    where: ADRWhereUniqueInput
    create: XOR<ADRCreateWithoutTagsInput, ADRUncheckedCreateWithoutTagsInput>
  }

  export type ADRUpsertWithoutTagsInput = {
    update: XOR<ADRUpdateWithoutTagsInput, ADRUncheckedUpdateWithoutTagsInput>
    create: XOR<ADRCreateWithoutTagsInput, ADRUncheckedCreateWithoutTagsInput>
    where?: ADRWhereInput
  }

  export type ADRUpdateToOneWithWhereWithoutTagsInput = {
    where?: ADRWhereInput
    data: XOR<ADRUpdateWithoutTagsInput, ADRUncheckedUpdateWithoutTagsInput>
  }

  export type ADRUpdateWithoutTagsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumADR_statusFieldUpdateOperationsInput | $Enums.ADR_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: ADR_ParticipantUpdateManyWithoutAdrNestedInput
    componentInstances?: ADR_ComponentInstanceUpdateManyWithoutAdrNestedInput
    components?: ADR_ComponentUpdateManyWithoutAdrNestedInput
  }

  export type ADRUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumADR_statusFieldUpdateOperationsInput | $Enums.ADR_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: ADR_ParticipantUncheckedUpdateManyWithoutAdrNestedInput
    componentInstances?: ADR_ComponentInstanceUncheckedUpdateManyWithoutAdrNestedInput
    components?: ADR_ComponentUncheckedUpdateManyWithoutAdrNestedInput
  }

  export type LogCreateManyUserInput = {
    id?: number
    level?: $Enums.LogLevel
    message: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type Team_MemberCreateManyUserInput = {
    teamId: number
    joinedAt?: Date | string
  }

  export type ADR_ParticipantCreateManyUserInput = {
    id?: number
    adrId: number
    role: $Enums.ParticipantRole
    createdAt?: Date | string
  }

  export type LogUpdateWithoutUserInput = {
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    message?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    message?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    message?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Team_MemberUpdateWithoutUserInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutMembersNestedInput
  }

  export type Team_MemberUncheckedUpdateWithoutUserInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Team_MemberUncheckedUpdateManyWithoutUserInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ADR_ParticipantUpdateWithoutUserInput = {
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adr?: ADRUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type ADR_ParticipantUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    adrId?: IntFieldUpdateOperationsInput | number
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ADR_ParticipantUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    adrId?: IntFieldUpdateOperationsInput | number
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentCreateManyTeamInput = {
    id?: number
    name: string
    description?: string | null
    status: $Enums.Component_status
    categoryId?: number | null
    createdAt?: Date | string
  }

  export type Team_MemberCreateManyTeamInput = {
    userId: number
    joinedAt?: Date | string
  }

  export type ComponentUpdateWithoutTeamInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponent_statusFieldUpdateOperationsInput | $Enums.Component_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneWithoutComponentsNestedInput
    tags?: ComponentTagUpdateManyWithoutComponentNestedInput
    instances?: ComponentInstanceUpdateManyWithoutComponentNestedInput
    adrComponents?: ADR_ComponentUpdateManyWithoutComponentNestedInput
  }

  export type ComponentUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponent_statusFieldUpdateOperationsInput | $Enums.Component_status
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: ComponentTagUncheckedUpdateManyWithoutComponentNestedInput
    instances?: ComponentInstanceUncheckedUpdateManyWithoutComponentNestedInput
    adrComponents?: ADR_ComponentUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type ComponentUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponent_statusFieldUpdateOperationsInput | $Enums.Component_status
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Team_MemberUpdateWithoutTeamInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTeamMembersNestedInput
  }

  export type Team_MemberUncheckedUpdateWithoutTeamInput = {
    userId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Team_MemberUncheckedUpdateManyWithoutTeamInput = {
    userId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentInstanceCreateManyEnvironmentInput = {
    id?: number
    componentId: number
    hostname?: string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ComponentInstanceUpdateWithoutEnvironmentInput = {
    hostname?: NullableStringFieldUpdateOperationsInput | string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    component?: ComponentUpdateOneRequiredWithoutInstancesNestedInput
    adrInstances?: ADR_ComponentInstanceUpdateManyWithoutInstanceNestedInput
  }

  export type ComponentInstanceUncheckedUpdateWithoutEnvironmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    componentId?: IntFieldUpdateOperationsInput | number
    hostname?: NullableStringFieldUpdateOperationsInput | string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adrInstances?: ADR_ComponentInstanceUncheckedUpdateManyWithoutInstanceNestedInput
  }

  export type ComponentInstanceUncheckedUpdateManyWithoutEnvironmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    componentId?: IntFieldUpdateOperationsInput | number
    hostname?: NullableStringFieldUpdateOperationsInput | string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentCreateManyCategoryInput = {
    id?: number
    name: string
    description?: string | null
    status: $Enums.Component_status
    teamId?: number | null
    createdAt?: Date | string
  }

  export type ComponentUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponent_statusFieldUpdateOperationsInput | $Enums.Component_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneWithoutComponentsNestedInput
    tags?: ComponentTagUpdateManyWithoutComponentNestedInput
    instances?: ComponentInstanceUpdateManyWithoutComponentNestedInput
    adrComponents?: ADR_ComponentUpdateManyWithoutComponentNestedInput
  }

  export type ComponentUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponent_statusFieldUpdateOperationsInput | $Enums.Component_status
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: ComponentTagUncheckedUpdateManyWithoutComponentNestedInput
    instances?: ComponentInstanceUncheckedUpdateManyWithoutComponentNestedInput
    adrComponents?: ADR_ComponentUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type ComponentUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponent_statusFieldUpdateOperationsInput | $Enums.Component_status
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentTagCreateManyComponentInput = {
    id?: number
    tag: string
  }

  export type ComponentInstanceCreateManyComponentInput = {
    id?: number
    environmentId: number
    hostname?: string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ADR_ComponentCreateManyComponentInput = {
    adrId: number
  }

  export type ComponentTagUpdateWithoutComponentInput = {
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentTagUncheckedUpdateWithoutComponentInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentTagUncheckedUpdateManyWithoutComponentInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentInstanceUpdateWithoutComponentInput = {
    hostname?: NullableStringFieldUpdateOperationsInput | string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    environment?: EnvironmentUpdateOneRequiredWithoutComponentInstancesNestedInput
    adrInstances?: ADR_ComponentInstanceUpdateManyWithoutInstanceNestedInput
  }

  export type ComponentInstanceUncheckedUpdateWithoutComponentInput = {
    id?: IntFieldUpdateOperationsInput | number
    environmentId?: IntFieldUpdateOperationsInput | number
    hostname?: NullableStringFieldUpdateOperationsInput | string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adrInstances?: ADR_ComponentInstanceUncheckedUpdateManyWithoutInstanceNestedInput
  }

  export type ComponentInstanceUncheckedUpdateManyWithoutComponentInput = {
    id?: IntFieldUpdateOperationsInput | number
    environmentId?: IntFieldUpdateOperationsInput | number
    hostname?: NullableStringFieldUpdateOperationsInput | string | null
    specs?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ADR_ComponentUpdateWithoutComponentInput = {
    adr?: ADRUpdateOneRequiredWithoutComponentsNestedInput
  }

  export type ADR_ComponentUncheckedUpdateWithoutComponentInput = {
    adrId?: IntFieldUpdateOperationsInput | number
  }

  export type ADR_ComponentUncheckedUpdateManyWithoutComponentInput = {
    adrId?: IntFieldUpdateOperationsInput | number
  }

  export type ADR_ComponentInstanceCreateManyInstanceInput = {
    adrId: number
    impactLevel?: $Enums.ImpactLevel
  }

  export type ADR_ComponentInstanceUpdateWithoutInstanceInput = {
    impactLevel?: EnumImpactLevelFieldUpdateOperationsInput | $Enums.ImpactLevel
    adr?: ADRUpdateOneRequiredWithoutComponentInstancesNestedInput
  }

  export type ADR_ComponentInstanceUncheckedUpdateWithoutInstanceInput = {
    adrId?: IntFieldUpdateOperationsInput | number
    impactLevel?: EnumImpactLevelFieldUpdateOperationsInput | $Enums.ImpactLevel
  }

  export type ADR_ComponentInstanceUncheckedUpdateManyWithoutInstanceInput = {
    adrId?: IntFieldUpdateOperationsInput | number
    impactLevel?: EnumImpactLevelFieldUpdateOperationsInput | $Enums.ImpactLevel
  }

  export type ADRTagCreateManyAdrInput = {
    id?: number
    tag: string
  }

  export type ADR_ParticipantCreateManyAdrInput = {
    id?: number
    userId: number
    role: $Enums.ParticipantRole
    createdAt?: Date | string
  }

  export type ADR_ComponentInstanceCreateManyAdrInput = {
    instanceId: number
    impactLevel?: $Enums.ImpactLevel
  }

  export type ADR_ComponentCreateManyAdrInput = {
    componentId: number
  }

  export type ADRTagUpdateWithoutAdrInput = {
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type ADRTagUncheckedUpdateWithoutAdrInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type ADRTagUncheckedUpdateManyWithoutAdrInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type ADR_ParticipantUpdateWithoutAdrInput = {
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAdrParticipantsNestedInput
  }

  export type ADR_ParticipantUncheckedUpdateWithoutAdrInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ADR_ParticipantUncheckedUpdateManyWithoutAdrInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ADR_ComponentInstanceUpdateWithoutAdrInput = {
    impactLevel?: EnumImpactLevelFieldUpdateOperationsInput | $Enums.ImpactLevel
    instance?: ComponentInstanceUpdateOneRequiredWithoutAdrInstancesNestedInput
  }

  export type ADR_ComponentInstanceUncheckedUpdateWithoutAdrInput = {
    instanceId?: IntFieldUpdateOperationsInput | number
    impactLevel?: EnumImpactLevelFieldUpdateOperationsInput | $Enums.ImpactLevel
  }

  export type ADR_ComponentInstanceUncheckedUpdateManyWithoutAdrInput = {
    instanceId?: IntFieldUpdateOperationsInput | number
    impactLevel?: EnumImpactLevelFieldUpdateOperationsInput | $Enums.ImpactLevel
  }

  export type ADR_ComponentUpdateWithoutAdrInput = {
    component?: ComponentUpdateOneRequiredWithoutAdrComponentsNestedInput
  }

  export type ADR_ComponentUncheckedUpdateWithoutAdrInput = {
    componentId?: IntFieldUpdateOperationsInput | number
  }

  export type ADR_ComponentUncheckedUpdateManyWithoutAdrInput = {
    componentId?: IntFieldUpdateOperationsInput | number
  }

  export type RoadmapItemCreateManyTypeInput = {
    id?: number
    title: string
    description?: string | null
    componentId?: number | null
    status?: $Enums.RoadmapItem_status
    dueDate?: Date | string | null
    createdAt?: Date | string
  }

  export type RoadmapItemUpdateWithoutTypeInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumRoadmapItem_statusFieldUpdateOperationsInput | $Enums.RoadmapItem_status
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoadmapItemUncheckedUpdateWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumRoadmapItem_statusFieldUpdateOperationsInput | $Enums.RoadmapItem_status
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoadmapItemUncheckedUpdateManyWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumRoadmapItem_statusFieldUpdateOperationsInput | $Enums.RoadmapItem_status
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamCountOutputTypeDefaultArgs instead
     */
    export type TeamCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EnvironmentCountOutputTypeDefaultArgs instead
     */
    export type EnvironmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EnvironmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ComponentCountOutputTypeDefaultArgs instead
     */
    export type ComponentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ComponentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ComponentInstanceCountOutputTypeDefaultArgs instead
     */
    export type ComponentInstanceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ComponentInstanceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ADRCountOutputTypeDefaultArgs instead
     */
    export type ADRCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ADRCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoadmapTypeCountOutputTypeDefaultArgs instead
     */
    export type RoadmapTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoadmapTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamDefaultArgs instead
     */
    export type TeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Team_MemberDefaultArgs instead
     */
    export type Team_MemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Team_MemberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EnvironmentDefaultArgs instead
     */
    export type EnvironmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EnvironmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ComponentDefaultArgs instead
     */
    export type ComponentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ComponentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ComponentInstanceDefaultArgs instead
     */
    export type ComponentInstanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ComponentInstanceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ADRDefaultArgs instead
     */
    export type ADRArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ADRDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ADR_ParticipantDefaultArgs instead
     */
    export type ADR_ParticipantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ADR_ParticipantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ADR_ComponentInstanceDefaultArgs instead
     */
    export type ADR_ComponentInstanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ADR_ComponentInstanceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ADR_ComponentDefaultArgs instead
     */
    export type ADR_ComponentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ADR_ComponentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoadmapItemDefaultArgs instead
     */
    export type RoadmapItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoadmapItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoadmapTypeDefaultArgs instead
     */
    export type RoadmapTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoadmapTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LogDefaultArgs instead
     */
    export type LogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GlossaryTermDefaultArgs instead
     */
    export type GlossaryTermArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GlossaryTermDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ComponentTagDefaultArgs instead
     */
    export type ComponentTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ComponentTagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RelationshipTagDefaultArgs instead
     */
    export type RelationshipTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RelationshipTagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ADRTagDefaultArgs instead
     */
    export type ADRTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ADRTagDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}