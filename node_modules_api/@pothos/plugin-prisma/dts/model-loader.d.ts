import { GraphQLResolveInfo } from 'graphql';
import { InterfaceRef, ObjectRef, SchemaTypes } from '@pothos/core';
import { PrismaDelegate, SelectionMap } from './types';
import { SelectionState } from './util/selections';
interface ResolvablePromise<T> {
    promise: Promise<T>;
    resolve: (value: T) => void;
    reject: (err: unknown) => void;
}
export declare class ModelLoader {
    context: object;
    builder: PothosSchemaTypes.SchemaBuilder<never>;
    findUnique: (model: Record<string, unknown>, ctx: {}) => unknown;
    modelName: string;
    queryCache: Map<string, {
        selection: SelectionState;
        query: SelectionMap;
    }>;
    staged: Set<{
        state: SelectionState;
        models: Map<object, ResolvablePromise<Record<string, unknown> | null>>;
    }>;
    delegate: PrismaDelegate;
    tick: Promise<void>;
    constructor(context: object, builder: PothosSchemaTypes.SchemaBuilder<never>, modelName: string, findUnique: (model: Record<string, unknown>, ctx: {}) => unknown);
    static forRef<Types extends SchemaTypes>(ref: InterfaceRef<unknown> | ObjectRef<unknown>, modelName: string, findUnique: ((model: Record<string, unknown>, ctx: {}) => unknown) | undefined, builder: PothosSchemaTypes.SchemaBuilder<Types>): import("@pothos/core").ContextCache<ModelLoader, object, []>;
    static getFindUnique(findBy: string | {
        name: string | null;
        fields: string[];
    }): (model: Record<string, unknown>) => {};
    static getDefaultFindBy<Types extends SchemaTypes>(ref: InterfaceRef<unknown> | ObjectRef<unknown>, modelName: string, builder: PothosSchemaTypes.SchemaBuilder<Types>): string | {
        name: string | null;
        fields: string[];
    };
    static getDefaultFindUnique<Types extends SchemaTypes>(ref: InterfaceRef<unknown> | ObjectRef<unknown>, modelName: string, builder: PothosSchemaTypes.SchemaBuilder<Types>): (model: Record<string, unknown>) => {};
    static getDefaultIDSelection<Types extends SchemaTypes>(ref: InterfaceRef<unknown> | ObjectRef<unknown>, modelName: string, builder: PothosSchemaTypes.SchemaBuilder<Types>): Record<string, boolean>;
    static getCursorSelection<Types extends SchemaTypes>(ref: InterfaceRef<unknown> | ObjectRef<unknown>, modelName: string, cursor: string, builder: PothosSchemaTypes.SchemaBuilder<Types>): Record<string, boolean>;
    static getFindUniqueForField<Types extends SchemaTypes>(ref: InterfaceRef<unknown> | ObjectRef<unknown>, modelName: string, fieldName: string, builder: PothosSchemaTypes.SchemaBuilder<Types>): (model: Record<string, unknown>) => {};
    getSelection(info: GraphQLResolveInfo): {
        selection: SelectionState;
        query: SelectionMap;
    };
    loadSelection(info: GraphQLResolveInfo, model: object): Promise<Record<string, unknown> | null>;
    stageQuery(selection: SelectionState, query: SelectionMap, model: object): Promise<Record<string, unknown> | null>;
    initLoad(state: SelectionState, initialModel: {}): Promise<Record<string, unknown> | null>;
}
export {};
//# sourceMappingURL=model-loader.d.ts.map