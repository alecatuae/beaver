import { CompatibleTypes, ExposeNullability, FieldKind, FieldRef, InputFieldMap, InterfaceParam, NormalizeArgs, ObjectRef, PluginName, SchemaTypes, ShapeFromTypeParam, TypeParam } from '@pothos/core';
import { PrismaRef } from './interface-ref';
import { PrismaConnectionShape, PrismaModelTypes, RelatedConnectionOptions, RelatedFieldOptions, RelationCountOptions, ShapeFromConnection, TypesForRelation, VariantFieldOptions } from './types';
import { FieldMap } from './util/relation-map';
declare const RootBuilder: {
    new <Types extends SchemaTypes, Shape, Kind extends FieldKind>(name: string, builder: PothosSchemaTypes.SchemaBuilder<Types>, kind: FieldKind, graphqlKind: PothosSchemaTypes.PothosKindToGraphQLType[FieldKind]): PothosSchemaTypes.RootFieldBuilder<Types, Shape, Kind>;
};
type ContextForAuth<Types extends SchemaTypes, Scopes extends {} = {}> = PothosSchemaTypes.ScopeAuthContextForAuth<Types, Scopes> extends {
    Context: infer T;
} ? T extends object ? T : object : object;
type FieldAuthScopes<Types extends SchemaTypes, Parent, Args extends {} = {}> = PothosSchemaTypes.ScopeAuthFieldAuthScopes<Types, Parent, Args> extends {
    Scopes: infer T;
} ? T : never;
export declare class PrismaObjectFieldBuilder<Types extends SchemaTypes, Model extends PrismaModelTypes, NeedsResolve extends boolean, Shape extends object = Model['Shape']> extends RootBuilder<Types, Shape, 'PrismaObject'> {
    model: string;
    prismaFieldMap: FieldMap;
    exposeBoolean: <Nullable extends boolean, ResolveReturnShape, Name extends CompatibleTypes<Types, Model["Shape"], "Boolean", true>>(name: Name, ...args: NormalizeArgs<[options: ExposeNullability<Types, "Boolean", Model["Shape"], Name, Nullable> & Omit<PothosSchemaTypes.ObjectFieldOptions<Types, Shape, "Boolean", Nullable, {}, ResolveReturnShape>, "type" | "description" | "resolve" | "nullable" | "select"> & {
        description?: string | false | undefined;
    }], 0>) => FieldRef<import("@pothos/core").FieldNullability<"Boolean"> extends Nullable ? Types["DefaultFieldNullability"] extends true ? ("Boolean" extends infer T ? T extends "Boolean" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T> : never : never : never) | null | undefined : "Boolean" extends infer T_1 ? T_1 extends "Boolean" ? T_1 extends keyof Types["outputShapes"] ? Types["outputShapes"][T_1] : T_1 extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T_1> : never : never : never : Nullable extends true ? ("Boolean" extends infer T_2 ? T_2 extends "Boolean" ? T_2 extends keyof Types["outputShapes"] ? Types["outputShapes"][T_2] : T_2 extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T_2> : never : never : never) | null | undefined : "Boolean" extends infer T_3 ? T_3 extends "Boolean" ? T_3 extends keyof Types["outputShapes"] ? Types["outputShapes"][T_3] : T_3 extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T_3> : never : never : never, "PrismaObject">;
    exposeFloat: <Nullable extends boolean, ResolveReturnShape, Name extends CompatibleTypes<Types, Model["Shape"], "Float", true>>(name: Name, ...args: NormalizeArgs<[options: ExposeNullability<Types, "Float", Model["Shape"], Name, Nullable> & Omit<PothosSchemaTypes.ObjectFieldOptions<Types, Shape, "Float", Nullable, {}, ResolveReturnShape>, "type" | "description" | "resolve" | "nullable" | "select"> & {
        description?: string | false | undefined;
    }], 0>) => FieldRef<import("@pothos/core").FieldNullability<"Float"> extends Nullable ? Types["DefaultFieldNullability"] extends true ? ("Float" extends infer T ? T extends "Float" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T> : never : never : never) | null | undefined : "Float" extends infer T_1 ? T_1 extends "Float" ? T_1 extends keyof Types["outputShapes"] ? Types["outputShapes"][T_1] : T_1 extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T_1> : never : never : never : Nullable extends true ? ("Float" extends infer T_2 ? T_2 extends "Float" ? T_2 extends keyof Types["outputShapes"] ? Types["outputShapes"][T_2] : T_2 extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T_2> : never : never : never) | null | undefined : "Float" extends infer T_3 ? T_3 extends "Float" ? T_3 extends keyof Types["outputShapes"] ? Types["outputShapes"][T_3] : T_3 extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T_3> : never : never : never, "PrismaObject">;
    exposeInt: <Nullable extends boolean, ResolveReturnShape, Name extends CompatibleTypes<Types, Model["Shape"], "Int", true>>(name: Name, ...args: NormalizeArgs<[options: ExposeNullability<Types, "Int", Model["Shape"], Name, Nullable> & Omit<PothosSchemaTypes.ObjectFieldOptions<Types, Shape, "Int", Nullable, {}, ResolveReturnShape>, "type" | "description" | "resolve" | "nullable" | "select"> & {
        description?: string | false | undefined;
    }], 0>) => FieldRef<import("@pothos/core").FieldNullability<"Int"> extends Nullable ? Types["DefaultFieldNullability"] extends true ? ("Int" extends infer T ? T extends "Int" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T> : never : never : never) | null | undefined : "Int" extends infer T_1 ? T_1 extends "Int" ? T_1 extends keyof Types["outputShapes"] ? Types["outputShapes"][T_1] : T_1 extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T_1> : never : never : never : Nullable extends true ? ("Int" extends infer T_2 ? T_2 extends "Int" ? T_2 extends keyof Types["outputShapes"] ? Types["outputShapes"][T_2] : T_2 extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T_2> : never : never : never) | null | undefined : "Int" extends infer T_3 ? T_3 extends "Int" ? T_3 extends keyof Types["outputShapes"] ? Types["outputShapes"][T_3] : T_3 extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T_3> : never : never : never, "PrismaObject">;
    exposeID: <Nullable extends boolean, ResolveReturnShape, Name extends CompatibleTypes<Types, Model["Shape"], "ID", true>>(name: Name, ...args: NormalizeArgs<[options: ExposeNullability<Types, "ID", Model["Shape"], Name, Nullable> & Omit<PothosSchemaTypes.ObjectFieldOptions<Types, Shape, "ID", Nullable, {}, ResolveReturnShape>, "type" | "description" | "resolve" | "nullable" | "select"> & {
        description?: string | false | undefined;
    }], 0>) => FieldRef<import("@pothos/core").FieldNullability<"ID"> extends Nullable ? Types["DefaultFieldNullability"] extends true ? ("ID" extends infer T ? T extends "ID" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T> : never : never : never) | null | undefined : "ID" extends infer T_1 ? T_1 extends "ID" ? T_1 extends keyof Types["outputShapes"] ? Types["outputShapes"][T_1] : T_1 extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T_1> : never : never : never : Nullable extends true ? ("ID" extends infer T_2 ? T_2 extends "ID" ? T_2 extends keyof Types["outputShapes"] ? Types["outputShapes"][T_2] : T_2 extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T_2> : never : never : never) | null | undefined : "ID" extends infer T_3 ? T_3 extends "ID" ? T_3 extends keyof Types["outputShapes"] ? Types["outputShapes"][T_3] : T_3 extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T_3> : never : never : never, "PrismaObject">;
    exposeString: <Nullable extends boolean, ResolveReturnShape, Name extends CompatibleTypes<Types, Model["Shape"], "String", true>>(name: Name, ...args: NormalizeArgs<[options: ExposeNullability<Types, "String", Model["Shape"], Name, Nullable> & Omit<PothosSchemaTypes.ObjectFieldOptions<Types, Shape, "String", Nullable, {}, ResolveReturnShape>, "type" | "description" | "resolve" | "nullable" | "select"> & {
        description?: string | false | undefined;
    }], 0>) => FieldRef<import("@pothos/core").FieldNullability<"String"> extends Nullable ? Types["DefaultFieldNullability"] extends true ? ("String" extends infer T ? T extends "String" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T> : never : never : never) | null | undefined : "String" extends infer T_1 ? T_1 extends "String" ? T_1 extends keyof Types["outputShapes"] ? Types["outputShapes"][T_1] : T_1 extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T_1> : never : never : never : Nullable extends true ? ("String" extends infer T_2 ? T_2 extends "String" ? T_2 extends keyof Types["outputShapes"] ? Types["outputShapes"][T_2] : T_2 extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T_2> : never : never : never) | null | undefined : "String" extends infer T_3 ? T_3 extends "String" ? T_3 extends keyof Types["outputShapes"] ? Types["outputShapes"][T_3] : T_3 extends import("@pothos/core").BaseEnum ? import("@pothos/core").ValuesFromEnum<T_3> : never : never : never, "PrismaObject">;
    exposeBooleanList: <Nullable extends boolean, ResolveReturnShape, Name extends CompatibleTypes<Types, Model["Shape"], ["Boolean"], true>>(name: Name, ...args: NormalizeArgs<[options: ExposeNullability<Types, ["Boolean"], Model["Shape"], Name, Nullable> & Omit<PothosSchemaTypes.ObjectFieldOptions<Types, Shape, ["Boolean"], Nullable, {}, ResolveReturnShape>, "type" | "description" | "resolve" | "nullable" | "select"> & {
        description?: string | false | undefined;
    }], 0>) => FieldRef<ShapeFromTypeParam<Types, ["Boolean"], Nullable>, "PrismaObject">;
    exposeFloatList: <Nullable extends boolean, ResolveReturnShape, Name extends CompatibleTypes<Types, Model["Shape"], ["Float"], true>>(name: Name, ...args: NormalizeArgs<[options: ExposeNullability<Types, ["Float"], Model["Shape"], Name, Nullable> & Omit<PothosSchemaTypes.ObjectFieldOptions<Types, Shape, ["Float"], Nullable, {}, ResolveReturnShape>, "type" | "description" | "resolve" | "nullable" | "select"> & {
        description?: string | false | undefined;
    }], 0>) => FieldRef<ShapeFromTypeParam<Types, ["Float"], Nullable>, "PrismaObject">;
    exposeIntList: <Nullable extends boolean, ResolveReturnShape, Name extends CompatibleTypes<Types, Model["Shape"], ["Int"], true>>(name: Name, ...args: NormalizeArgs<[options: ExposeNullability<Types, ["Int"], Model["Shape"], Name, Nullable> & Omit<PothosSchemaTypes.ObjectFieldOptions<Types, Shape, ["Int"], Nullable, {}, ResolveReturnShape>, "type" | "description" | "resolve" | "nullable" | "select"> & {
        description?: string | false | undefined;
    }], 0>) => FieldRef<ShapeFromTypeParam<Types, ["Int"], Nullable>, "PrismaObject">;
    exposeIDList: <Nullable extends boolean, ResolveReturnShape, Name extends CompatibleTypes<Types, Model["Shape"], ["ID"], true>>(name: Name, ...args: NormalizeArgs<[options: ExposeNullability<Types, ["ID"], Model["Shape"], Name, Nullable> & Omit<PothosSchemaTypes.ObjectFieldOptions<Types, Shape, ["ID"], Nullable, {}, ResolveReturnShape>, "type" | "description" | "resolve" | "nullable" | "select"> & {
        description?: string | false | undefined;
    }], 0>) => FieldRef<ShapeFromTypeParam<Types, ["ID"], Nullable>, "PrismaObject">;
    exposeStringList: <Nullable extends boolean, ResolveReturnShape, Name extends CompatibleTypes<Types, Model["Shape"], ["String"], true>>(name: Name, ...args: NormalizeArgs<[options: ExposeNullability<Types, ["String"], Model["Shape"], Name, Nullable> & Omit<PothosSchemaTypes.ObjectFieldOptions<Types, Shape, ["String"], Nullable, {}, ResolveReturnShape>, "type" | "description" | "resolve" | "nullable" | "select"> & {
        description?: string | false | undefined;
    }], 0>) => FieldRef<ShapeFromTypeParam<Types, ["String"], Nullable>, "PrismaObject">;
    withAuth: 'scopeAuth' extends PluginName ? <Scopes extends FieldAuthScopes<Types, Shape, Record<string, unknown>>>(scopes: Scopes) => PothosSchemaTypes.PrismaObjectFieldBuilder<Omit<Types, 'Context'> & {
        Context: ContextForAuth<Types, Scopes>;
    }, Model, NeedsResolve, Shape> : '@pothos/plugin-scope-auth is required to use this method';
    relatedConnection: 'relay' extends PluginName ? <Field extends Model['ListRelations'], Nullable extends boolean, Args extends InputFieldMap, ConnectionInterfaces extends InterfaceParam<Types>[] = [], EdgeInterfaces extends InterfaceParam<Types>[] = []>(field: Field, options: RelatedConnectionOptions<Types, Model, Field, Nullable, Args, NeedsResolve>, ...args: NormalizeArgs<[
        connectionOptions: ObjectRef<ShapeFromConnection<PothosSchemaTypes.ConnectionShapeHelper<Types, Shape, false>>> | PothosSchemaTypes.ConnectionObjectOptions<Types, ObjectRef<ShapeFromTypeParam<Types, [
            ObjectRef<Model['Relations'][Field & keyof Model['Relations']]['Shape']>
        ], Nullable>>, false, false, PrismaConnectionShape<Types, ShapeFromTypeParam<Types, [
            ObjectRef<Model['Relations'][Field & keyof Model['Relations']]['Shape']>
        ], Nullable>, Shape, Args>, ConnectionInterfaces>,
        edgeOptions: ObjectRef<{
            cursor: string;
            node?: ShapeFromTypeParam<Types, Model['Shape'], false>;
        }> | PothosSchemaTypes.ConnectionEdgeObjectOptions<Types, ObjectRef<ShapeFromTypeParam<Types, [
            ObjectRef<Model['Relations'][Field & keyof Model['Relations']]['Shape']>
        ], Nullable>>, false, PrismaConnectionShape<Types, ShapeFromTypeParam<Types, [
            ObjectRef<Model['Relations'][Field & keyof Model['Relations']]['Shape']>
        ], Nullable>, Shape, Args>, EdgeInterfaces>
    ], 0>) => FieldRef<ShapeFromConnection<PothosSchemaTypes.ConnectionShapeHelper<Types, Shape, Nullable>>> : '@pothos/plugin-relay is required to use this method';
    constructor(name: string, builder: PothosSchemaTypes.SchemaBuilder<Types>, model: string, fieldMap: FieldMap, graphqlKind?: PothosSchemaTypes.PothosKindToGraphQLType[FieldKind]);
    relation<Field extends Model['RelationName'], Nullable extends boolean, Args extends InputFieldMap, ResolveReturnShape>(name: Field, ...allArgs: NormalizeArgs<[
        options: RelatedFieldOptions<Types, Model, Field, Nullable, Args, ResolveReturnShape, NeedsResolve, Shape>
    ]>): FieldRef<Model['Relations'][Field]['Shape'], 'Object'>;
    relationCount<Field extends Model['RelationName'], Args extends InputFieldMap>(name: Field, ...allArgs: NormalizeArgs<[
        options: RelationCountOptions<Types, Shape, NeedsResolve, TypesForRelation<Types, Model, Field>['Where'], Args>
    ]>): FieldRef<number, 'Object'>;
    variant<Variant extends Model['Name'] | PrismaRef<Model>, Args extends InputFieldMap, Nullable>(variant: Variant, ...allArgs: NormalizeArgs<[
        options: VariantFieldOptions<Types, Model, Variant extends PrismaRef<Model> ? Variant : PrismaRef<Model>, Args, Nullable, Shape>
    ]>): FieldRef<Model['Shape'], 'Object'>;
    expose<Type extends TypeParam<Types>, Nullable extends boolean, ResolveReturnShape, Name extends CompatibleTypes<Types, Model['Shape'], Type, true>>(name: Name, ...args: NormalizeArgs<[
        options: ExposeNullability<Types, Type, Model['Shape'], Name, Nullable> & Omit<PothosSchemaTypes.ObjectFieldOptions<Types, Shape, Type, Nullable, {}, ResolveReturnShape>, 'description' | 'nullable' | 'resolve' | 'select'> & {
            description?: string | false;
        }
    ]>): FieldRef<ShapeFromTypeParam<Types, Type, Nullable>, "PrismaObject">;
    private createExpose;
}
export {};
//# sourceMappingURL=prisma-field-builder.d.ts.map