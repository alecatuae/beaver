import './global-types';
import './schema-builder';
import './field-builder';
import { GraphQLFieldResolver } from 'graphql';
import { BasePlugin, BuildCache, PothosOutputFieldConfig, PothosTypeConfig, SchemaTypes } from '@pothos/core';
import { PrismaModelTypes } from './types';
import { formatPrismaCursor, parsePrismaCursor } from './util/cursors';
import { getModel, getRefFromModel } from './util/datamodel';
import { queryFromInfo } from './util/map-query';
export { prismaConnectionHelpers } from './connection-helpers';
export { PrismaInterfaceRef } from './interface-ref';
export { PrismaNodeRef } from './node-ref';
export { prismaModelKey, PrismaObjectRef } from './object-ref';
export * from './types';
declare const pluginName = "prisma";
export default pluginName;
export { formatPrismaCursor, getModel, getRefFromModel, parsePrismaCursor, queryFromInfo };
export type PrismaObjectFieldBuilder<Types extends SchemaTypes, ParentShape> = PothosSchemaTypes.ObjectFieldBuilder<Types, ParentShape>;
export declare const ObjectFieldBuilder: new <Types extends SchemaTypes, Model extends PrismaModelTypes, NeedsResolve extends boolean, Shape extends object = Model["Shape"]>(name: string, builder: PothosSchemaTypes.SchemaBuilder<Types>) => PothosSchemaTypes.PrismaObjectFieldBuilder<Types, Model, NeedsResolve, Shape>;
export declare class PrismaPlugin<Types extends SchemaTypes> extends BasePlugin<Types> {
    constructor(cache: BuildCache<Types>);
    onTypeConfig(typeConfig: PothosTypeConfig): PothosTypeConfig;
    onOutputFieldConfig(fieldConfig: PothosOutputFieldConfig<Types>): PothosOutputFieldConfig<Types> | null;
    wrapResolve(resolver: GraphQLFieldResolver<unknown, Types['Context'], object, unknown>, fieldConfig: PothosOutputFieldConfig<Types>): GraphQLFieldResolver<unknown, Types['Context'], object>;
}
//# sourceMappingURL=index.d.ts.map